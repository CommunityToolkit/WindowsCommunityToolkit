//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#include "pch.h"
#include "birthdayCake.h"
#include "d2d1.h"
#include <d2d1_1.h>
#include <d2d1helper.h>
#include "WindowsNumerics.h"
#include <Windows.Graphics.Interop.h>
#include <wrl.h>

using namespace Windows::Foundation;
using namespace Windows::Foundation::Numerics;
using namespace Windows::UI;
using namespace Windows::UI::Composition;
using namespace Windows::Graphics;
using namespace Microsoft::WRL;

namespace
{
    class GeoSource final :
        public ABI::Windows::Graphics::IGeometrySource2D,
        public ABI::Windows::Graphics::IGeometrySource2DInterop
    {
        ULONG _cRef;
        ComPtr<ID2D1Geometry> _cpGeometry;

    public:
        GeoSource(ID2D1Geometry* pGeometry)
            : _cRef(1)
            , _cpGeometry(pGeometry)
        { }

        IFACEMETHODIMP QueryInterface(REFIID iid, void ** ppvObject) override
        {
            if (iid == __uuidof(ABI::Windows::Graphics::IGeometrySource2DInterop))
            {
                AddRef();
                *ppvObject = static_cast<ABI::Windows::Graphics::IGeometrySource2DInterop*>(this);
                return S_OK;
            }
            return E_NOINTERFACE;
        }

        IFACEMETHODIMP_(ULONG) AddRef() override
        {
            return InterlockedIncrement(&_cRef);
        }

        IFACEMETHODIMP_(ULONG) Release() override
        {
            ULONG cRef = InterlockedDecrement(&_cRef);
            if (cRef == 0)
            {
                delete this;
            }
            return cRef;
        }

        IFACEMETHODIMP GetIids(ULONG*, IID**) override
        {
            return E_NOTIMPL;
        }

        IFACEMETHODIMP GetRuntimeClassName(HSTRING*) override
        {
            return E_NOTIMPL;
        }

        IFACEMETHODIMP GetTrustLevel(TrustLevel*) override
        {
            return E_NOTIMPL;
        }

        IFACEMETHODIMP GetGeometry(ID2D1Geometry** value) override
        {
            *value = _cpGeometry.Get();
            (*value)->AddRef();
            return S_OK;
        }

        IFACEMETHODIMP TryGetGeometryUsingFactory(ID2D1Factory*, ID2D1Geometry**) override
        {
            return E_NOTIMPL;
        }
    };

    typedef ComPtr<GeoSource> CanvasGeometry;
    static bool IsRuntimeCompatible()
    {
        if (!Windows::Foundation::Metadata::ApiInformation::IsTypePresent("Windows.UI.Composition.CompositionGeometricClip"))
        {
            return false;
        }
        return true;
    }

    ref class AnimatedVisual sealed : public Microsoft::UI::Xaml::Controls::IAnimatedVisual
    {
        ComPtr<ID2D1Factory> _d2dFactory;
        const int64_t c_durationTicks = 20000000L;
        Compositor^ const _c;
        ExpressionAnimation^ const _reusableExpressionAnimation;
        CompositionColorBrush^ _colorBrush_AlmostDarkCyan_FF0063B0;
        CompositionColorBrush^ _colorBrush_AlmostDarkOliveGreen_FF613D30;
        CompositionColorBrush^ _colorBrush_AlmostDodgerBlue_FF0177D9;
        CompositionColorBrush^ _colorBrush_AlmostLightGray_FFCCCCCC;
        CompositionColorBrush^ _colorBrush_AlmostOrange_FFFFB901;
        CompositionColorBrush^ _colorBrush_AlmostSpringGreen_FF01CC68;
        CompositionColorBrush^ _colorBrush_AlmostTomato_FFFD4341;
        CompositionColorBrush^ _colorBrush_AlmostWhiteSmoke_FFF1F1F1;
        CompositionPath^ _compositionPath_00;
        CompositionPath^ _compositionPath_01;
        CompositionPath^ _compositionPath_02;
        CompositionPath^ _compositionPath_03;
        CompositionPath^ _compositionPath_04;
        CompositionPath^ _compositionPath_05;
        CompositionPath^ _compositionPath_06;
        CompositionPath^ _compositionPath_07;
        CompositionPath^ _compositionPath_08;
        CompositionPath^ _compositionPath_09;
        CompositionPath^ _compositionPath_10;
        CompositionPath^ _compositionPath_11;
        CompositionPath^ _compositionPath_17;
        CompositionPath^ _compositionPath_45;
        CubicBezierEasingFunction^ _cubicBezierEasingFunction_00;
        CubicBezierEasingFunction^ _cubicBezierEasingFunction_01;
        CubicBezierEasingFunction^ _cubicBezierEasingFunction_02;
        CubicBezierEasingFunction^ _cubicBezierEasingFunction_03;
        CubicBezierEasingFunction^ _cubicBezierEasingFunction_04;
        CubicBezierEasingFunction^ _cubicBezierEasingFunction_05;
        CubicBezierEasingFunction^ _cubicBezierEasingFunction_07;
        CubicBezierEasingFunction^ _cubicBezierEasingFunction_09;
        CubicBezierEasingFunction^ _cubicBezierEasingFunction_10;
        StepEasingFunction^ _holdThenStepEasingFunction;
        InsetClip^ _insetClip;
        LinearEasingFunction^ _linearEasingFunction;
        CompositionPathGeometry^ _pathGeometry_46;
        CompositionPathGeometry^ _pathGeometry_47;
        CompositionPathGeometry^ _pathGeometry_48;
        CompositionPathGeometry^ _pathGeometry_51;
        CompositionPathGeometry^ _pathGeometry_52;
        CompositionPathGeometry^ _pathGeometry_54;
        CompositionPathGeometry^ _pathGeometry_55;
        CompositionPathGeometry^ _pathGeometry_56;
        CompositionPathGeometry^ _pathGeometry_60;
        ContainerVisual^ _root;
        ScalarKeyFrameAnimation^ _scalarAnimation_0_to_1_30;
        ScalarKeyFrameAnimation^ _scalarAnimation_0_to_1_31;
        ScalarKeyFrameAnimation^ _scalarAnimation_0_to_1_54;
        ScalarKeyFrameAnimation^ _scalarAnimation_0_to_1_55;
        ScalarKeyFrameAnimation^ _scalarAnimation_0_to_1_78;
        ScalarKeyFrameAnimation^ _scalarAnimation_0_to_1_79;
        ScalarKeyFrameAnimation^ _scalarAnimation_0_to_1_84;
        ScalarKeyFrameAnimation^ _scalarAnimation_0_to_2_07;
        ScalarKeyFrameAnimation^ _scalarAnimation_0_to_3_14;
        ScalarKeyFrameAnimation^ _scalarAnimation_0_to_3_23;
        ExpressionAnimation^ _scalarExpressionAnimation;
        StepEasingFunction^ _stepThenHoldEasingFunction;
        Vector2KeyFrameAnimation^ _vector2Animation_0;

        CompositionColorBrush^ ColorBrush_AlmostDarkCyan_FF0063B0()
        {
            return _colorBrush_AlmostDarkCyan_FF0063B0 = _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0x00, 0x63, 0xB0));
        }

        // Layer (Shape): Cake
        //   Path 1
        CompositionColorBrush^ ColorBrush_AlmostDarkKhaki_FFB88F66()
        {
            return _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0xB8, 0x8F, 0x66));
        }

        CompositionColorBrush^ ColorBrush_AlmostDarkOliveGreen_FF613D30()
        {
            return _colorBrush_AlmostDarkOliveGreen_FF613D30 = _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0x61, 0x3D, 0x30));
        }

        CompositionColorBrush^ ColorBrush_AlmostDodgerBlue_FF0177D9()
        {
            return _colorBrush_AlmostDodgerBlue_FF0177D9 = _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0x01, 0x77, 0xD9));
        }

        // Layer (Shape): Flame
        //   Path 1
        CompositionColorBrush^ ColorBrush_AlmostKhaki_FFFFD579()
        {
            return _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0xFF, 0xD5, 0x79));
        }

        CompositionColorBrush^ ColorBrush_AlmostLightGray_FFCCCCCC()
        {
            return _colorBrush_AlmostLightGray_FFCCCCCC = _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0xCC, 0xCC, 0xCC));
        }

        // Path 1
        CompositionColorBrush^ ColorBrush_AlmostOlive_FF7EBA00()
        {
            return _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0x7E, 0xBA, 0x00));
        }

        CompositionColorBrush^ ColorBrush_AlmostOrange_FFFFB901()
        {
            return _colorBrush_AlmostOrange_FFFFB901 = _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0xFF, 0xB9, 0x01));
        }

        // Layer (Shape): Cake 2
        //   Path 1
        CompositionColorBrush^ ColorBrush_AlmostOrange_FFFFBA01()
        {
            return _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0xFF, 0xBA, 0x01));
        }

        // Layer (Shape): Cake 2
        //   Path 1
        CompositionColorBrush^ ColorBrush_AlmostOrangeRed_FFDA4100()
        {
            return _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0xDA, 0x41, 0x00));
        }

        // Layer (Shape): Cake 2
        //   Path 1
        CompositionColorBrush^ ColorBrush_AlmostOrangeRed_FFF7630B()
        {
            return _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0xF7, 0x63, 0x0B));
        }

        CompositionColorBrush^ ColorBrush_AlmostSpringGreen_FF01CC68()
        {
            return _colorBrush_AlmostSpringGreen_FF01CC68 = _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0x01, 0xCC, 0x68));
        }

        CompositionColorBrush^ ColorBrush_AlmostTomato_FFFD4341()
        {
            return _colorBrush_AlmostTomato_FFFD4341 = _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0xFD, 0x43, 0x41));
        }

        CompositionColorBrush^ ColorBrush_AlmostWhiteSmoke_FFF1F1F1()
        {
            return _colorBrush_AlmostWhiteSmoke_FFF1F1F1 = _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0xF1, 0xF1, 0xF1));
        }

        CompositionPath^ CompositionPath_00()
        {
            auto result = _compositionPath_00 = ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_00()));
            return result;
        }

        CompositionPath^ CompositionPath_01()
        {
            auto result = _compositionPath_01 = ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_01()));
            return result;
        }

        CompositionPath^ CompositionPath_02()
        {
            auto result = _compositionPath_02 = ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_02()));
            return result;
        }

        CompositionPath^ CompositionPath_03()
        {
            auto result = _compositionPath_03 = ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_03()));
            return result;
        }

        CompositionPath^ CompositionPath_04()
        {
            auto result = _compositionPath_04 = ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_04()));
            return result;
        }

        CompositionPath^ CompositionPath_05()
        {
            auto result = _compositionPath_05 = ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_05()));
            return result;
        }

        CompositionPath^ CompositionPath_06()
        {
            auto result = _compositionPath_06 = ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_06()));
            return result;
        }

        CompositionPath^ CompositionPath_07()
        {
            auto result = _compositionPath_07 = ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_07()));
            return result;
        }

        CompositionPath^ CompositionPath_08()
        {
            auto result = _compositionPath_08 = ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_08()));
            return result;
        }

        CompositionPath^ CompositionPath_09()
        {
            auto result = _compositionPath_09 = ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_09()));
            return result;
        }

        CompositionPath^ CompositionPath_10()
        {
            auto result = _compositionPath_10 = ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_10()));
            return result;
        }

        CompositionPath^ CompositionPath_11()
        {
            auto result = _compositionPath_11 = ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_11()));
            return result;
        }

        CompositionPath^ CompositionPath_17()
        {
            auto result = _compositionPath_17 = ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_17()));
            return result;
        }

        CompositionPath^ CompositionPath_45()
        {
            auto result = _compositionPath_45 = ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_45()));
            return result;
        }

        // Layer (Shape): Shape Layer 8
        CompositionContainerShape^ ContainerShape_000()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 0, 0, 0, 0, 0, 0 };
            auto shapes = result->Shapes;
            shapes->Append(ContainerShape_001());
            result->StartAnimation("TransformMatrix._11", ScalarAnimation_1_to_0_00());
            auto controller = result->TryGetAnimationController("TransformMatrix._11");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "my.TransformMatrix._11";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TransformMatrix._22", _reusableExpressionAnimation);
            return result;
        }

        // Layer (Shape): Shape Layer 8
        CompositionContainerShape^ ContainerShape_001()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 1, 0, 0, 1, 83.875F, 69.25F };
            auto shapes = result->Shapes;
            shapes->Append(SpriteShape_00());
            return result;
        }

        // Layer (Shape): Shape Layer 7
        CompositionContainerShape^ ContainerShape_002()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 0, 0, 0, 0, 0, 0 };
            auto shapes = result->Shapes;
            shapes->Append(ContainerShape_003());
            result->StartAnimation("TransformMatrix._11", ScalarAnimation_1_to_0_01());
            auto controller = result->TryGetAnimationController("TransformMatrix._11");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "my.TransformMatrix._11";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TransformMatrix._22", _reusableExpressionAnimation);
            return result;
        }

        // Layer (Shape): Shape Layer 7
        CompositionContainerShape^ ContainerShape_003()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 1, 0, 0, 1, 83.875F, 64.25F };
            auto shapes = result->Shapes;
            shapes->Append(SpriteShape_01());
            return result;
        }

        // Layer (Shape): Shape Layer 12
        CompositionContainerShape^ ContainerShape_004()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 0, 0, 0, 0, 0, 0 };
            auto shapes = result->Shapes;
            shapes->Append(ContainerShape_005());
            result->StartAnimation("TransformMatrix._11", ScalarAnimation_1_to_0_02());
            auto controller = result->TryGetAnimationController("TransformMatrix._11");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "my.TransformMatrix._11";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TransformMatrix._22", _reusableExpressionAnimation);
            return result;
        }

        // Layer (Shape): Shape Layer 12
        CompositionContainerShape^ ContainerShape_005()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 0.819152057F, 0.57357645F, -0.57357645F, 0.819152057F, 38.223732F, 77.5684662F };
            auto shapes = result->Shapes;
            shapes->Append(SpriteShape_02());
            return result;
        }

        // Layer (Shape): Shape Layer 11
        CompositionContainerShape^ ContainerShape_006()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 0, 0, 0, 0, 0, 0 };
            auto shapes = result->Shapes;
            shapes->Append(ContainerShape_007());
            result->StartAnimation("TransformMatrix._11", ScalarAnimation_1_to_0_03());
            auto controller = result->TryGetAnimationController("TransformMatrix._11");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "my.TransformMatrix._11";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TransformMatrix._22", _reusableExpressionAnimation);
            return result;
        }

        // Layer (Shape): Shape Layer 11
        CompositionContainerShape^ ContainerShape_007()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 1, 0, 0, 1, 83.875F, 69.25F };
            auto shapes = result->Shapes;
            shapes->Append(SpriteShape_03());
            return result;
        }

        // Layer (Shape): Shape Layer 2
        CompositionContainerShape^ ContainerShape_008()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 0, 0, 0, 0, 0, 0 };
            auto shapes = result->Shapes;
            shapes->Append(ContainerShape_009());
            result->StartAnimation("TransformMatrix._11", ScalarAnimation_1_to_0_04());
            auto controller = result->TryGetAnimationController("TransformMatrix._11");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "my.TransformMatrix._11";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TransformMatrix._22", _reusableExpressionAnimation);
            return result;
        }

        // Layer (Shape): Shape Layer 2
        CompositionContainerShape^ ContainerShape_009()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 1, 0, 0, 1, 71.375F, 61.75F };
            auto shapes = result->Shapes;
            shapes->Append(SpriteShape_04());
            return result;
        }

        // Layer (Shape): Shape Layer 1
        CompositionContainerShape^ ContainerShape_010()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 0, 0, 0, 0, 0, 0 };
            auto shapes = result->Shapes;
            shapes->Append(ContainerShape_011());
            result->StartAnimation("TransformMatrix._11", ScalarAnimation_1_to_0_05());
            auto controller = result->TryGetAnimationController("TransformMatrix._11");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "my.TransformMatrix._11";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TransformMatrix._22", _reusableExpressionAnimation);
            return result;
        }

        // Layer (Shape): Shape Layer 1
        CompositionContainerShape^ ContainerShape_011()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 1, 0, 0, 1, 66.375F, 64.25F };
            auto shapes = result->Shapes;
            shapes->Append(SpriteShape_05());
            return result;
        }

        // Layer (Shape): Shape Layer 9
        CompositionContainerShape^ ContainerShape_012()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 0, 0, 0, 0, 0, 0 };
            auto shapes = result->Shapes;
            shapes->Append(ContainerShape_013());
            result->StartAnimation("TransformMatrix._11", ScalarAnimation_1_to_0_07());
            auto controller = result->TryGetAnimationController("TransformMatrix._11");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "my.TransformMatrix._11";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TransformMatrix._22", _reusableExpressionAnimation);
            return result;
        }

        // Layer (Shape): Shape Layer 9
        CompositionContainerShape^ ContainerShape_013()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 1, 0, 0, 1, 73.875F, 69.25F };
            auto shapes = result->Shapes;
            shapes->Append(SpriteShape_06());
            return result;
        }

        // Layer (Shape): Shape Layer 8
        CompositionContainerShape^ ContainerShape_014()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 0, 0, 0, 0, 0, 0 };
            auto shapes = result->Shapes;
            shapes->Append(ContainerShape_015());
            result->StartAnimation("TransformMatrix._11", ScalarAnimation_1_to_0_08());
            auto controller = result->TryGetAnimationController("TransformMatrix._11");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "my.TransformMatrix._11";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TransformMatrix._22", _reusableExpressionAnimation);
            return result;
        }

        // Layer (Shape): Shape Layer 8
        CompositionContainerShape^ ContainerShape_015()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 1, 0, 0, 1, 73.875F, 69.25F };
            auto shapes = result->Shapes;
            shapes->Append(SpriteShape_07());
            return result;
        }

        // Layer (Shape): Shape Layer 7
        CompositionContainerShape^ ContainerShape_016()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 0, 0, 0, 0, 0, 0 };
            auto shapes = result->Shapes;
            shapes->Append(ContainerShape_017());
            result->StartAnimation("TransformMatrix._11", ScalarAnimation_1_to_0_09());
            auto controller = result->TryGetAnimationController("TransformMatrix._11");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "my.TransformMatrix._11";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TransformMatrix._22", _reusableExpressionAnimation);
            return result;
        }

        // Layer (Shape): Shape Layer 7
        CompositionContainerShape^ ContainerShape_017()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 1, 0, 0, 1, 73.875F, 69.25F };
            auto shapes = result->Shapes;
            shapes->Append(SpriteShape_08());
            return result;
        }

        // Layer (Shape): Shape Layer 6
        CompositionContainerShape^ ContainerShape_018()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 0, 0, 0, 0, 0, 0 };
            auto shapes = result->Shapes;
            shapes->Append(ContainerShape_019());
            result->StartAnimation("TransformMatrix._11", ScalarAnimation_1_to_0_10());
            auto controller = result->TryGetAnimationController("TransformMatrix._11");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "my.TransformMatrix._11";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TransformMatrix._22", _reusableExpressionAnimation);
            return result;
        }

        // Layer (Shape): Shape Layer 6
        CompositionContainerShape^ ContainerShape_019()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 1, 0, 0, 1, 73.875F, 69.25F };
            auto shapes = result->Shapes;
            shapes->Append(SpriteShape_09());
            return result;
        }

        // Layer (Shape): Shape Layer 5
        CompositionContainerShape^ ContainerShape_020()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 0, 0, 0, 0, 0, 0 };
            auto shapes = result->Shapes;
            shapes->Append(ContainerShape_021());
            result->StartAnimation("TransformMatrix._11", ScalarAnimation_1_to_0_11());
            auto controller = result->TryGetAnimationController("TransformMatrix._11");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "my.TransformMatrix._11";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TransformMatrix._22", _reusableExpressionAnimation);
            return result;
        }

        // Layer (Shape): Shape Layer 5
        CompositionContainerShape^ ContainerShape_021()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 1, 0, 0, 1, 73.875F, 69.25F };
            auto shapes = result->Shapes;
            shapes->Append(SpriteShape_10());
            return result;
        }

        // Layer (Shape): Shape Layer 4
        CompositionContainerShape^ ContainerShape_022()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 0, 0, 0, 0, 0, 0 };
            auto shapes = result->Shapes;
            shapes->Append(ContainerShape_023());
            result->StartAnimation("TransformMatrix._11", ScalarAnimation_1_to_0_12());
            auto controller = result->TryGetAnimationController("TransformMatrix._11");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "my.TransformMatrix._11";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TransformMatrix._22", _reusableExpressionAnimation);
            return result;
        }

        // Layer (Shape): Shape Layer 4
        CompositionContainerShape^ ContainerShape_023()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 1, 0, 0, 1, 73.875F, 69.25F };
            auto shapes = result->Shapes;
            shapes->Append(SpriteShape_11());
            return result;
        }

        // Layer (Shape): Shape Layer 12
        CompositionContainerShape^ ContainerShape_024()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 0, 0, 0, 0, 0, 0 };
            auto shapes = result->Shapes;
            shapes->Append(ContainerShape_025());
            result->StartAnimation("TransformMatrix._11", ScalarAnimation_1_to_0_13());
            auto controller = result->TryGetAnimationController("TransformMatrix._11");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "my.TransformMatrix._11";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TransformMatrix._22", _reusableExpressionAnimation);
            return result;
        }

        // Layer (Shape): Shape Layer 12
        CompositionContainerShape^ ContainerShape_025()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 1, 0, 0, 1, 73.875F, 69.25F };
            auto shapes = result->Shapes;
            shapes->Append(SpriteShape_12());
            return result;
        }

        // Layer (Shape): Shape Layer 11
        CompositionContainerShape^ ContainerShape_026()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 0, 0, 0, 0, 0, 0 };
            auto shapes = result->Shapes;
            shapes->Append(ContainerShape_027());
            result->StartAnimation("TransformMatrix._11", ScalarAnimation_1_to_0_14());
            auto controller = result->TryGetAnimationController("TransformMatrix._11");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "my.TransformMatrix._11";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TransformMatrix._22", _reusableExpressionAnimation);
            return result;
        }

        // Layer (Shape): Shape Layer 11
        CompositionContainerShape^ ContainerShape_027()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 1, 0, 0, 1, 73.875F, 69.25F };
            auto shapes = result->Shapes;
            shapes->Append(SpriteShape_13());
            return result;
        }

        // Layer (Shape): Shape Layer 10
        CompositionContainerShape^ ContainerShape_028()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 0, 0, 0, 0, 0, 0 };
            auto shapes = result->Shapes;
            shapes->Append(ContainerShape_029());
            result->StartAnimation("TransformMatrix._11", ScalarAnimation_1_to_0_15());
            auto controller = result->TryGetAnimationController("TransformMatrix._11");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "my.TransformMatrix._11";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TransformMatrix._22", _reusableExpressionAnimation);
            return result;
        }

        // Layer (Shape): Shape Layer 10
        CompositionContainerShape^ ContainerShape_029()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 1, 0, 0, 1, 73.875F, 69.25F };
            auto shapes = result->Shapes;
            shapes->Append(SpriteShape_14());
            return result;
        }

        // Layer (Shape): Shape Layer 3
        CompositionContainerShape^ ContainerShape_030()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 0, 0, 0, 0, 0, 0 };
            auto shapes = result->Shapes;
            shapes->Append(ContainerShape_031());
            result->StartAnimation("TransformMatrix._11", ScalarAnimation_1_to_0_16());
            auto controller = result->TryGetAnimationController("TransformMatrix._11");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "my.TransformMatrix._11";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TransformMatrix._22", _reusableExpressionAnimation);
            return result;
        }

        // Layer (Shape): Shape Layer 3
        CompositionContainerShape^ ContainerShape_031()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 1, 0, 0, 1, 73.875F, 69.25F };
            auto shapes = result->Shapes;
            shapes->Append(SpriteShape_15());
            shapes->Append(SpriteShape_16());
            return result;
        }

        // Layer (Shape): Shape Layer 2
        CompositionContainerShape^ ContainerShape_032()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 0, 0, 0, 0, 0, 0 };
            auto shapes = result->Shapes;
            shapes->Append(ContainerShape_033());
            result->StartAnimation("TransformMatrix._11", ScalarAnimation_1_to_0_17());
            auto controller = result->TryGetAnimationController("TransformMatrix._11");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "my.TransformMatrix._11";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TransformMatrix._22", _reusableExpressionAnimation);
            return result;
        }

        // Layer (Shape): Shape Layer 2
        CompositionContainerShape^ ContainerShape_033()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 1, 0, 0, 1, 73.875F, 69.25F };
            auto shapes = result->Shapes;
            shapes->Append(SpriteShape_17());
            return result;
        }

        // Layer (Shape): Shape Layer 1
        CompositionContainerShape^ ContainerShape_034()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 0, 0, 0, 0, 0, 0 };
            auto shapes = result->Shapes;
            shapes->Append(ContainerShape_035());
            result->StartAnimation("TransformMatrix._11", ScalarAnimation_1_to_0_18());
            auto controller = result->TryGetAnimationController("TransformMatrix._11");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "my.TransformMatrix._11";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TransformMatrix._22", _reusableExpressionAnimation);
            return result;
        }

        // Layer (Shape): Shape Layer 1
        CompositionContainerShape^ ContainerShape_035()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 1, 0, 0, 1, 73.875F, 69.25F };
            auto shapes = result->Shapes;
            shapes->Append(SpriteShape_18());
            return result;
        }

        // Layer (Shape): Shape Layer 9
        CompositionContainerShape^ ContainerShape_036()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 0, 0, 0, 0, 0, 0 };
            auto shapes = result->Shapes;
            shapes->Append(ContainerShape_037());
            result->StartAnimation("TransformMatrix._11", ScalarAnimation_1_to_0_20());
            auto controller = result->TryGetAnimationController("TransformMatrix._11");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "my.TransformMatrix._11";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TransformMatrix._22", _reusableExpressionAnimation);
            return result;
        }

        // Layer (Shape): Shape Layer 9
        CompositionContainerShape^ ContainerShape_037()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 1, 0, 0, 1, 47.875F, 48 };
            auto shapes = result->Shapes;
            shapes->Append(SpriteShape_19());
            return result;
        }

        // Layer (Shape): Shape Layer 8
        CompositionContainerShape^ ContainerShape_038()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 0, 0, 0, 0, 0, 0 };
            auto shapes = result->Shapes;
            shapes->Append(ContainerShape_039());
            result->StartAnimation("TransformMatrix._11", ScalarAnimation_1_to_0_21());
            auto controller = result->TryGetAnimationController("TransformMatrix._11");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "my.TransformMatrix._11";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TransformMatrix._22", _reusableExpressionAnimation);
            return result;
        }

        // Layer (Shape): Shape Layer 8
        CompositionContainerShape^ ContainerShape_039()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 1, 0, 0, 1, 47.875F, 48 };
            auto shapes = result->Shapes;
            shapes->Append(SpriteShape_20());
            return result;
        }

        // Layer (Shape): Shape Layer 7
        CompositionContainerShape^ ContainerShape_040()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 0, 0, 0, 0, 0, 0 };
            auto shapes = result->Shapes;
            shapes->Append(ContainerShape_041());
            result->StartAnimation("TransformMatrix._11", ScalarAnimation_1_to_0_22());
            auto controller = result->TryGetAnimationController("TransformMatrix._11");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "my.TransformMatrix._11";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TransformMatrix._22", _reusableExpressionAnimation);
            return result;
        }

        // Layer (Shape): Shape Layer 7
        CompositionContainerShape^ ContainerShape_041()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 1, 0, 0, 1, 47.875F, 48 };
            auto shapes = result->Shapes;
            shapes->Append(SpriteShape_21());
            return result;
        }

        // Layer (Shape): Shape Layer 6
        CompositionContainerShape^ ContainerShape_042()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 0, 0, 0, 0, 0, 0 };
            auto shapes = result->Shapes;
            shapes->Append(ContainerShape_043());
            result->StartAnimation("TransformMatrix._11", ScalarAnimation_1_to_0_23());
            auto controller = result->TryGetAnimationController("TransformMatrix._11");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "my.TransformMatrix._11";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TransformMatrix._22", _reusableExpressionAnimation);
            return result;
        }

        // Layer (Shape): Shape Layer 6
        CompositionContainerShape^ ContainerShape_043()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 1, 0, 0, 1, 47.875F, 48 };
            auto shapes = result->Shapes;
            shapes->Append(SpriteShape_22());
            return result;
        }

        // Layer (Shape): Shape Layer 5
        CompositionContainerShape^ ContainerShape_044()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 0, 0, 0, 0, 0, 0 };
            auto shapes = result->Shapes;
            shapes->Append(ContainerShape_045());
            result->StartAnimation("TransformMatrix._11", ScalarAnimation_1_to_0_24());
            auto controller = result->TryGetAnimationController("TransformMatrix._11");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "my.TransformMatrix._11";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TransformMatrix._22", _reusableExpressionAnimation);
            return result;
        }

        // Layer (Shape): Shape Layer 5
        CompositionContainerShape^ ContainerShape_045()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 1, 0, 0, 1, 47.875F, 48 };
            auto shapes = result->Shapes;
            shapes->Append(SpriteShape_23());
            return result;
        }

        // Layer (Shape): Shape Layer 4
        CompositionContainerShape^ ContainerShape_046()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 0, 0, 0, 0, 0, 0 };
            auto shapes = result->Shapes;
            shapes->Append(ContainerShape_047());
            result->StartAnimation("TransformMatrix._11", ScalarAnimation_1_to_0_25());
            auto controller = result->TryGetAnimationController("TransformMatrix._11");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "my.TransformMatrix._11";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TransformMatrix._22", _reusableExpressionAnimation);
            return result;
        }

        // Layer (Shape): Shape Layer 4
        CompositionContainerShape^ ContainerShape_047()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 1, 0, 0, 1, 47.875F, 48 };
            auto shapes = result->Shapes;
            shapes->Append(SpriteShape_24());
            return result;
        }

        // Layer (Shape): Shape Layer 12
        CompositionContainerShape^ ContainerShape_048()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 0, 0, 0, 0, 0, 0 };
            auto shapes = result->Shapes;
            shapes->Append(ContainerShape_049());
            result->StartAnimation("TransformMatrix._11", ScalarAnimation_1_to_0_26());
            auto controller = result->TryGetAnimationController("TransformMatrix._11");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "my.TransformMatrix._11";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TransformMatrix._22", _reusableExpressionAnimation);
            return result;
        }

        // Layer (Shape): Shape Layer 12
        CompositionContainerShape^ ContainerShape_049()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 1, 0, 0, 1, 47.875F, 48 };
            auto shapes = result->Shapes;
            shapes->Append(SpriteShape_25());
            return result;
        }

        // Layer (Shape): Shape Layer 11
        CompositionContainerShape^ ContainerShape_050()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 0, 0, 0, 0, 0, 0 };
            auto shapes = result->Shapes;
            shapes->Append(ContainerShape_051());
            result->StartAnimation("TransformMatrix._11", ScalarAnimation_1_to_0_27());
            auto controller = result->TryGetAnimationController("TransformMatrix._11");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "my.TransformMatrix._11";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TransformMatrix._22", _reusableExpressionAnimation);
            return result;
        }

        // Layer (Shape): Shape Layer 11
        CompositionContainerShape^ ContainerShape_051()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 1, 0, 0, 1, 47.875F, 48 };
            auto shapes = result->Shapes;
            shapes->Append(SpriteShape_26());
            return result;
        }

        // Layer (Shape): Shape Layer 10
        CompositionContainerShape^ ContainerShape_052()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 0, 0, 0, 0, 0, 0 };
            auto shapes = result->Shapes;
            shapes->Append(ContainerShape_053());
            result->StartAnimation("TransformMatrix._11", ScalarAnimation_1_to_0_28());
            auto controller = result->TryGetAnimationController("TransformMatrix._11");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "my.TransformMatrix._11";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TransformMatrix._22", _reusableExpressionAnimation);
            return result;
        }

        // Layer (Shape): Shape Layer 10
        CompositionContainerShape^ ContainerShape_053()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 1, 0, 0, 1, 47.875F, 48 };
            auto shapes = result->Shapes;
            shapes->Append(SpriteShape_27());
            return result;
        }

        // Layer (Shape): Shape Layer 3
        CompositionContainerShape^ ContainerShape_054()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 0, 0, 0, 0, 0, 0 };
            auto shapes = result->Shapes;
            shapes->Append(ContainerShape_055());
            result->StartAnimation("TransformMatrix._11", ScalarAnimation_1_to_0_29());
            auto controller = result->TryGetAnimationController("TransformMatrix._11");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "my.TransformMatrix._11";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TransformMatrix._22", _reusableExpressionAnimation);
            return result;
        }

        // Layer (Shape): Shape Layer 3
        CompositionContainerShape^ ContainerShape_055()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 1, 0, 0, 1, 47.875F, 48 };
            auto shapes = result->Shapes;
            shapes->Append(SpriteShape_28());
            shapes->Append(SpriteShape_29());
            return result;
        }

        // Layer (Shape): Shape Layer 2
        CompositionContainerShape^ ContainerShape_056()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 0, 0, 0, 0, 0, 0 };
            auto shapes = result->Shapes;
            shapes->Append(ContainerShape_057());
            result->StartAnimation("TransformMatrix._11", ScalarAnimation_1_to_0_30());
            auto controller = result->TryGetAnimationController("TransformMatrix._11");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "my.TransformMatrix._11";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TransformMatrix._22", _reusableExpressionAnimation);
            return result;
        }

        // Layer (Shape): Shape Layer 2
        CompositionContainerShape^ ContainerShape_057()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 1, 0, 0, 1, 47.875F, 48 };
            auto shapes = result->Shapes;
            shapes->Append(SpriteShape_30());
            return result;
        }

        // Layer (Shape): Shape Layer 1
        CompositionContainerShape^ ContainerShape_058()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 0, 0, 0, 0, 0, 0 };
            auto shapes = result->Shapes;
            shapes->Append(ContainerShape_059());
            result->StartAnimation("TransformMatrix._11", ScalarAnimation_1_to_0_31());
            auto controller = result->TryGetAnimationController("TransformMatrix._11");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "my.TransformMatrix._11";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TransformMatrix._22", _reusableExpressionAnimation);
            return result;
        }

        // Layer (Shape): Shape Layer 1
        CompositionContainerShape^ ContainerShape_059()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 1, 0, 0, 1, 47.875F, 48 };
            auto shapes = result->Shapes;
            shapes->Append(SpriteShape_31());
            return result;
        }

        // Layer (Shape): Shape Layer 9
        CompositionContainerShape^ ContainerShape_060()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 0, 0, 0, 0, 0, 0 };
            auto shapes = result->Shapes;
            shapes->Append(ContainerShape_061());
            result->StartAnimation("TransformMatrix._11", ScalarAnimation_1_to_0_33());
            auto controller = result->TryGetAnimationController("TransformMatrix._11");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "my.TransformMatrix._11";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TransformMatrix._22", _reusableExpressionAnimation);
            return result;
        }

        // Layer (Shape): Shape Layer 9
        CompositionContainerShape^ ContainerShape_061()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 1, 0, 0, 1, 47.875F, 48 };
            auto shapes = result->Shapes;
            shapes->Append(SpriteShape_32());
            return result;
        }

        // Layer (Shape): Shape Layer 8
        CompositionContainerShape^ ContainerShape_062()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 0, 0, 0, 0, 0, 0 };
            auto shapes = result->Shapes;
            shapes->Append(ContainerShape_063());
            result->StartAnimation("TransformMatrix._11", ScalarAnimation_1_to_0_34());
            auto controller = result->TryGetAnimationController("TransformMatrix._11");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "my.TransformMatrix._11";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TransformMatrix._22", _reusableExpressionAnimation);
            return result;
        }

        // Layer (Shape): Shape Layer 8
        CompositionContainerShape^ ContainerShape_063()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 1, 0, 0, 1, 47.875F, 48 };
            auto shapes = result->Shapes;
            shapes->Append(SpriteShape_33());
            return result;
        }

        // Layer (Shape): Shape Layer 7
        CompositionContainerShape^ ContainerShape_064()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 0, 0, 0, 0, 0, 0 };
            auto shapes = result->Shapes;
            shapes->Append(ContainerShape_065());
            result->StartAnimation("TransformMatrix._11", ScalarAnimation_1_to_0_35());
            auto controller = result->TryGetAnimationController("TransformMatrix._11");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "my.TransformMatrix._11";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TransformMatrix._22", _reusableExpressionAnimation);
            return result;
        }

        // Layer (Shape): Shape Layer 7
        CompositionContainerShape^ ContainerShape_065()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 1, 0, 0, 1, 47.875F, 48 };
            auto shapes = result->Shapes;
            shapes->Append(SpriteShape_34());
            return result;
        }

        // Layer (Shape): Shape Layer 6
        CompositionContainerShape^ ContainerShape_066()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 0, 0, 0, 0, 0, 0 };
            auto shapes = result->Shapes;
            shapes->Append(ContainerShape_067());
            result->StartAnimation("TransformMatrix._11", ScalarAnimation_1_to_0_36());
            auto controller = result->TryGetAnimationController("TransformMatrix._11");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "my.TransformMatrix._11";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TransformMatrix._22", _reusableExpressionAnimation);
            return result;
        }

        // Layer (Shape): Shape Layer 6
        CompositionContainerShape^ ContainerShape_067()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 1, 0, 0, 1, 47.875F, 48 };
            auto shapes = result->Shapes;
            shapes->Append(SpriteShape_35());
            return result;
        }

        // Layer (Shape): Shape Layer 5
        CompositionContainerShape^ ContainerShape_068()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 0, 0, 0, 0, 0, 0 };
            auto shapes = result->Shapes;
            shapes->Append(ContainerShape_069());
            result->StartAnimation("TransformMatrix._11", ScalarAnimation_1_to_0_37());
            auto controller = result->TryGetAnimationController("TransformMatrix._11");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "my.TransformMatrix._11";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TransformMatrix._22", _reusableExpressionAnimation);
            return result;
        }

        // Layer (Shape): Shape Layer 5
        CompositionContainerShape^ ContainerShape_069()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 1, 0, 0, 1, 47.875F, 48 };
            auto shapes = result->Shapes;
            shapes->Append(SpriteShape_36());
            return result;
        }

        // Layer (Shape): Shape Layer 4
        CompositionContainerShape^ ContainerShape_070()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 0, 0, 0, 0, 0, 0 };
            auto shapes = result->Shapes;
            shapes->Append(ContainerShape_071());
            result->StartAnimation("TransformMatrix._11", ScalarAnimation_1_to_0_38());
            auto controller = result->TryGetAnimationController("TransformMatrix._11");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "my.TransformMatrix._11";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TransformMatrix._22", _reusableExpressionAnimation);
            return result;
        }

        // Layer (Shape): Shape Layer 4
        CompositionContainerShape^ ContainerShape_071()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 1, 0, 0, 1, 47.875F, 48 };
            auto shapes = result->Shapes;
            shapes->Append(SpriteShape_37());
            return result;
        }

        // Layer (Shape): Shape Layer 12
        CompositionContainerShape^ ContainerShape_072()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 0, 0, 0, 0, 0, 0 };
            auto shapes = result->Shapes;
            shapes->Append(ContainerShape_073());
            result->StartAnimation("TransformMatrix._11", ScalarAnimation_1_to_0_39());
            auto controller = result->TryGetAnimationController("TransformMatrix._11");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "my.TransformMatrix._11";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TransformMatrix._22", _reusableExpressionAnimation);
            return result;
        }

        // Layer (Shape): Shape Layer 12
        CompositionContainerShape^ ContainerShape_073()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 1, 0, 0, 1, 47.875F, 48 };
            auto shapes = result->Shapes;
            shapes->Append(SpriteShape_38());
            return result;
        }

        // Layer (Shape): Shape Layer 11
        CompositionContainerShape^ ContainerShape_074()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 0, 0, 0, 0, 0, 0 };
            auto shapes = result->Shapes;
            shapes->Append(ContainerShape_075());
            result->StartAnimation("TransformMatrix._11", ScalarAnimation_1_to_0_40());
            auto controller = result->TryGetAnimationController("TransformMatrix._11");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "my.TransformMatrix._11";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TransformMatrix._22", _reusableExpressionAnimation);
            return result;
        }

        // Layer (Shape): Shape Layer 11
        CompositionContainerShape^ ContainerShape_075()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 1, 0, 0, 1, 47.875F, 48 };
            auto shapes = result->Shapes;
            shapes->Append(SpriteShape_39());
            return result;
        }

        // Layer (Shape): Shape Layer 10
        CompositionContainerShape^ ContainerShape_076()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 0, 0, 0, 0, 0, 0 };
            auto shapes = result->Shapes;
            shapes->Append(ContainerShape_077());
            result->StartAnimation("TransformMatrix._11", ScalarAnimation_1_to_0_41());
            auto controller = result->TryGetAnimationController("TransformMatrix._11");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "my.TransformMatrix._11";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TransformMatrix._22", _reusableExpressionAnimation);
            return result;
        }

        // Layer (Shape): Shape Layer 10
        CompositionContainerShape^ ContainerShape_077()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 1, 0, 0, 1, 47.875F, 48 };
            auto shapes = result->Shapes;
            shapes->Append(SpriteShape_40());
            return result;
        }

        // Layer (Shape): Shape Layer 3
        CompositionContainerShape^ ContainerShape_078()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 0, 0, 0, 0, 0, 0 };
            auto shapes = result->Shapes;
            shapes->Append(ContainerShape_079());
            result->StartAnimation("TransformMatrix._11", ScalarAnimation_1_to_0_42());
            auto controller = result->TryGetAnimationController("TransformMatrix._11");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "my.TransformMatrix._11";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TransformMatrix._22", _reusableExpressionAnimation);
            return result;
        }

        // Layer (Shape): Shape Layer 3
        CompositionContainerShape^ ContainerShape_079()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 1, 0, 0, 1, 47.875F, 48 };
            auto shapes = result->Shapes;
            shapes->Append(SpriteShape_41());
            shapes->Append(SpriteShape_42());
            return result;
        }

        // Layer (Shape): Shape Layer 2
        CompositionContainerShape^ ContainerShape_080()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 0, 0, 0, 0, 0, 0 };
            auto shapes = result->Shapes;
            shapes->Append(ContainerShape_081());
            result->StartAnimation("TransformMatrix._11", ScalarAnimation_1_to_0_43());
            auto controller = result->TryGetAnimationController("TransformMatrix._11");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "my.TransformMatrix._11";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TransformMatrix._22", _reusableExpressionAnimation);
            return result;
        }

        // Layer (Shape): Shape Layer 2
        CompositionContainerShape^ ContainerShape_081()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 1, 0, 0, 1, 47.875F, 48 };
            auto shapes = result->Shapes;
            shapes->Append(SpriteShape_43());
            return result;
        }

        // Layer (Shape): Shape Layer 1
        CompositionContainerShape^ ContainerShape_082()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 0, 0, 0, 0, 0, 0 };
            auto shapes = result->Shapes;
            shapes->Append(ContainerShape_083());
            result->StartAnimation("TransformMatrix._11", ScalarAnimation_1_to_0_44());
            auto controller = result->TryGetAnimationController("TransformMatrix._11");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "my.TransformMatrix._11";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TransformMatrix._22", _reusableExpressionAnimation);
            return result;
        }

        // Layer (Shape): Shape Layer 1
        CompositionContainerShape^ ContainerShape_083()
        {
            auto result = _c->CreateContainerShape();
            result->TransformMatrix = { 1, 0, 0, 1, 47.875F, 48 };
            auto shapes = result->Shapes;
            shapes->Append(SpriteShape_44());
            return result;
        }

        // Layer (Shape): Cake
        CompositionContainerShape^ ContainerShape_084()
        {
            auto result = _c->CreateContainerShape();
            result->Offset = { 48.5F, 91.25F };
            result->Scale = { 0.949999988F, 0.949999988F };
            auto shapes = result->Shapes;
            shapes->Append(SpriteShape_45());
            shapes->Append(SpriteShape_46());
            shapes->Append(SpriteShape_47());
            result->StartAnimation("Scale", Vector2Animation_0());
            auto controller = result->TryGetAnimationController("Scale");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Layer (Shape): Cake 2
        CompositionContainerShape^ ContainerShape_085()
        {
            auto result = _c->CreateContainerShape();
            result->Offset = { 48.5F, 91.25F };
            result->Scale = { 0.949999988F, 0.949999988F };
            auto shapes = result->Shapes;
            shapes->Append(SpriteShape_48());
            shapes->Append(SpriteShape_49());
            shapes->Append(SpriteShape_50());
            shapes->Append(SpriteShape_51());
            shapes->Append(SpriteShape_52());
            shapes->Append(SpriteShape_53());
            shapes->Append(SpriteShape_54());
            shapes->Append(SpriteShape_55());
            shapes->Append(SpriteShape_56());
            shapes->Append(SpriteShape_57());
            shapes->Append(SpriteShape_58());
            shapes->Append(SpriteShape_59());
            result->StartAnimation("Scale", _vector2Animation_0);
            auto controller = result->TryGetAnimationController("Scale");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Layer (Shape): Sprinkles 2
        CompositionContainerShape^ ContainerShape_086()
        {
            auto result = _c->CreateContainerShape();
            result->Offset = { 48.5F, 91.25F };
            result->Scale = { 0.949999988F, 0.949999988F };
            auto shapes = result->Shapes;
            shapes->Append(ContainerShape_087());
            result->StartAnimation("Scale", _vector2Animation_0);
            auto controller = result->TryGetAnimationController("Scale");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Transforms for Sprinkles 2
        CompositionContainerShape^ ContainerShape_087()
        {
            auto result = _c->CreateContainerShape();
            auto propertySet = result->Properties;
            propertySet->InsertVector2("Position", { 13.2340002F, -66.8209991F });
            auto shapes = result->Shapes;
            shapes->Append(SpriteShape_60());
            result->StartAnimation("Position", Vector2Animation_1());
            auto controller = result->TryGetAnimationController("Position");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "my.Position - Vector2(61.734,24.429)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("Offset", _reusableExpressionAnimation);
            return result;
        }

        // Layer (Shape): Sprinkles 3
        CompositionContainerShape^ ContainerShape_088()
        {
            auto result = _c->CreateContainerShape();
            result->Offset = { 48.5F, 91.25F };
            result->Scale = { 0.949999988F, 0.949999988F };
            auto shapes = result->Shapes;
            shapes->Append(ContainerShape_089());
            result->StartAnimation("Scale", _vector2Animation_0);
            auto controller = result->TryGetAnimationController("Scale");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Transforms for Sprinkles 3
        CompositionContainerShape^ ContainerShape_089()
        {
            auto result = _c->CreateContainerShape();
            auto propertySet = result->Properties;
            propertySet->InsertVector2("Position", { 28.9080009F, -56.9640007F });
            auto shapes = result->Shapes;
            shapes->Append(SpriteShape_61());
            result->StartAnimation("Position", Vector2Animation_2());
            auto controller = result->TryGetAnimationController("Position");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "my.Position - Vector2(77.408,34.286)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("Offset", _reusableExpressionAnimation);
            return result;
        }

        // Layer (Shape): Sprinkles 4
        CompositionContainerShape^ ContainerShape_090()
        {
            auto result = _c->CreateContainerShape();
            result->Offset = { 48.5F, 91.25F };
            result->Scale = { 0.949999988F, 0.949999988F };
            auto shapes = result->Shapes;
            shapes->Append(ContainerShape_091());
            result->StartAnimation("Scale", _vector2Animation_0);
            auto controller = result->TryGetAnimationController("Scale");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Transforms for Sprinkles 4
        CompositionContainerShape^ ContainerShape_091()
        {
            auto result = _c->CreateContainerShape();
            auto propertySet = result->Properties;
            propertySet->InsertVector2("Position", { 16.1739998F, -42.2700005F });
            auto shapes = result->Shapes;
            shapes->Append(SpriteShape_62());
            result->StartAnimation("Position", Vector2Animation_3());
            auto controller = result->TryGetAnimationController("Position");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "my.Position - Vector2(64.674,48.98)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("Offset", _reusableExpressionAnimation);
            return result;
        }

        // Layer (Shape): Sprinkles 5
        CompositionContainerShape^ ContainerShape_092()
        {
            auto result = _c->CreateContainerShape();
            result->Offset = { 48.5F, 91.25F };
            result->Scale = { 0.949999988F, 0.949999988F };
            auto shapes = result->Shapes;
            shapes->Append(ContainerShape_093());
            result->StartAnimation("Scale", _vector2Animation_0);
            auto controller = result->TryGetAnimationController("Scale");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Transforms for Sprinkles 5
        CompositionContainerShape^ ContainerShape_093()
        {
            auto result = _c->CreateContainerShape();
            auto propertySet = result->Properties;
            propertySet->InsertVector2("Position", { -0.477999985F, -36.3909988F });
            auto shapes = result->Shapes;
            shapes->Append(SpriteShape_63());
            result->StartAnimation("Position", Vector2Animation_4());
            auto controller = result->TryGetAnimationController("Position");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "my.Position - Vector2(48.022,54.859)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("Offset", _reusableExpressionAnimation);
            return result;
        }

        // Layer (Shape): Sprinkles 6
        CompositionContainerShape^ ContainerShape_094()
        {
            auto result = _c->CreateContainerShape();
            result->Offset = { 48.5F, 91.25F };
            result->Scale = { 0.949999988F, 0.949999988F };
            auto shapes = result->Shapes;
            shapes->Append(ContainerShape_095());
            result->StartAnimation("Scale", _vector2Animation_0);
            auto controller = result->TryGetAnimationController("Scale");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Transforms for Sprinkles 6
        CompositionContainerShape^ ContainerShape_095()
        {
            auto result = _c->CreateContainerShape();
            auto propertySet = result->Properties;
            propertySet->InsertVector2("Position", { -20.5620003F, -42.7589989F });
            auto shapes = result->Shapes;
            shapes->Append(SpriteShape_64());
            result->StartAnimation("Position", Vector2Animation_5());
            auto controller = result->TryGetAnimationController("Position");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "my.Position - Vector2(27.938,48.491)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("Offset", _reusableExpressionAnimation);
            return result;
        }

        // Layer (Shape): Sprinkles 7
        CompositionContainerShape^ ContainerShape_096()
        {
            auto result = _c->CreateContainerShape();
            result->Offset = { 48.5F, 91.25F };
            result->Scale = { 0.949999988F, 0.949999988F };
            auto shapes = result->Shapes;
            shapes->Append(ContainerShape_097());
            result->StartAnimation("Scale", _vector2Animation_0);
            auto controller = result->TryGetAnimationController("Scale");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Transforms for Sprinkles 7
        CompositionContainerShape^ ContainerShape_097()
        {
            auto result = _c->CreateContainerShape();
            auto propertySet = result->Properties;
            propertySet->InsertVector2("Position", { -34.276001F, -56.473999F });
            auto shapes = result->Shapes;
            shapes->Append(SpriteShape_65());
            result->StartAnimation("Position", Vector2Animation_6());
            auto controller = result->TryGetAnimationController("Position");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "my.Position - Vector2(14.224,34.776)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("Offset", _reusableExpressionAnimation);
            return result;
        }

        // Layer (Shape): Sprinkles 8
        CompositionContainerShape^ ContainerShape_098()
        {
            auto result = _c->CreateContainerShape();
            result->Offset = { 48.5F, 91.25F };
            result->Scale = { 0.949999988F, 0.949999988F };
            auto shapes = result->Shapes;
            shapes->Append(ContainerShape_099());
            result->StartAnimation("Scale", _vector2Animation_0);
            auto controller = result->TryGetAnimationController("Scale");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Transforms for Sprinkles 8
        CompositionContainerShape^ ContainerShape_099()
        {
            auto result = _c->CreateContainerShape();
            auto propertySet = result->Properties;
            propertySet->InsertVector2("Position", { -13.7040005F, -67.25F });
            auto shapes = result->Shapes;
            shapes->Append(SpriteShape_66());
            result->StartAnimation("Position", Vector2Animation_7());
            auto controller = result->TryGetAnimationController("Position");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "my.Position - Vector2(34.796,24)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("Offset", _reusableExpressionAnimation);
            return result;
        }

        // Layer (Shape): Candle
        CompositionContainerShape^ ContainerShape_100()
        {
            auto result = _c->CreateContainerShape();
            result->Offset = { 48.5F, 91.25F };
            result->Scale = { 0.949999988F, 0.949999988F };
            auto shapes = result->Shapes;
            shapes->Append(SpriteShape_67());
            shapes->Append(SpriteShape_68());
            shapes->Append(SpriteShape_69());
            result->StartAnimation("Scale", _vector2Animation_0);
            auto controller = result->TryGetAnimationController("Scale");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Layer (Shape): Flame
        CompositionContainerShape^ ContainerShape_101()
        {
            auto result = _c->CreateContainerShape();
            result->Offset = { 48.5F, 91.25F };
            result->Scale = { 0.949999988F, 0.949999988F };
            auto shapes = result->Shapes;
            shapes->Append(SpriteShape_70());
            shapes->Append(SpriteShape_71());
            result->StartAnimation("Scale", _vector2Animation_0);
            auto controller = result->TryGetAnimationController("Scale");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Layer (PreComp): 01_BirthdayCake_96x96
        ContainerVisual^ ContainerVisual_01()
        {
            auto result = _c->CreateContainerVisual();
            result->Clip = InsetClip();
            result->Size = { 300, 300 };
            auto children = result->Children;
            children->InsertAtTop(ContainerVisual_02());
            return result;
        }

        // Layer (PreComp): 01_BirthdayCake_96x96
        // Transforms for 01_BirthdayCake_96x96
        ContainerVisual^ ContainerVisual_02()
        {
            auto result = _c->CreateContainerVisual();
            result->TransformMatrix = { 2.79999995F, 0, 0, 0, 0, 2.79999995F, 0, 0, 0, 0, 1, 0, 15.6000061F, 7.1000061F, 0, 1 };
            auto children = result->Children;
            children->InsertAtTop(ContainerVisual_03());
            children->InsertAtTop(ContainerVisual_07());
            children->InsertAtTop(ContainerVisual_11());
            children->InsertAtTop(ContainerVisual_15());
            children->InsertAtTop(ShapeVisual_4());
            return result;
        }

        // Layer (PreComp): 01_BirthdayCake_96x96
        //   Transforms for 01_BirthdayCake_96x96
        // Layer (PreComp): Birthdaycake_v2_Fireworks_4
        ContainerVisual^ ContainerVisual_03()
        {
            auto result = _c->CreateContainerVisual();
            result->Clip = _insetClip;
            result->Size = { 96, 96 };
            auto children = result->Children;
            children->InsertAtTop(ContainerVisual_04());
            return result;
        }

        // Layer (PreComp): 01_BirthdayCake_96x96
        //   Transforms for 01_BirthdayCake_96x96
        //     Layer (PreComp): Birthdaycake_v2_Fireworks_4
        ContainerVisual^ ContainerVisual_04()
        {
            auto result = _c->CreateContainerVisual();
            result->Opacity = 0;
            auto children = result->Children;
            children->InsertAtTop(ContainerVisual_05());
            result->StartAnimation("Opacity", ScalarAnimation_1_to_0_06());
            auto controller = result->TryGetAnimationController("Opacity");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Transforms for Null 130
        ContainerVisual^ ContainerVisual_05()
        {
            auto result = _c->CreateContainerVisual();
            result->TransformMatrix = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 48, 48, 0, 1 };
            auto children = result->Children;
            children->InsertAtTop(ContainerVisual_06());
            return result;
        }

        // Transforms for Null 130
        // Transforms for Birthdaycake_v2_Fireworks_4
        ContainerVisual^ ContainerVisual_06()
        {
            auto result = _c->CreateContainerVisual();
            result->TransformMatrix = { 1.20000005F, 0, 0, 0, 0, 1.20000005F, 0, 0, 0, 0, 1, 0, -45.8500023F, -65.8500061F, 0, 1 };
            auto children = result->Children;
            children->InsertAtTop(ShapeVisual_0());
            return result;
        }

        // Layer (PreComp): 01_BirthdayCake_96x96
        //   Transforms for 01_BirthdayCake_96x96
        // Layer (PreComp): Birthdaycake_v2_Fireworks_3
        ContainerVisual^ ContainerVisual_07()
        {
            auto result = _c->CreateContainerVisual();
            result->Clip = _insetClip;
            result->Size = { 96, 96 };
            auto children = result->Children;
            children->InsertAtTop(ContainerVisual_08());
            return result;
        }

        // Layer (PreComp): 01_BirthdayCake_96x96
        //   Transforms for 01_BirthdayCake_96x96
        //     Layer (PreComp): Birthdaycake_v2_Fireworks_3
        ContainerVisual^ ContainerVisual_08()
        {
            auto result = _c->CreateContainerVisual();
            result->Opacity = 0;
            auto children = result->Children;
            children->InsertAtTop(ContainerVisual_09());
            result->StartAnimation("Opacity", ScalarAnimation_1_to_0_19());
            auto controller = result->TryGetAnimationController("Opacity");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Transforms for Null 130
        ContainerVisual^ ContainerVisual_09()
        {
            auto result = _c->CreateContainerVisual();
            result->TransformMatrix = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 48, 48, 0, 1 };
            auto children = result->Children;
            children->InsertAtTop(ContainerVisual_10());
            return result;
        }

        // Transforms for Null 130
        // Transforms for Birthdaycake_v2_Fireworks_3
        ContainerVisual^ ContainerVisual_10()
        {
            auto result = _c->CreateContainerVisual();
            result->TransformMatrix = { 1.03717244F, -0.623196065F, 0, 0, 0.623196065F, 1.03717244F, 0, 0, 0, 0, 1, 0, -100.447693F, -35.6208649F, 0, 1 };
            auto children = result->Children;
            children->InsertAtTop(ShapeVisual_1());
            return result;
        }

        // Layer (PreComp): 01_BirthdayCake_96x96
        //   Transforms for 01_BirthdayCake_96x96
        // Layer (PreComp): Birthdaycake_v2_Fireworks_2
        ContainerVisual^ ContainerVisual_11()
        {
            auto result = _c->CreateContainerVisual();
            result->Clip = _insetClip;
            result->Size = { 96, 96 };
            auto children = result->Children;
            children->InsertAtTop(ContainerVisual_12());
            return result;
        }

        // Layer (PreComp): 01_BirthdayCake_96x96
        //   Transforms for 01_BirthdayCake_96x96
        //     Layer (PreComp): Birthdaycake_v2_Fireworks_2
        ContainerVisual^ ContainerVisual_12()
        {
            auto result = _c->CreateContainerVisual();
            result->Opacity = 0;
            auto children = result->Children;
            children->InsertAtTop(ContainerVisual_13());
            result->StartAnimation("Opacity", ScalarAnimation_1_to_0_32());
            auto controller = result->TryGetAnimationController("Opacity");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Transforms for Null 130
        ContainerVisual^ ContainerVisual_13()
        {
            auto result = _c->CreateContainerVisual();
            result->TransformMatrix = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 48, 48, 0, 1 };
            auto children = result->Children;
            children->InsertAtTop(ContainerVisual_14());
            return result;
        }

        // Transforms for Null 130
        // Transforms for Birthdaycake_v2_Fireworks_2
        ContainerVisual^ ContainerVisual_14()
        {
            auto result = _c->CreateContainerVisual();
            result->Clip = GeometricClip();
            result->TransformMatrix = { -1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 56.25F, -37.25F, 0, 1 };
            auto children = result->Children;
            children->InsertAtTop(ShapeVisual_2());
            return result;
        }

        // Layer (PreComp): 01_BirthdayCake_96x96
        //   Transforms for 01_BirthdayCake_96x96
        // Layer (PreComp): Birthdaycake_v2_Fireworks_1
        ContainerVisual^ ContainerVisual_15()
        {
            auto result = _c->CreateContainerVisual();
            result->Clip = _insetClip;
            result->Size = { 96, 96 };
            auto children = result->Children;
            children->InsertAtTop(ContainerVisual_16());
            return result;
        }

        // Layer (PreComp): 01_BirthdayCake_96x96
        //   Transforms for 01_BirthdayCake_96x96
        //     Layer (PreComp): Birthdaycake_v2_Fireworks_1
        ContainerVisual^ ContainerVisual_16()
        {
            auto result = _c->CreateContainerVisual();
            result->Opacity = 0;
            auto children = result->Children;
            children->InsertAtTop(ContainerVisual_17());
            result->StartAnimation("Opacity", ScalarAnimation_1_to_0_45());
            auto controller = result->TryGetAnimationController("Opacity");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Transforms for Null 130
        ContainerVisual^ ContainerVisual_17()
        {
            auto result = _c->CreateContainerVisual();
            result->TransformMatrix = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 48, 48, 0, 1 };
            auto children = result->Children;
            children->InsertAtTop(ContainerVisual_18());
            return result;
        }

        // Transforms for Null 130
        // Transforms for Birthdaycake_v2_Fireworks_1
        ContainerVisual^ ContainerVisual_18()
        {
            auto result = _c->CreateContainerVisual();
            result->TransformMatrix = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, -48, -48, 0, 1 };
            auto children = result->Children;
            children->InsertAtTop(ShapeVisual_3());
            return result;
        }

        CubicBezierEasingFunction^ CubicBezierEasingFunction_00()
        {
            return _cubicBezierEasingFunction_00 = _c->CreateCubicBezierEasingFunction({ 0.166999996F, 0.166999996F }, { 0.833000004F, 0.833000004F });
        }

        CubicBezierEasingFunction^ CubicBezierEasingFunction_01()
        {
            return _cubicBezierEasingFunction_01 = _c->CreateCubicBezierEasingFunction({ 0.550000012F, 0 }, { 0, 1 });
        }

        CubicBezierEasingFunction^ CubicBezierEasingFunction_02()
        {
            return _cubicBezierEasingFunction_02 = _c->CreateCubicBezierEasingFunction({ 0.166999996F, 0.0329999998F }, { 0, 1 });
        }

        CubicBezierEasingFunction^ CubicBezierEasingFunction_03()
        {
            return _cubicBezierEasingFunction_03 = _c->CreateCubicBezierEasingFunction({ 0.166999996F, 0.0329999998F }, { 0.649999976F, 1 });
        }

        CubicBezierEasingFunction^ CubicBezierEasingFunction_04()
        {
            return _cubicBezierEasingFunction_04 = _c->CreateCubicBezierEasingFunction({ 0.166999996F, 0 }, { 0.649999976F, 1 });
        }

        CubicBezierEasingFunction^ CubicBezierEasingFunction_05()
        {
            return _cubicBezierEasingFunction_05 = _c->CreateCubicBezierEasingFunction({ 0.349999994F, 0 }, { 0, 1 });
        }

        // Scale
        CubicBezierEasingFunction^ CubicBezierEasingFunction_06()
        {
            return _c->CreateCubicBezierEasingFunction({ 1, 0 }, { 0.75F, 1 });
        }

        CubicBezierEasingFunction^ CubicBezierEasingFunction_07()
        {
            return _cubicBezierEasingFunction_07 = _c->CreateCubicBezierEasingFunction({ 0.349999994F, 0 }, { 0.349999994F, 1 });
        }

        // Layer (Shape): Cake 2
        //   Path 1
        //     Path 1.PathGeometry
        //       Path
        CubicBezierEasingFunction^ CubicBezierEasingFunction_08()
        {
            return _c->CreateCubicBezierEasingFunction({ 0.166999996F, 0.166999996F }, { 0.833000004F, 1 });
        }

        CubicBezierEasingFunction^ CubicBezierEasingFunction_09()
        {
            return _cubicBezierEasingFunction_09 = _c->CreateCubicBezierEasingFunction({ 0.349999994F, 0 }, { 0.75F, 1 });
        }

        CubicBezierEasingFunction^ CubicBezierEasingFunction_10()
        {
            return _cubicBezierEasingFunction_10 = _c->CreateCubicBezierEasingFunction({ 0.850000024F, 0 }, { 0.75F, 1 });
        }

        // Transforms for Null 130
        //   Transforms for Birthdaycake_v2_Fireworks_2
        // Mask 1
        CompositionGeometricClip^ GeometricClip()
        {
            auto result = _c->CreateGeometricClip();
            result->Geometry = PathGeometry_19();
            return result;
        }

        CanvasGeometry Geometry_00()
        {
            CanvasGeometry result;
            ComPtr<ID2D1PathGeometry> path;
            FFHR(_d2dFactory->CreatePathGeometry(&path));
            ComPtr<ID2D1GeometrySink> sink;
            FFHR(path->Open(&sink));
            sink->BeginFigure({ -18.5F, -24.75F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ -9.625F, -28.5F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            FFHR(sink->Close());
            GeoSource* rawResult = new GeoSource(path.Get());
            result = rawResult;
            rawResult->Release();
            return result;
        }

        CanvasGeometry Geometry_01()
        {
            CanvasGeometry result;
            ComPtr<ID2D1PathGeometry> path;
            FFHR(_d2dFactory->CreatePathGeometry(&path));
            ComPtr<ID2D1GeometrySink> sink;
            FFHR(path->Open(&sink));
            sink->BeginFigure({ -21.375F, -25.75F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ -12.625F, -39.375F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            FFHR(sink->Close());
            GeoSource* rawResult = new GeoSource(path.Get());
            result = rawResult;
            rawResult->Release();
            return result;
        }

        CanvasGeometry Geometry_02()
        {
            CanvasGeometry result;
            ComPtr<ID2D1PathGeometry> path;
            FFHR(_d2dFactory->CreatePathGeometry(&path));
            ComPtr<ID2D1GeometrySink> sink;
            FFHR(path->Open(&sink));
            sink->BeginFigure({ -38.125F, -19.625F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ -43.75F, -18.875F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            FFHR(sink->Close());
            GeoSource* rawResult = new GeoSource(path.Get());
            result = rawResult;
            rawResult->Release();
            return result;
        }

        CanvasGeometry Geometry_03()
        {
            CanvasGeometry result;
            ComPtr<ID2D1PathGeometry> path;
            FFHR(_d2dFactory->CreatePathGeometry(&path));
            ComPtr<ID2D1GeometrySink> sink;
            FFHR(path->Open(&sink));
            sink->BeginFigure({ -16.375F, -17.875F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ -12.875F, -15.625F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            FFHR(sink->Close());
            GeoSource* rawResult = new GeoSource(path.Get());
            result = rawResult;
            rawResult->Release();
            return result;
        }

        CanvasGeometry Geometry_04()
        {
            CanvasGeometry result;
            ComPtr<ID2D1PathGeometry> path;
            FFHR(_d2dFactory->CreatePathGeometry(&path));
            ComPtr<ID2D1GeometrySink> sink;
            FFHR(path->Open(&sink));
            sink->BeginFigure({ -23.125F, -27.375F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ -19.125F, -42.5F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            FFHR(sink->Close());
            GeoSource* rawResult = new GeoSource(path.Get());
            result = rawResult;
            rawResult->Release();
            return result;
        }

        CanvasGeometry Geometry_05()
        {
            CanvasGeometry result;
            ComPtr<ID2D1PathGeometry> path;
            FFHR(_d2dFactory->CreatePathGeometry(&path));
            ComPtr<ID2D1GeometrySink> sink;
            FFHR(path->Open(&sink));
            sink->BeginFigure({ -27.875F, -24.75F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ -39.25F, -32.875F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            FFHR(sink->Close());
            GeoSource* rawResult = new GeoSource(path.Get());
            result = rawResult;
            rawResult->Release();
            return result;
        }

        CanvasGeometry Geometry_06()
        {
            CanvasGeometry result;
            ComPtr<ID2D1PathGeometry> path;
            FFHR(_d2dFactory->CreatePathGeometry(&path));
            ComPtr<ID2D1GeometrySink> sink;
            FFHR(path->Open(&sink));
            sink->BeginFigure({ -32.5F, -21.625F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ -45.375F, -20.75F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            FFHR(sink->Close());
            GeoSource* rawResult = new GeoSource(path.Get());
            result = rawResult;
            rawResult->Release();
            return result;
        }

        CanvasGeometry Geometry_07()
        {
            CanvasGeometry result;
            ComPtr<ID2D1PathGeometry> path;
            FFHR(_d2dFactory->CreatePathGeometry(&path));
            ComPtr<ID2D1GeometrySink> sink;
            FFHR(path->Open(&sink));
            sink->BeginFigure({ -22.625F, -19 }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ -17.625F, -7.625F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            FFHR(sink->Close());
            GeoSource* rawResult = new GeoSource(path.Get());
            result = rawResult;
            rawResult->Release();
            return result;
        }

        CanvasGeometry Geometry_08()
        {
            CanvasGeometry result;
            ComPtr<ID2D1PathGeometry> path;
            FFHR(_d2dFactory->CreatePathGeometry(&path));
            ComPtr<ID2D1GeometrySink> sink;
            FFHR(path->Open(&sink));
            sink->BeginFigure({ -20, -19.875F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ -8.375F, -11.875F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            FFHR(sink->Close());
            GeoSource* rawResult = new GeoSource(path.Get());
            result = rawResult;
            rawResult->Release();
            return result;
        }

        CanvasGeometry Geometry_09()
        {
            CanvasGeometry result;
            ComPtr<ID2D1PathGeometry> path;
            FFHR(_d2dFactory->CreatePathGeometry(&path));
            ComPtr<ID2D1GeometrySink> sink;
            FFHR(path->Open(&sink));
            sink->BeginFigure({ -33.375F, -20 }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ -41.875F, -19.625F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            FFHR(sink->Close());
            GeoSource* rawResult = new GeoSource(path.Get());
            result = rawResult;
            rawResult->Release();
            return result;
        }

        CanvasGeometry Geometry_10()
        {
            CanvasGeometry result;
            ComPtr<ID2D1PathGeometry> path;
            FFHR(_d2dFactory->CreatePathGeometry(&path));
            ComPtr<ID2D1GeometrySink> sink;
            FFHR(path->Open(&sink));
            sink->BeginFigure({ -18.375F, -16.75F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ -12.25F, -9 });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            FFHR(sink->Close());
            GeoSource* rawResult = new GeoSource(path.Get());
            result = rawResult;
            rawResult->Release();
            return result;
        }

        CanvasGeometry Geometry_11()
        {
            CanvasGeometry result;
            ComPtr<ID2D1PathGeometry> path;
            FFHR(_d2dFactory->CreatePathGeometry(&path));
            ComPtr<ID2D1GeometrySink> sink;
            FFHR(path->Open(&sink));
            sink->BeginFigure({ -26, -20.75F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ -34.875F, -9.875F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            FFHR(sink->Close());
            GeoSource* rawResult = new GeoSource(path.Get());
            result = rawResult;
            rawResult->Release();
            return result;
        }

        CanvasGeometry Geometry_12()
        {
            CanvasGeometry result;
            ComPtr<ID2D1PathGeometry> path;
            FFHR(_d2dFactory->CreatePathGeometry(&path));
            ComPtr<ID2D1GeometrySink> sink;
            FFHR(path->Open(&sink));
            sink->BeginFigure({ 13.75F, -5 }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ -8.25F, 18.25F });
            sink->AddLine({ 1.25F, 46.75F });
            sink->AddBezier({ { 1.25F, 46.75F }, { 18, 42.25F }, { 20.25F, 41.5F } });
            sink->AddBezier({ { 22.5F, 40.75F }, { 25.25F, 35 }, { 25.25F, 35 } });
            sink->AddLine({ 28.5F, 27 });
            sink->AddLine({ 38, 20 });
            sink->AddLine({ 40, 3.5F });
            sink->AddLine({ 38.25F, -1 });
            sink->AddLine({ 13.75F, -5 });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            FFHR(sink->Close());
            GeoSource* rawResult = new GeoSource(path.Get());
            result = rawResult;
            rawResult->Release();
            return result;
        }

        CanvasGeometry Geometry_13()
        {
            CanvasGeometry result;
            ComPtr<ID2D1PathGeometry> path;
            FFHR(_d2dFactory->CreatePathGeometry(&path));
            ComPtr<ID2D1GeometrySink> sink;
            FFHR(path->Open(&sink));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 47.0209999F, -10.1879997F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 47.0209999F, 2.9519999F }, { 25.9890003F, 13.5830002F }, { -0.00100000005F, 13.5830002F } });
            sink->AddBezier({ { -25.9899998F, 13.5830002F }, { -47.0209999F, 2.9519999F }, { -47.0209999F, -10.1879997F } });
            sink->AddLine({ -47.0209999F, -13.5830002F });
            sink->AddLine({ 47.0209999F, -13.5830002F });
            sink->AddLine({ 47.0209999F, -10.1879997F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            FFHR(sink->Close());
            GeoSource* rawResult = new GeoSource(path.Get());
            result = rawResult;
            rawResult->Release();
            return result;
        }

        CanvasGeometry Geometry_14()
        {
            CanvasGeometry result;
            ComPtr<ID2D1PathGeometry> path;
            FFHR(_d2dFactory->CreatePathGeometry(&path));
            ComPtr<ID2D1GeometrySink> sink;
            FFHR(path->Open(&sink));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ -47.0209999F, -0.00100000005F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -47.0209999F, 12.9940004F }, { -25.9890003F, 23.5100002F }, { 0.00100000005F, 23.5100002F } });
            sink->AddBezier({ { 25.9899998F, 23.5100002F }, { 47.0209999F, 12.9940004F }, { 47.0209999F, -0.00100000005F } });
            sink->AddBezier({ { 47.0209999F, -12.9960003F }, { 25.9899998F, -23.5100002F }, { 0.00100000005F, -23.5100002F } });
            sink->AddBezier({ { -25.9890003F, -23.5100002F }, { -47.0209999F, -12.9960003F }, { -47.0209999F, -0.00100000005F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            FFHR(sink->Close());
            GeoSource* rawResult = new GeoSource(path.Get());
            result = rawResult;
            rawResult->Release();
            return result;
        }

        CanvasGeometry Geometry_15()
        {
            CanvasGeometry result;
            ComPtr<ID2D1PathGeometry> path;
            FFHR(_d2dFactory->CreatePathGeometry(&path));
            ComPtr<ID2D1GeometrySink> sink;
            FFHR(path->Open(&sink));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 44.0810013F, 4.98899984F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 44.0810013F, 16.0189991F }, { 24.3659992F, 24.9449997F }, { 0.00100000005F, 24.9449997F } });
            sink->AddBezier({ { -24.3649998F, 24.9449997F }, { -44.0810013F, 16.0189991F }, { -44.0810013F, 4.98899984F } });
            sink->AddLine({ -44.0810013F, -24.9449997F });
            sink->AddLine({ 44.0810013F, -24.9449997F });
            sink->AddLine({ 44.0810013F, 4.98899984F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            FFHR(sink->Close());
            GeoSource* rawResult = new GeoSource(path.Get());
            result = rawResult;
            rawResult->Release();
            return result;
        }

        CanvasGeometry Geometry_16()
        {
            CanvasGeometry result;
            ComPtr<ID2D1PathGeometry> path;
            FFHR(_d2dFactory->CreatePathGeometry(&path));
            ComPtr<ID2D1GeometrySink> sink;
            FFHR(path->Open(&sink));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ -47.0209999F, -23.4750004F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ -47.0209999F, -16.7420006F });
            sink->AddBezier({ { -47.0209999F, -6.65700006F }, { -34.4090004F, 1.93299997F }, { -16.6539993F, 5.29899979F } });
            sink->AddLine({ -16.6539993F, 14.6590004F });
            sink->AddBezier({ { -16.5470009F, 15.6940002F }, { -15.7279997F, 16.5130005F }, { -14.6929998F, 16.618F } });
            sink->AddBezier({ { -13.6590004F, 16.5130005F }, { -12.8400002F, 15.6940002F }, { -12.7340002F, 14.6590004F } });
            sink->AddLine({ -12.7340002F, 9.76200008F });
            sink->AddBezier({ { -12.882F, 8.28600025F }, { -11.8079996F, 6.97100019F }, { -10.3330002F, 6.82200003F } });
            sink->AddBezier({ { -10.1540003F, 6.80499983F }, { -9.97500038F, 6.80499983F }, { -9.79599953F, 6.82200003F } });
            sink->AddBezier({ { -8.3210001F, 6.67500019F }, { -7.00500011F, 7.75F }, { -6.85699987F, 9.22599983F } });
            sink->AddBezier({ { -6.83900023F, 9.40299988F }, { -6.83900023F, 9.58300018F }, { -6.85699987F, 9.76200008F } });
            sink->AddLine({ -6.85699987F, 14.6590004F });
            sink->AddBezier({ { -6.75F, 15.6940002F }, { -5.93400002F, 16.5130005F }, { -4.89799976F, 16.618F } });
            sink->AddBezier({ { -3.86400008F, 16.5130005F }, { -3.04500008F, 15.6940002F }, { -2.93899989F, 14.6590004F } });
            sink->AddLine({ -2.93899989F, 9.76200008F });
            sink->AddBezier({ { -3.08699989F, 8.28600025F }, { -2.01099992F, 6.97100019F }, { -0.536000013F, 6.82200003F } });
            sink->AddBezier({ { -0.356999993F, 6.80499983F }, { -0.178000003F, 6.80499983F }, { 0.00100000005F, 6.82200003F } });
            sink->AddBezier({ { 1.47500002F, 6.67500019F }, { 2.79200006F, 7.75F }, { 2.93899989F, 9.22599983F } });
            sink->AddBezier({ { 2.95799994F, 9.40299988F }, { 2.95799994F, 9.58300018F }, { 2.93899989F, 9.76200008F } });
            sink->AddLine({ 2.93899989F, 20.5359993F });
            sink->AddBezier({ { 2.93899989F, 22.3969994F }, { 5.00099993F, 23.4759998F }, { 6.85699987F, 23.4759998F } });
            sink->AddBezier({ { 8.71100044F, 23.4759998F }, { 10.7749996F, 22.3969994F }, { 10.7749996F, 20.5359993F } });
            sink->AddLine({ 10.7749996F, 11.7209997F });
            sink->AddBezier({ { 10.7749996F, 10.79F }, { 10.8280001F, 9.76200008F }, { 11.7550001F, 9.76200008F } });
            sink->AddBezier({ { 12.6829996F, 9.76200008F }, { 12.7340002F, 10.79F }, { 12.7340002F, 11.7209997F } });
            sink->AddLine({ 12.7340002F, 16.618F });
            sink->AddBezier({ { 12.9460001F, 18.6889992F }, { 14.5839996F, 20.323F }, { 16.6539993F, 20.5359993F } });
            sink->AddBezier({ { 18.7229996F, 20.323F }, { 20.3600006F, 18.6889992F }, { 20.5720005F, 16.618F } });
            sink->AddLine({ 20.5720005F, 6.82200003F });
            sink->AddBezier({ { 20.5720005F, 5.92299986F }, { 20.8190002F, 5.04099989F }, { 21.2859993F, 4.27299976F } });
            sink->AddBezier({ { 36.5600014F, 0.382999986F }, { 47.0209999F, -7.55900002F }, { 47.0209999F, -16.7420006F } });
            sink->AddLine({ 47.0209999F, -23.4750004F });
            sink->AddLine({ -47.0209999F, -23.4750004F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            FFHR(sink->Close());
            GeoSource* rawResult = new GeoSource(path.Get());
            result = rawResult;
            rawResult->Release();
            return result;
        }

        CanvasGeometry Geometry_17()
        {
            CanvasGeometry result;
            ComPtr<ID2D1PathGeometry> path;
            FFHR(_d2dFactory->CreatePathGeometry(&path));
            ComPtr<ID2D1GeometrySink> sink;
            FFHR(path->Open(&sink));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ -47.0209999F, -23.4750004F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -47.0209999F, -23.4750004F }, { -47.0209999F, -16.7420006F }, { -47.0209999F, -16.7420006F } });
            sink->AddBezier({ { -47.0209999F, -6.65700006F }, { -34.4090004F, 1.93299997F }, { -16.6539993F, 5.29899979F } });
            sink->AddBezier({ { -16.6539993F, 5.29899979F }, { -16.6539993F, 14.6590004F }, { -16.6539993F, 14.6590004F } });
            sink->AddBezier({ { -16.5470009F, 15.6940002F }, { -15.7279997F, 16.5130005F }, { -14.6929998F, 16.618F } });
            sink->AddBezier({ { -13.6590004F, 16.5130005F }, { -12.8400002F, 15.6940002F }, { -12.7340002F, 14.6590004F } });
            sink->AddBezier({ { -12.7340002F, 14.6590004F }, { -12.7340002F, 9.76200008F }, { -12.7340002F, 9.76200008F } });
            sink->AddBezier({ { -12.882F, 8.28600025F }, { -11.8079996F, 6.97100019F }, { -10.3330002F, 6.82200003F } });
            sink->AddBezier({ { -10.1540003F, 6.80499983F }, { -9.97500038F, 6.80499983F }, { -9.79599953F, 6.82200003F } });
            sink->AddBezier({ { -8.3210001F, 6.67500019F }, { -7.00500011F, 7.75F }, { -6.85699987F, 9.22599983F } });
            sink->AddBezier({ { -6.83900023F, 9.40299988F }, { -6.83900023F, 9.58300018F }, { -6.85699987F, 9.76200008F } });
            sink->AddBezier({ { -6.85699987F, 9.76200008F }, { -6.85699987F, 14.6590004F }, { -6.85699987F, 14.6590004F } });
            sink->AddBezier({ { -6.75F, 15.6940002F }, { -5.93400002F, 16.5130005F }, { -4.89799976F, 16.618F } });
            sink->AddBezier({ { -3.86400008F, 16.5130005F }, { -3.04500008F, 15.6940002F }, { -2.93899989F, 14.6590004F } });
            sink->AddBezier({ { -2.93899989F, 14.6590004F }, { -2.93899989F, 9.76200008F }, { -2.93899989F, 9.76200008F } });
            sink->AddBezier({ { -3.08699989F, 8.28600025F }, { -2.01099992F, 6.97100019F }, { -0.536000013F, 6.82200003F } });
            sink->AddBezier({ { -0.356999993F, 6.80499983F }, { -0.178000003F, 6.80499983F }, { 0.00100000005F, 6.82200003F } });
            sink->AddBezier({ { 1.47500002F, 6.67500019F }, { 2.79200006F, 7.75F }, { 2.93899989F, 9.22599983F } });
            sink->AddBezier({ { 2.95799994F, 9.40299988F }, { 2.95799994F, 9.58300018F }, { 2.93899989F, 9.76200008F } });
            sink->AddBezier({ { 2.93899989F, 9.76200008F }, { 2.93899989F, 20.5359993F }, { 2.93899989F, 20.5359993F } });
            sink->AddBezier({ { 2.93899989F, 22.3969994F }, { 5.00099993F, 23.4759998F }, { 6.85699987F, 23.4759998F } });
            sink->AddBezier({ { 8.71100044F, 23.4759998F }, { 10.7749996F, 22.3969994F }, { 10.7749996F, 20.5359993F } });
            sink->AddBezier({ { 10.7749996F, 20.5359993F }, { 10.7749996F, 11.7209997F }, { 10.7749996F, 11.7209997F } });
            sink->AddBezier({ { 10.7749996F, 10.79F }, { 10.8280001F, 9.76200008F }, { 11.7550001F, 9.76200008F } });
            sink->AddBezier({ { 12.6829996F, 9.76200008F }, { 12.7340002F, 10.79F }, { 12.7340002F, 11.7209997F } });
            sink->AddBezier({ { 12.7340002F, 11.7209997F }, { 12.7340002F, 16.618F }, { 12.7340002F, 16.618F } });
            sink->AddBezier({ { 12.9460001F, 18.6889992F }, { 14.5839996F, 20.323F }, { 16.6539993F, 20.5359993F } });
            sink->AddBezier({ { 18.7229996F, 20.323F }, { 20.3600006F, 18.6889992F }, { 20.5720005F, 16.618F } });
            sink->AddBezier({ { 20.5720005F, 16.618F }, { 20.5720005F, 6.82200003F }, { 20.5720005F, 6.82200003F } });
            sink->AddBezier({ { 20.5720005F, 5.92299986F }, { 20.8190002F, 5.04099989F }, { 21.2859993F, 4.27299976F } });
            sink->AddBezier({ { 36.5600014F, 0.382999986F }, { 47.0209999F, -7.55900002F }, { 47.0209999F, -16.7420006F } });
            sink->AddBezier({ { 47.0209999F, -16.7420006F }, { 47.0209999F, -23.4750004F }, { 47.0209999F, -23.4750004F } });
            sink->AddBezier({ { 47.0209999F, -23.4750004F }, { -47.0209999F, -23.4750004F }, { -47.0209999F, -23.4750004F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            FFHR(sink->Close());
            GeoSource* rawResult = new GeoSource(path.Get());
            result = rawResult;
            rawResult->Release();
            return result;
        }

        CanvasGeometry Geometry_18()
        {
            CanvasGeometry result;
            ComPtr<ID2D1PathGeometry> path;
            FFHR(_d2dFactory->CreatePathGeometry(&path));
            ComPtr<ID2D1GeometrySink> sink;
            FFHR(path->Open(&sink));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ -47.0209999F, -23.4750004F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -47.0209999F, -23.4750004F }, { -47.0209999F, -16.7420006F }, { -47.0209999F, -16.7420006F } });
            sink->AddBezier({ { -47.0209999F, -6.65700006F }, { -34.4090004F, 1.93299997F }, { -16.6539993F, 5.29899979F } });
            sink->AddBezier({ { -16.6539993F, 5.29899979F }, { -16.6049995F, 17.0750008F }, { -16.6049995F, 17.0750008F } });
            sink->AddBezier({ { -16.4979992F, 18.1100006F }, { -15.6800003F, 18.9290009F }, { -14.6450005F, 19.0340004F } });
            sink->AddBezier({ { -13.6110001F, 18.9290009F }, { -12.7919998F, 18.1100006F }, { -12.6859999F, 17.0750008F } });
            sink->AddBezier({ { -12.6859999F, 17.0750008F }, { -12.7340002F, 9.76200008F }, { -12.7340002F, 9.76200008F } });
            sink->AddBezier({ { -12.882F, 8.28600025F }, { -11.8079996F, 6.97100019F }, { -10.3330002F, 6.82200003F } });
            sink->AddBezier({ { -10.1540003F, 6.80499983F }, { -9.97500038F, 6.80499983F }, { -9.79599953F, 6.82200003F } });
            sink->AddBezier({ { -8.3210001F, 6.67500019F }, { -7.00500011F, 7.75F }, { -6.85699987F, 9.22599983F } });
            sink->AddBezier({ { -6.83900023F, 9.40299988F }, { -6.83900023F, 9.58300018F }, { -6.85699987F, 9.76200008F } });
            sink->AddBezier({ { -6.85699987F, 9.76200008F }, { -6.80900002F, 17.0750008F }, { -6.80900002F, 17.0750008F } });
            sink->AddBezier({ { -6.70200014F, 18.1100006F }, { -5.88500023F, 18.9290009F }, { -4.84899998F, 19.0340004F } });
            sink->AddBezier({ { -3.81500006F, 18.9290009F }, { -2.99600005F, 18.1100006F }, { -2.8900001F, 17.0750008F } });
            sink->AddBezier({ { -2.8900001F, 17.0750008F }, { -2.93899989F, 9.76200008F }, { -2.93899989F, 9.76200008F } });
            sink->AddBezier({ { -3.08699989F, 8.28600025F }, { -2.01099992F, 6.97100019F }, { -0.536000013F, 6.82200003F } });
            sink->AddBezier({ { -0.356999993F, 6.80499983F }, { -0.178000003F, 6.80499983F }, { 0.00100000005F, 6.82200003F } });
            sink->AddBezier({ { 1.47500002F, 6.67500019F }, { 2.79200006F, 7.75F }, { 2.93899989F, 9.22599983F } });
            sink->AddBezier({ { 2.95799994F, 9.40299988F }, { 2.95799994F, 9.58300018F }, { 2.93899989F, 9.76200008F } });
            sink->AddBezier({ { 2.93899989F, 9.76200008F }, { 2.92499995F, 20.6620007F }, { 2.92499995F, 20.6620007F } });
            sink->AddBezier({ { 2.92499995F, 22.5230007F }, { 4.98799992F, 23.6009998F }, { 6.84399986F, 23.6009998F } });
            sink->AddBezier({ { 8.69799995F, 23.6009998F }, { 10.7620001F, 22.5230007F }, { 10.7620001F, 20.6620007F } });
            sink->AddBezier({ { 10.7620001F, 20.6620007F }, { 10.7749996F, 11.7209997F }, { 10.7749996F, 11.7209997F } });
            sink->AddBezier({ { 10.7749996F, 10.79F }, { 10.8280001F, 9.76200008F }, { 11.7550001F, 9.76200008F } });
            sink->AddBezier({ { 12.6829996F, 9.76200008F }, { 12.7340002F, 10.79F }, { 12.7340002F, 11.7209997F } });
            sink->AddBezier({ { 12.7340002F, 11.7209997F }, { 12.7209997F, 16.743F }, { 12.7209997F, 16.743F } });
            sink->AddBezier({ { 12.9329996F, 18.8139992F }, { 14.5699997F, 20.4489994F }, { 16.6399994F, 20.6620007F } });
            sink->AddBezier({ { 18.7089996F, 20.4489994F }, { 20.3460007F, 18.8139992F }, { 20.5580006F, 16.743F } });
            sink->AddBezier({ { 20.5580006F, 16.743F }, { 20.5720005F, 6.82200003F }, { 20.5720005F, 6.82200003F } });
            sink->AddBezier({ { 20.5720005F, 5.92299986F }, { 20.8190002F, 5.04099989F }, { 21.2859993F, 4.27299976F } });
            sink->AddBezier({ { 36.5600014F, 0.382999986F }, { 47.0209999F, -7.55900002F }, { 47.0209999F, -16.7420006F } });
            sink->AddBezier({ { 47.0209999F, -16.7420006F }, { 47.0209999F, -23.4750004F }, { 47.0209999F, -23.4750004F } });
            sink->AddBezier({ { 47.0209999F, -23.4750004F }, { -47.0209999F, -23.4750004F }, { -47.0209999F, -23.4750004F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            FFHR(sink->Close());
            GeoSource* rawResult = new GeoSource(path.Get());
            result = rawResult;
            rawResult->Release();
            return result;
        }

        CanvasGeometry Geometry_19()
        {
            CanvasGeometry result;
            ComPtr<ID2D1PathGeometry> path;
            FFHR(_d2dFactory->CreatePathGeometry(&path));
            ComPtr<ID2D1GeometrySink> sink;
            FFHR(path->Open(&sink));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ -47.0209999F, -23.4750004F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -47.0209999F, -23.4750004F }, { -47.0209999F, -16.7420006F }, { -47.0209999F, -16.7420006F } });
            sink->AddBezier({ { -47.0209999F, -6.65700006F }, { -34.4090004F, 1.93299997F }, { -16.6539993F, 5.29899979F } });
            sink->AddBezier({ { -16.6539993F, 5.29899979F }, { -16.6200008F, 14.4659996F }, { -16.6200008F, 14.4659996F } });
            sink->AddBezier({ { -16.5130005F, 15.5010004F }, { -15.6949997F, 16.3199997F }, { -14.6599998F, 16.4249992F } });
            sink->AddBezier({ { -13.6260004F, 16.3199997F }, { -12.8070002F, 15.5010004F }, { -12.7010002F, 14.4659996F } });
            sink->AddBezier({ { -12.7010002F, 14.4659996F }, { -12.7340002F, 9.76200008F }, { -12.7340002F, 9.76200008F } });
            sink->AddBezier({ { -12.882F, 8.28600025F }, { -11.8079996F, 6.97100019F }, { -10.3330002F, 6.82200003F } });
            sink->AddBezier({ { -10.1540003F, 6.80499983F }, { -9.97500038F, 6.80499983F }, { -9.79599953F, 6.82200003F } });
            sink->AddBezier({ { -8.3210001F, 6.67500019F }, { -7.00500011F, 7.75F }, { -6.85699987F, 9.22599983F } });
            sink->AddBezier({ { -6.83900023F, 9.40299988F }, { -6.83900023F, 9.58300018F }, { -6.85699987F, 9.76200008F } });
            sink->AddBezier({ { -6.85699987F, 9.76200008F }, { -6.82399988F, 14.4659996F }, { -6.82399988F, 14.4659996F } });
            sink->AddBezier({ { -6.71700001F, 15.5010004F }, { -5.9000001F, 16.3199997F }, { -4.86399984F, 16.4249992F } });
            sink->AddBezier({ { -3.82999992F, 16.3199997F }, { -3.01099992F, 15.5010004F }, { -2.90499997F, 14.4659996F } });
            sink->AddBezier({ { -2.90499997F, 14.4659996F }, { -2.93899989F, 9.76200008F }, { -2.93899989F, 9.76200008F } });
            sink->AddBezier({ { -3.08699989F, 8.28600025F }, { -2.01099992F, 6.97100019F }, { -0.536000013F, 6.82200003F } });
            sink->AddBezier({ { -0.356999993F, 6.80499983F }, { -0.178000003F, 6.80499983F }, { 0.00100000005F, 6.82200003F } });
            sink->AddBezier({ { 1.47500002F, 6.67500019F }, { 2.79200006F, 7.75F }, { 2.93899989F, 9.22599983F } });
            sink->AddBezier({ { 2.95799994F, 9.40299988F }, { 2.95799994F, 9.58300018F }, { 2.93899989F, 9.76200008F } });
            sink->AddBezier({ { 2.93899989F, 9.76200008F }, { 2.95099998F, 19.3910007F }, { 2.95099998F, 19.3910007F } });
            sink->AddBezier({ { 2.95099998F, 21.2520008F }, { 5.01399994F, 22.3299999F }, { 6.86999989F, 22.3299999F } });
            sink->AddBezier({ { 8.72399998F, 22.3299999F }, { 10.7880001F, 21.2520008F }, { 10.7880001F, 19.3910007F } });
            sink->AddBezier({ { 10.7880001F, 19.3910007F }, { 10.7749996F, 11.7209997F }, { 10.7749996F, 11.7209997F } });
            sink->AddBezier({ { 10.7749996F, 10.79F }, { 10.8280001F, 9.76200008F }, { 11.7550001F, 9.76200008F } });
            sink->AddBezier({ { 12.6829996F, 9.76200008F }, { 12.7340002F, 10.79F }, { 12.7340002F, 11.7209997F } });
            sink->AddBezier({ { 12.7340002F, 11.7209997F }, { 12.7469997F, 15.4720001F }, { 12.7469997F, 15.4720001F } });
            sink->AddBezier({ { 12.9589996F, 17.5429993F }, { 14.5959997F, 19.1779995F }, { 16.6660004F, 19.3910007F } });
            sink->AddBezier({ { 18.7350006F, 19.1779995F }, { 20.3719997F, 17.5429993F }, { 20.5839996F, 15.4720001F } });
            sink->AddBezier({ { 20.5839996F, 15.4720001F }, { 20.5720005F, 6.82200003F }, { 20.5720005F, 6.82200003F } });
            sink->AddBezier({ { 20.5720005F, 5.92299986F }, { 20.8190002F, 5.04099989F }, { 21.2859993F, 4.27299976F } });
            sink->AddBezier({ { 36.5600014F, 0.382999986F }, { 47.0209999F, -7.55900002F }, { 47.0209999F, -16.7420006F } });
            sink->AddBezier({ { 47.0209999F, -16.7420006F }, { 47.0209999F, -23.4750004F }, { 47.0209999F, -23.4750004F } });
            sink->AddBezier({ { 47.0209999F, -23.4750004F }, { -47.0209999F, -23.4750004F }, { -47.0209999F, -23.4750004F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            FFHR(sink->Close());
            GeoSource* rawResult = new GeoSource(path.Get());
            result = rawResult;
            rawResult->Release();
            return result;
        }

        CanvasGeometry Geometry_20()
        {
            CanvasGeometry result;
            ComPtr<ID2D1PathGeometry> path;
            FFHR(_d2dFactory->CreatePathGeometry(&path));
            ComPtr<ID2D1GeometrySink> sink;
            FFHR(path->Open(&sink));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 1.95899999F, 4.05499983F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 1.42900002F, 4.05600023F }, { 0.91900003F, 3.84500003F }, { 0.545000017F, 3.4690001F } });
            sink->AddLine({ -3.37400007F, -0.451000005F });
            sink->AddBezier({ { -4.15299988F, -1.23300004F }, { -4.1500001F, -2.49900007F }, { -3.36800003F, -3.27900004F } });
            sink->AddBezier({ { -2.58800006F, -4.05600023F }, { -1.32700002F, -4.05600023F }, { -0.546000004F, -3.27900004F } });
            sink->AddLine({ 3.37199998F, 0.640999973F });
            sink->AddBezier({ { 4.15299988F, 1.42200005F }, { 4.15299988F, 2.68899989F }, { 3.37199998F, 3.4690001F } });
            sink->AddBezier({ { 3.11599994F, 3.7249999F }, { 2.79900002F, 3.90400004F }, { 2.454F, 3.9920001F } });
            sink->AddBezier({ { 2.29299998F, 4.03299999F }, { 2.12700009F, 4.05499983F }, { 1.95899999F, 4.05499983F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            FFHR(sink->Close());
            GeoSource* rawResult = new GeoSource(path.Get());
            result = rawResult;
            rawResult->Release();
            return result;
        }

        CanvasGeometry Geometry_21()
        {
            CanvasGeometry result;
            ComPtr<ID2D1PathGeometry> path;
            FFHR(_d2dFactory->CreatePathGeometry(&path));
            ComPtr<ID2D1GeometrySink> sink;
            FFHR(path->Open(&sink));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ -2.05699992F, 4.05700016F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -3.16199994F, 4.05600023F }, { -4.05700016F, 3.16100001F }, { -4.05700016F, 2.05599999F } });
            sink->AddBezier({ { -4.05700016F, 1.52600002F }, { -3.84599996F, 1.01800001F }, { -3.47099996F, 0.643000007F } });
            sink->AddLine({ 0.446999997F, -3.27600002F });
            sink->AddBezier({ { 1.22800004F, -4.05700016F }, { 2.49399996F, -4.05700016F }, { 3.2750001F, -3.27600002F } });
            sink->AddBezier({ { 4.05600023F, -2.49499989F }, { 4.05600023F, -1.22899997F }, { 3.2750001F, -0.448000014F } });
            sink->AddLine({ -0.643000007F, 3.47000003F });
            sink->AddBezier({ { -1.01800001F, 3.84599996F }, { -1.52699995F, 4.05700016F }, { -2.05699992F, 4.05700016F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            FFHR(sink->Close());
            GeoSource* rawResult = new GeoSource(path.Get());
            result = rawResult;
            rawResult->Release();
            return result;
        }

        CanvasGeometry Geometry_22()
        {
            CanvasGeometry result;
            ComPtr<ID2D1PathGeometry> path;
            FFHR(_d2dFactory->CreatePathGeometry(&path));
            ComPtr<ID2D1GeometrySink> sink;
            FFHR(path->Open(&sink));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 1.95899999F, 4.05700016F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 1.42900002F, 4.05700016F }, { 0.920000017F, 3.84699988F }, { 0.545000017F, 3.47099996F } });
            sink->AddLine({ -3.37299991F, -0.446999997F });
            sink->AddBezier({ { -4.15399981F, -1.22800004F }, { -4.15399981F, -2.49600005F }, { -3.37299991F, -3.27699995F } });
            sink->AddBezier({ { -2.59200001F, -4.05700016F }, { -1.32599998F, -4.05700016F }, { -0.545000017F, -3.27699995F } });
            sink->AddLine({ 3.37299991F, 0.643000007F });
            sink->AddBezier({ { 4.15399981F, 1.42400002F }, { 4.15399981F, 2.68899989F }, { 3.37299991F, 3.47099996F } });
            sink->AddBezier({ { 2.99799991F, 3.84500003F }, { 2.48900008F, 4.05700016F }, { 1.95899999F, 4.05700016F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            FFHR(sink->Close());
            GeoSource* rawResult = new GeoSource(path.Get());
            result = rawResult;
            rawResult->Release();
            return result;
        }

        CanvasGeometry Geometry_23()
        {
            CanvasGeometry result;
            ComPtr<ID2D1PathGeometry> path;
            FFHR(_d2dFactory->CreatePathGeometry(&path));
            ComPtr<ID2D1GeometrySink> sink;
            FFHR(path->Open(&sink));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ -2.05699992F, 4.05600023F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -3.16100001F, 4.05600023F }, { -4.05700016F, 3.16000009F }, { -4.05700016F, 2.05599999F } });
            sink->AddBezier({ { -4.05700016F, 1.52499998F }, { -3.84599996F, 1.01699996F }, { -3.47099996F, 0.64200002F } });
            sink->AddLine({ 0.449000001F, -3.27699995F });
            sink->AddBezier({ { 1.22899997F, -4.05700016F }, { 2.49600005F, -4.05700016F }, { 3.27699995F, -3.27699995F } });
            sink->AddBezier({ { 4.05700016F, -2.49600005F }, { 4.05700016F, -1.22899997F }, { 3.27699995F, -0.448000014F } });
            sink->AddLine({ -0.643000007F, 3.47000003F });
            sink->AddBezier({ { -0.934000015F, 3.76200008F }, { -1.30599999F, 3.954F }, { -1.70599997F, 4.0250001F } });
            sink->AddBezier({ { -1.82099998F, 4.04500008F }, { -1.93900001F, 4.05600023F }, { -2.05699992F, 4.05600023F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            FFHR(sink->Close());
            GeoSource* rawResult = new GeoSource(path.Get());
            result = rawResult;
            rawResult->Release();
            return result;
        }

        CanvasGeometry Geometry_24()
        {
            CanvasGeometry result;
            ComPtr<ID2D1PathGeometry> path;
            FFHR(_d2dFactory->CreatePathGeometry(&path));
            ComPtr<ID2D1GeometrySink> sink;
            FFHR(path->Open(&sink));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ -2.546F, 4.54699993F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -3.6500001F, 4.546F }, { -4.546F, 3.65100002F }, { -4.546F, 2.546F } });
            sink->AddBezier({ { -4.546F, 2.01600003F }, { -4.33500004F, 1.50800002F }, { -3.96000004F, 1.13300002F } });
            sink->AddLine({ 0.938000023F, -3.76600003F });
            sink->AddBezier({ { 1.71899998F, -4.546F }, { 2.9849999F, -4.54500008F }, { 3.76600003F, -3.76399994F } });
            sink->AddBezier({ { 4.546F, -2.98300004F }, { 4.546F, -1.71899998F }, { 3.76600003F, -0.938000023F } });
            sink->AddLine({ -1.13199997F, 3.96000004F });
            sink->AddBezier({ { -1.50600004F, 4.33599997F }, { -2.0150001F, 4.54699993F }, { -2.546F, 4.54699993F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            FFHR(sink->Close());
            GeoSource* rawResult = new GeoSource(path.Get());
            result = rawResult;
            rawResult->Release();
            return result;
        }

        CanvasGeometry Geometry_25()
        {
            CanvasGeometry result;
            ComPtr<ID2D1PathGeometry> path;
            FFHR(_d2dFactory->CreatePathGeometry(&path));
            ComPtr<ID2D1GeometrySink> sink;
            FFHR(path->Open(&sink));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 2.44899988F, 4.546F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 1.91799998F, 4.546F }, { 1.40900004F, 4.33599997F }, { 1.03499997F, 3.96000004F } });
            sink->AddLine({ -3.86299992F, -0.938000023F });
            sink->AddBezier({ { -4.64400005F, -1.71899998F }, { -4.64400005F, -2.9849999F }, { -3.86299992F, -3.76600003F } });
            sink->AddBezier({ { -3.08200002F, -4.54699993F }, { -1.81599998F, -4.54699993F }, { -1.03499997F, -3.76600003F } });
            sink->AddLine({ 3.86299992F, 1.13300002F });
            sink->AddBezier({ { 4.64400005F, 1.91400003F }, { 4.64400005F, 3.18000007F }, { 3.86299992F, 3.96199989F } });
            sink->AddBezier({ { 3.48799992F, 4.33599997F }, { 2.97900009F, 4.546F }, { 2.44899988F, 4.546F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            FFHR(sink->Close());
            GeoSource* rawResult = new GeoSource(path.Get());
            result = rawResult;
            rawResult->Release();
            return result;
        }

        CanvasGeometry Geometry_26()
        {
            CanvasGeometry result;
            ComPtr<ID2D1PathGeometry> path;
            FFHR(_d2dFactory->CreatePathGeometry(&path));
            ComPtr<ID2D1GeometrySink> sink;
            FFHR(path->Open(&sink));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ -2.546F, 4.546F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -3.6500001F, 4.546F }, { -4.546F, 3.6500001F }, { -4.546F, 2.546F } });
            sink->AddBezier({ { -4.546F, 2.0150001F }, { -4.33500004F, 1.50699997F }, { -3.96000004F, 1.13199997F } });
            sink->AddLine({ 0.938000023F, -3.76699996F });
            sink->AddBezier({ { 1.71899998F, -4.54699993F }, { 2.9849999F, -4.54699993F }, { 3.76600003F, -3.7650001F } });
            sink->AddBezier({ { 4.546F, -2.98399997F }, { 4.546F, -1.71899998F }, { 3.76600003F, -0.938000023F } });
            sink->AddLine({ -1.13199997F, 3.96000004F });
            sink->AddBezier({ { -1.50600004F, 4.33599997F }, { -2.0150001F, 4.54699993F }, { -2.546F, 4.546F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            FFHR(sink->Close());
            GeoSource* rawResult = new GeoSource(path.Get());
            result = rawResult;
            rawResult->Release();
            return result;
        }

        CanvasGeometry Geometry_27()
        {
            CanvasGeometry result;
            ComPtr<ID2D1PathGeometry> path;
            FFHR(_d2dFactory->CreatePathGeometry(&path));
            ComPtr<ID2D1GeometrySink> sink;
            FFHR(path->Open(&sink));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ -2.05699992F, 4.05600023F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -3.16100001F, 4.05600023F }, { -4.05700016F, 3.16000009F }, { -4.05700016F, 2.05599999F } });
            sink->AddBezier({ { -4.05700016F, 1.52499998F }, { -3.84599996F, 1.01699996F }, { -3.47099996F, 0.64200002F } });
            sink->AddLine({ 0.449000001F, -3.27699995F });
            sink->AddBezier({ { 1.22899997F, -4.05700016F }, { 2.49600005F, -4.05700016F }, { 3.27699995F, -3.27699995F } });
            sink->AddBezier({ { 4.05700016F, -2.49600005F }, { 4.05700016F, -1.22899997F }, { 3.27699995F, -0.448000014F } });
            sink->AddLine({ -0.643000007F, 3.47000003F });
            sink->AddBezier({ { -1.01800001F, 3.84599996F }, { -1.52699995F, 4.05700016F }, { -2.05699992F, 4.05600023F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            FFHR(sink->Close());
            GeoSource* rawResult = new GeoSource(path.Get());
            result = rawResult;
            rawResult->Release();
            return result;
        }

        CanvasGeometry Geometry_28()
        {
            CanvasGeometry result;
            ComPtr<ID2D1PathGeometry> path;
            FFHR(_d2dFactory->CreatePathGeometry(&path));
            ComPtr<ID2D1GeometrySink> sink;
            FFHR(path->Open(&sink));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 1.95899999F, 4.05499983F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 1.42900002F, 4.05600023F }, { 0.91900003F, 3.84500003F }, { 0.545000017F, 3.4690001F } });
            sink->AddLine({ -3.37400007F, -0.451000005F });
            sink->AddBezier({ { -4.15299988F, -1.23300004F }, { -4.1500001F, -2.49900007F }, { -3.36800003F, -3.27900004F } });
            sink->AddBezier({ { -2.58800006F, -4.05600023F }, { -1.32700002F, -4.05600023F }, { -0.546000004F, -3.27900004F } });
            sink->AddLine({ 3.37199998F, 0.640999973F });
            sink->AddBezier({ { 4.15299988F, 1.42200005F }, { 4.15299988F, 2.68899989F }, { 3.37199998F, 3.4690001F } });
            sink->AddBezier({ { 2.99699998F, 3.8440001F }, { 2.48900008F, 4.05499983F }, { 1.95899999F, 4.05499983F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            FFHR(sink->Close());
            GeoSource* rawResult = new GeoSource(path.Get());
            result = rawResult;
            rawResult->Release();
            return result;
        }

        CanvasGeometry Geometry_29()
        {
            CanvasGeometry result;
            ComPtr<ID2D1PathGeometry> path;
            FFHR(_d2dFactory->CreatePathGeometry(&path));
            ComPtr<ID2D1GeometrySink> sink;
            FFHR(path->Open(&sink));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ -3.91799998F, -9.83100033F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 3.91799998F, -9.83100033F });
            sink->AddLine({ 3.91799998F, 9.83100033F });
            sink->AddLine({ -3.91799998F, 9.83100033F });
            sink->AddLine({ -3.91799998F, -9.83100033F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            FFHR(sink->Close());
            GeoSource* rawResult = new GeoSource(path.Get());
            result = rawResult;
            rawResult->Release();
            return result;
        }

        CanvasGeometry Geometry_30()
        {
            CanvasGeometry result;
            ComPtr<ID2D1PathGeometry> path;
            FFHR(_d2dFactory->CreatePathGeometry(&path));
            ComPtr<ID2D1GeometrySink> sink;
            FFHR(path->Open(&sink));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 0, -3.91899991F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 2.16400003F, -3.91899991F }, { 3.91799998F, -2.16499996F }, { 3.91799998F, -0.00100000005F } });
            sink->AddBezier({ { 3.91799998F, 2.16400003F }, { 2.16400003F, 3.91899991F }, { 0, 3.91899991F } });
            sink->AddBezier({ { -2.16400003F, 3.91899991F }, { -3.91799998F, 2.16400003F }, { -3.91799998F, -0.00100000005F } });
            sink->AddBezier({ { -3.91799998F, -2.16499996F }, { -2.16400003F, -3.91899991F }, { 0, -3.91899991F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            FFHR(sink->Close());
            GeoSource* rawResult = new GeoSource(path.Get());
            result = rawResult;
            rawResult->Release();
            return result;
        }

        CanvasGeometry Geometry_31()
        {
            CanvasGeometry result;
            ComPtr<ID2D1PathGeometry> path;
            FFHR(_d2dFactory->CreatePathGeometry(&path));
            ComPtr<ID2D1GeometrySink> sink;
            FFHR(path->Open(&sink));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 4.8920002F, 4.39300013F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 4.90299988F, 7.09800005F }, { 2.7190001F, 9.30000019F }, { 0.0140000004F, 9.31000042F } });
            sink->AddBezier({ { -2.69099998F, 9.3210001F }, { -4.89300013F, 7.13700008F }, { -4.90299988F, 4.43200016F } });
            sink->AddLine({ -4.90299988F, 4.39300013F });
            sink->AddBezier({ { -4.90299988F, 1.68799996F }, { -0.00999999978F, -7.3210001F }, { -0.00999999978F, -7.3210001F } });
            sink->AddBezier({ { -0.00999999978F, -7.3210001F }, { 4.8920002F, 1.68799996F }, { 4.8920002F, 4.39300013F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            FFHR(sink->Close());
            GeoSource* rawResult = new GeoSource(path.Get());
            result = rawResult;
            rawResult->Release();
            return result;
        }

        CanvasGeometry Geometry_32()
        {
            CanvasGeometry result;
            ComPtr<ID2D1PathGeometry> path;
            FFHR(_d2dFactory->CreatePathGeometry(&path));
            ComPtr<ID2D1GeometrySink> sink;
            FFHR(path->Open(&sink));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 4.8920002F, 4.39300013F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 4.90299988F, 7.09800005F }, { 2.7190001F, 9.30000019F }, { 0.0140000004F, 9.31000042F } });
            sink->AddBezier({ { -2.69099998F, 9.3210001F }, { -4.89300013F, 7.13700008F }, { -4.90299988F, 4.43200016F } });
            sink->AddBezier({ { -4.90299988F, 4.43200016F }, { -4.90299988F, 4.39300013F }, { -4.90299988F, 4.39300013F } });
            sink->AddBezier({ { -4.90299988F, 1.68799996F }, { -0.00999999978F, -7.3210001F }, { -0.00999999978F, -7.3210001F } });
            sink->AddBezier({ { -0.00999999978F, -7.3210001F }, { 4.8920002F, 1.68799996F }, { 4.8920002F, 4.39300013F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            FFHR(sink->Close());
            GeoSource* rawResult = new GeoSource(path.Get());
            result = rawResult;
            rawResult->Release();
            return result;
        }

        CanvasGeometry Geometry_33()
        {
            CanvasGeometry result;
            ComPtr<ID2D1PathGeometry> path;
            FFHR(_d2dFactory->CreatePathGeometry(&path));
            ComPtr<ID2D1GeometrySink> sink;
            FFHR(path->Open(&sink));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 4.79799986F, 4.41099977F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 4.91099977F, 7.64699984F }, { 3.22399998F, 9.45899963F }, { 0.0280000009F, 9.49699974F } });
            sink->AddBezier({ { -2.67700005F, 9.52900028F }, { -4.67399979F, 7.51200008F }, { -4.68400002F, 4.80700016F } });
            sink->AddBezier({ { -4.68400002F, 4.80700016F }, { -4.71199989F, 3.92400002F }, { -4.71199989F, 3.92400002F } });
            sink->AddBezier({ { -4.43200016F, -3.35299993F }, { -0.224000007F, -6.47700024F }, { -0.224000007F, -6.47700024F } });
            sink->AddBezier({ { -0.224000007F, -6.47700024F }, { 3.56800008F, -4.9460001F }, { 4.79799986F, 4.41099977F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            FFHR(sink->Close());
            GeoSource* rawResult = new GeoSource(path.Get());
            result = rawResult;
            rawResult->Release();
            return result;
        }

        CanvasGeometry Geometry_34()
        {
            CanvasGeometry result;
            ComPtr<ID2D1PathGeometry> path;
            FFHR(_d2dFactory->CreatePathGeometry(&path));
            ComPtr<ID2D1GeometrySink> sink;
            FFHR(path->Open(&sink));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 4.204F, 4.45599985F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 4.21500015F, 7.16099977F }, { 2.7190001F, 9.30000019F }, { 0.0140000004F, 9.31000042F } });
            sink->AddBezier({ { -2.69099998F, 9.3210001F }, { -4.76800013F, 5.88700008F }, { -4.77799988F, 3.18199992F } });
            sink->AddBezier({ { -4.77799988F, 3.18199992F }, { -4.90299988F, 4.39300013F }, { -4.90299988F, 4.39300013F } });
            sink->AddBezier({ { -4.90299988F, 1.68799996F }, { -0.379999995F, -7.3210001F }, { -0.379999995F, -7.3210001F } });
            sink->AddBezier({ { -0.379999995F, -7.3210001F }, { 4.204F, 1.75100005F }, { 4.204F, 4.45599985F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            FFHR(sink->Close());
            GeoSource* rawResult = new GeoSource(path.Get());
            result = rawResult;
            rawResult->Release();
            return result;
        }

        CanvasGeometry Geometry_35()
        {
            CanvasGeometry result;
            ComPtr<ID2D1PathGeometry> path;
            FFHR(_d2dFactory->CreatePathGeometry(&path));
            ComPtr<ID2D1GeometrySink> sink;
            FFHR(path->Open(&sink));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 4.8920002F, 4.40199995F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 4.25099993F, 7.33500004F }, { 3.03699994F, 9.30300045F }, { -0.361000001F, 9.3409996F } });
            sink->AddBezier({ { -3.06599998F, 9.35200024F }, { -4.82999992F, 5.94999981F }, { -4.84000015F, 3.24499989F } });
            sink->AddBezier({ { -4.84000015F, 3.24499989F }, { -4.74700022F, 2.64299989F }, { -4.74700022F, 2.64299989F } });
            sink->AddBezier({ { -4.74700022F, -0.061999999F }, { -0.598999977F, -5.53999996F }, { -0.598999977F, -5.53999996F } });
            sink->AddBezier({ { -0.598999977F, -5.53999996F }, { 2.75500011F, -5.0710001F }, { 4.8920002F, 4.40199995F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            FFHR(sink->Close());
            GeoSource* rawResult = new GeoSource(path.Get());
            result = rawResult;
            rawResult->Release();
            return result;
        }

        CanvasGeometry Geometry_36()
        {
            CanvasGeometry result;
            ComPtr<ID2D1PathGeometry> path;
            FFHR(_d2dFactory->CreatePathGeometry(&path));
            ComPtr<ID2D1GeometrySink> sink;
            FFHR(path->Open(&sink));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 4.8920002F, 4.16099977F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 3.59899998F, 7.32200003F }, { 2.7190001F, 9.30000019F }, { 0.0140000004F, 9.31000042F } });
            sink->AddBezier({ { -2.69099998F, 9.3210001F }, { -4.64300013F, 5.88700008F }, { -4.65299988F, 3.18199992F } });
            sink->AddBezier({ { -4.65299988F, 3.18199992F }, { -4.65299988F, 3.14299989F }, { -4.65299988F, 3.14299989F } });
            sink->AddBezier({ { -4.65299988F, 0.437999994F }, { -1.31799996F, -6.3210001F }, { -1.31799996F, -6.3210001F } });
            sink->AddBezier({ { -1.31799996F, -6.3210001F }, { 3.41199994F, -3.74099994F }, { 4.8920002F, 4.16099977F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            FFHR(sink->Close());
            GeoSource* rawResult = new GeoSource(path.Get());
            result = rawResult;
            rawResult->Release();
            return result;
        }

        CanvasGeometry Geometry_37()
        {
            CanvasGeometry result;
            ComPtr<ID2D1PathGeometry> path;
            FFHR(_d2dFactory->CreatePathGeometry(&path));
            ComPtr<ID2D1GeometrySink> sink;
            FFHR(path->Open(&sink));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 4.829F, 4.00500011F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 4.34899998F, 4.83500004F }, { 2.56800008F, 8.39700031F }, { -0.0799999982F, 8.2159996F } });
            sink->AddBezier({ { -2.43199992F, 8.46000004F }, { -4.45499992F, 6.32499981F }, { -4.46500015F, 3.61999989F } });
            sink->AddBezier({ { -4.46500015F, 3.61999989F }, { -4.52799988F, 3.01799989F }, { -4.52799988F, 3.01799989F } });
            sink->AddBezier({ { -4.18200016F, -3.66499996F }, { -0.349000007F, -5.2579999F }, { -0.349000007F, -5.2579999F } });
            sink->AddBezier({ { -0.349000007F, -5.2579999F }, { 1.72399998F, -6.28999996F }, { 4.829F, 4.00500011F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            FFHR(sink->Close());
            GeoSource* rawResult = new GeoSource(path.Get());
            result = rawResult;
            rawResult->Release();
            return result;
        }

        CanvasGeometry Geometry_38()
        {
            CanvasGeometry result;
            ComPtr<ID2D1PathGeometry> path;
            FFHR(_d2dFactory->CreatePathGeometry(&path));
            ComPtr<ID2D1GeometrySink> sink;
            FFHR(path->Open(&sink));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 4.454F, 4.22399998F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 3.16100001F, 7.38500023F }, { 2.7190001F, 9.30000019F }, { 0.0140000004F, 9.31000042F } });
            sink->AddBezier({ { -3.96399999F, 9.1789999F }, { -4.64300013F, 5.88700008F }, { -4.65299988F, 3.18199992F } });
            sink->AddBezier({ { -4.65299988F, 3.18199992F }, { -4.65299988F, 3.14299989F }, { -4.65299988F, 3.14299989F } });
            sink->AddBezier({ { -5.33900023F, -0.69599998F }, { -0.317999989F, -6.5710001F }, { -0.317999989F, -6.5710001F } });
            sink->AddBezier({ { -0.317999989F, -6.5710001F }, { 2.97399998F, -3.67799997F }, { 4.454F, 4.22399998F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            FFHR(sink->Close());
            GeoSource* rawResult = new GeoSource(path.Get());
            result = rawResult;
            rawResult->Release();
            return result;
        }

        CanvasGeometry Geometry_39()
        {
            CanvasGeometry result;
            ComPtr<ID2D1PathGeometry> path;
            FFHR(_d2dFactory->CreatePathGeometry(&path));
            ComPtr<ID2D1GeometrySink> sink;
            FFHR(path->Open(&sink));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 4.6420002F, 3.60299993F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 4.03700018F, 7.34800005F }, { 2.73300004F, 8.64400005F }, { 0.0280000009F, 8.65400028F } });
            sink->AddBezier({ { -3.19899988F, 8.5539999F }, { -4.52600002F, 4.99100018F }, { -4.74700022F, 3.19099998F } });
            sink->AddBezier({ { -4.74700022F, 3.19099998F }, { -4.74700022F, 3.15199995F }, { -4.74700022F, 3.15199995F } });
            sink->AddBezier({ { -5.08900023F, -4.91499996F }, { 0.681999981F, -5.72700024F }, { 0.681999981F, -5.72700024F } });
            sink->AddBezier({ { 0.681999981F, -5.72700024F }, { 2.03699994F, -6.44700003F }, { 4.6420002F, 3.60299993F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            FFHR(sink->Close());
            GeoSource* rawResult = new GeoSource(path.Get());
            result = rawResult;
            rawResult->Release();
            return result;
        }

        CanvasGeometry Geometry_40()
        {
            CanvasGeometry result;
            ComPtr<ID2D1PathGeometry> path;
            FFHR(_d2dFactory->CreatePathGeometry(&path));
            ComPtr<ID2D1GeometrySink> sink;
            FFHR(path->Open(&sink));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 3.89199996F, 2.97399998F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 3.97399998F, 7.3039999F }, { 2.7190001F, 9.30000019F }, { 0.0140000004F, 9.31000042F } });
            sink->AddBezier({ { -4.33900023F, 7.9289999F }, { -4.82999992F, 5.90500021F }, { -4.84000015F, 3.20000005F } });
            sink->AddBezier({ { -4.84000015F, 3.20000005F }, { -4.84000015F, 3.16100001F }, { -4.84000015F, 3.16100001F } });
            sink->AddBezier({ { -5.52600002F, -0.677999973F }, { -0.254999995F, -5.7579999F }, { -0.254999995F, -5.7579999F } });
            sink->AddBezier({ { -0.254999995F, -5.7579999F }, { 1.91199994F, -3.6329999F }, { 3.89199996F, 2.97399998F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            FFHR(sink->Close());
            GeoSource* rawResult = new GeoSource(path.Get());
            result = rawResult;
            rawResult->Release();
            return result;
        }

        CanvasGeometry Geometry_41()
        {
            CanvasGeometry result;
            ComPtr<ID2D1PathGeometry> path;
            FFHR(_d2dFactory->CreatePathGeometry(&path));
            ComPtr<ID2D1GeometrySink> sink;
            FFHR(path->Open(&sink));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 4.79799986F, 3.0539999F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 4.88000011F, 7.38399982F }, { 2.75F, 8.45600033F }, { 0.0450000018F, 8.4659996F } });
            sink->AddBezier({ { -3.58899999F, 8.33500004F }, { -4.30299997F, 5.76100016F }, { -4.46500015F, 3.57500005F } });
            sink->AddBezier({ { -4.46500015F, 3.57500005F }, { -4.43400002F, 1.91100001F }, { -4.43400002F, 1.91100001F } });
            sink->AddBezier({ { -2.11999989F, -7.53999996F }, { 0.214000002F, -6.28999996F }, { 0.214000002F, -6.28999996F } });
            sink->AddBezier({ { 0.214000002F, -6.28999996F }, { 1.84899998F, -7.38399982F }, { 4.79799986F, 3.0539999F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            FFHR(sink->Close());
            GeoSource* rawResult = new GeoSource(path.Get());
            result = rawResult;
            rawResult->Release();
            return result;
        }

        CanvasGeometry Geometry_42()
        {
            CanvasGeometry result;
            ComPtr<ID2D1PathGeometry> path;
            FFHR(_d2dFactory->CreatePathGeometry(&path));
            ComPtr<ID2D1GeometrySink> sink;
            FFHR(path->Open(&sink));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 4.829F, 2.94700003F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 4.91099977F, 7.27699995F }, { 2.7190001F, 9.30000019F }, { 0.0140000004F, 9.31000042F } });
            sink->AddBezier({ { -3.46399999F, 9.61600018F }, { -4.21400023F, 5.3039999F }, { -4.52799988F, 3.63800001F } });
            sink->AddBezier({ { -4.52799988F, 3.63800001F }, { -4.52799988F, 3.59899998F }, { -4.52799988F, 3.59899998F } });
            sink->AddBezier({ { -3.52600002F, -5.5710001F }, { 0.370000005F, -6.5079999F }, { 0.370000005F, -6.5079999F } });
            sink->AddBezier({ { 0.370000005F, -6.5079999F }, { 2.97399998F, -4.75899982F }, { 4.829F, 2.94700003F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            FFHR(sink->Close());
            GeoSource* rawResult = new GeoSource(path.Get());
            result = rawResult;
            rawResult->Release();
            return result;
        }

        CanvasGeometry Geometry_43()
        {
            CanvasGeometry result;
            ComPtr<ID2D1PathGeometry> path;
            FFHR(_d2dFactory->CreatePathGeometry(&path));
            ComPtr<ID2D1GeometrySink> sink;
            FFHR(path->Open(&sink));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 4.72900009F, 3.67600012F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 4.72399998F, 7.21000004F }, { 2.44799995F, 8.98400021F }, { -0.256999999F, 8.99400043F } });
            sink->AddBezier({ { -3.73399997F, 9.30000019F }, { -4.09600019F, 6.02199984F }, { -4.40999985F, 4.35599995F } });
            sink->AddBezier({ { -4.40999985F, 4.35599995F }, { -4.44099998F, 3.69199991F }, { -4.44099998F, 3.69199991F } });
            sink->AddBezier({ { -3.57800007F, -4.53999996F }, { -0.0289999992F, -6.38700008F }, { -0.0289999992F, -6.38700008F } });
            sink->AddBezier({ { -0.0289999992F, -6.38700008F }, { 2.75500011F, -4.78999996F }, { 4.72900009F, 3.67600012F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            FFHR(sink->Close());
            GeoSource* rawResult = new GeoSource(path.Get());
            result = rawResult;
            rawResult->Release();
            return result;
        }

        CanvasGeometry Geometry_44()
        {
            CanvasGeometry result;
            ComPtr<ID2D1PathGeometry> path;
            FFHR(_d2dFactory->CreatePathGeometry(&path));
            ComPtr<ID2D1GeometrySink> sink;
            FFHR(path->Open(&sink));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 4.704F, 3.13499999F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 4.78599977F, 7.46500015F }, { 2.56800008F, 9.46199989F }, { -0.136999995F, 9.47200012F } });
            sink->AddBezier({ { -3.61400008F, 9.77799988F }, { -4.33900023F, 5.86600018F }, { -4.65299988F, 4.19999981F } });
            sink->AddBezier({ { -4.65299988F, 4.19999981F }, { -4.65299988F, 4.16099977F }, { -4.65299988F, 4.16099977F } });
            sink->AddBezier({ { -3.90100002F, -3.3210001F }, { 0.495000005F, -7.1329999F }, { 0.495000005F, -7.1329999F } });
            sink->AddBezier({ { 0.495000005F, -7.1329999F }, { 2.22399998F, -3.3829999F }, { 4.704F, 3.13499999F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            FFHR(sink->Close());
            GeoSource* rawResult = new GeoSource(path.Get());
            result = rawResult;
            rawResult->Release();
            return result;
        }

        CanvasGeometry Geometry_45()
        {
            CanvasGeometry result;
            ComPtr<ID2D1PathGeometry> path;
            FFHR(_d2dFactory->CreatePathGeometry(&path));
            ComPtr<ID2D1GeometrySink> sink;
            FFHR(path->Open(&sink));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ -0.00100000005F, 4.01300001F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -1.08299994F, 4.01200008F }, { -1.95899999F, 3.13599992F }, { -1.96000004F, 2.0539999F } });
            sink->AddBezier({ { -1.50699997F, -0.0280000009F }, { -0.851000011F, -2.06100011F }, { -0.00100000005F, -4.01399994F } });
            sink->AddBezier({ { 0.851000011F, -2.05500007F }, { 1.50800002F, -0.0170000009F }, { 1.96000004F, 2.0710001F } });
            sink->AddBezier({ { 1.95099998F, 3.14599991F }, { 1.07500005F, 4.01399994F }, { -0.00100000005F, 4.01300001F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            FFHR(sink->Close());
            GeoSource* rawResult = new GeoSource(path.Get());
            result = rawResult;
            rawResult->Release();
            return result;
        }

        CanvasGeometry Geometry_46()
        {
            CanvasGeometry result;
            ComPtr<ID2D1PathGeometry> path;
            FFHR(_d2dFactory->CreatePathGeometry(&path));
            ComPtr<ID2D1GeometrySink> sink;
            FFHR(path->Open(&sink));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ -0.00100000005F, 4.01300001F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -1.08299994F, 4.01200008F }, { -1.95899999F, 3.13599992F }, { -1.96000004F, 2.0539999F } });
            sink->AddBezier({ { -1.50699997F, -0.0280000009F }, { -1.89600003F, -2.41100001F }, { -0.312999994F, -3.9519999F } });
            sink->AddBezier({ { 0.538999975F, -1.99300003F }, { 1.85500002F, -0.504000008F }, { 1.96000004F, 2.0710001F } });
            sink->AddBezier({ { 1.95099998F, 3.14599991F }, { 1.07500005F, 4.01399994F }, { -0.00100000005F, 4.01300001F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            FFHR(sink->Close());
            GeoSource* rawResult = new GeoSource(path.Get());
            result = rawResult;
            rawResult->Release();
            return result;
        }

        CanvasGeometry Geometry_47()
        {
            CanvasGeometry result;
            ComPtr<ID2D1PathGeometry> path;
            FFHR(_d2dFactory->CreatePathGeometry(&path));
            ComPtr<ID2D1GeometrySink> sink;
            FFHR(path->Open(&sink));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ -0.00100000005F, 4.01300001F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -1.08299994F, 4.01200008F }, { -1.95899999F, 3.13599992F }, { -1.96000004F, 2.0539999F } });
            sink->AddBezier({ { -1.50699997F, -0.0280000009F }, { -1.47500002F, -1.93599999F }, { -0.625F, -3.88899994F } });
            sink->AddBezier({ { 0.226999998F, -1.92999995F }, { 2.04200006F, -1.22300005F }, { 2.39700007F, 2.0710001F } });
            sink->AddBezier({ { 2.38800001F, 3.14599991F }, { 1.07500005F, 4.01399994F }, { -0.00100000005F, 4.01300001F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            FFHR(sink->Close());
            GeoSource* rawResult = new GeoSource(path.Get());
            result = rawResult;
            rawResult->Release();
            return result;
        }

        CanvasGeometry Geometry_48()
        {
            CanvasGeometry result;
            ComPtr<ID2D1PathGeometry> path;
            FFHR(_d2dFactory->CreatePathGeometry(&path));
            ComPtr<ID2D1GeometrySink> sink;
            FFHR(path->Open(&sink));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 0, 4.01300001F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -1.08200002F, 4.01200008F }, { -1.95899999F, 3.13599992F }, { -1.96000004F, 2.0539999F } });
            sink->AddBezier({ { -1.86500001F, -0.59799999F }, { -0.787999988F, -2.06100011F }, { 0.061999999F, -4.01399994F } });
            sink->AddBezier({ { 0.913999975F, -2.05500007F }, { 1.50800002F, -0.0170000009F }, { 1.96000004F, 2.0710001F } });
            sink->AddBezier({ { 1.95099998F, 3.14599991F }, { 1.07599998F, 4.01399994F }, { 0, 4.01300001F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            FFHR(sink->Close());
            GeoSource* rawResult = new GeoSource(path.Get());
            result = rawResult;
            rawResult->Release();
            return result;
        }

        CanvasGeometry Geometry_49()
        {
            CanvasGeometry result;
            ComPtr<ID2D1PathGeometry> path;
            FFHR(_d2dFactory->CreatePathGeometry(&path));
            ComPtr<ID2D1GeometrySink> sink;
            FFHR(path->Open(&sink));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ -0.00100000005F, 4.01300001F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -1.08299994F, 4.01200008F }, { -1.95899999F, 3.13599992F }, { -1.96000004F, 2.0539999F } });
            sink->AddBezier({ { -2.77099991F, -1.59800005F }, { -1.60099995F, -2.37400007F }, { -0.750999987F, -4.32700014F } });
            sink->AddBezier({ { 1.04100001F, -4.16099977F }, { 1.50800002F, -0.0170000009F }, { 1.96000004F, 2.0710001F } });
            sink->AddBezier({ { 1.95099998F, 3.14599991F }, { 1.07500005F, 4.01399994F }, { -0.00100000005F, 4.01300001F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            FFHR(sink->Close());
            GeoSource* rawResult = new GeoSource(path.Get());
            result = rawResult;
            rawResult->Release();
            return result;
        }

        CanvasGeometry Geometry_50()
        {
            CanvasGeometry result;
            ComPtr<ID2D1PathGeometry> path;
            FFHR(_d2dFactory->CreatePathGeometry(&path));
            ComPtr<ID2D1GeometrySink> sink;
            FFHR(path->Open(&sink));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 0.061999999F, 2.88800001F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -1.01999998F, 2.88700008F }, { -1.95899999F, 3.13599992F }, { -1.96000004F, 2.0539999F } });
            sink->AddBezier({ { -2.14599991F, 0.589999974F }, { -0.787999988F, -0.874000013F }, { 0.061999999F, -2.8269999F } });
            sink->AddBezier({ { 1.54100001F, -2.97300005F }, { 1.50800002F, -0.0170000009F }, { 1.96000004F, 2.0710001F } });
            sink->AddBezier({ { 1.95099998F, 3.14599991F }, { 1.13800001F, 2.88899994F }, { 0.061999999F, 2.88800001F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            FFHR(sink->Close());
            GeoSource* rawResult = new GeoSource(path.Get());
            result = rawResult;
            rawResult->Release();
            return result;
        }

        CanvasGeometry Geometry_51()
        {
            CanvasGeometry result;
            ComPtr<ID2D1PathGeometry> path;
            FFHR(_d2dFactory->CreatePathGeometry(&path));
            ComPtr<ID2D1GeometrySink> sink;
            FFHR(path->Open(&sink));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 0, 3.38800001F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -1.08200002F, 3.38700008F }, { -2.52099991F, 3.13599992F }, { -2.52200007F, 2.0539999F } });
            sink->AddBezier({ { -2.95799994F, -1.84800005F }, { -0.725000024F, -3.18600011F }, { 0.125F, -5.13899994F } });
            sink->AddBezier({ { 0.976999998F, -3.18000007F }, { 2.29200006F, -2.53500009F }, { 1.96000004F, 2.0710001F } });
            sink->AddBezier({ { 1.95099998F, 3.14599991F }, { 1.07599998F, 3.38899994F }, { 0, 3.38800001F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            FFHR(sink->Close());
            GeoSource* rawResult = new GeoSource(path.Get());
            result = rawResult;
            rawResult->Release();
            return result;
        }

        CanvasGeometry Geometry_52()
        {
            CanvasGeometry result;
            ComPtr<ID2D1PathGeometry> path;
            FFHR(_d2dFactory->CreatePathGeometry(&path));
            ComPtr<ID2D1GeometrySink> sink;
            FFHR(path->Open(&sink));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ -0.00100000005F, 4.01300001F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -1.08299994F, 4.01200008F }, { -1.95899999F, 3.13599992F }, { -1.96000004F, 2.0539999F } });
            sink->AddBezier({ { -1.50699997F, -0.0280000009F }, { -0.851000011F, -0.999000013F }, { -0.00100000005F, -2.9519999F } });
            sink->AddBezier({ { 0.851000011F, -0.992999971F }, { 1.66700006F, -2.16000009F }, { 1.96000004F, 2.0710001F } });
            sink->AddBezier({ { 1.95099998F, 3.14599991F }, { 1.07500005F, 4.01399994F }, { -0.00100000005F, 4.01300001F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            FFHR(sink->Close());
            GeoSource* rawResult = new GeoSource(path.Get());
            result = rawResult;
            rawResult->Release();
            return result;
        }

        StepEasingFunction^ HoldThenStepEasingFunction()
        {
            auto result = _holdThenStepEasingFunction = _c->CreateStepEasingFunction();
            result->IsFinalStepSingleFrame = true;
            return result;
        }

        InsetClip^ InsetClip()
        {
            auto result = _insetClip = _c->CreateInsetClip();
            return result;
        }

        LinearEasingFunction^ LinearEasingFunction()
        {
            return _linearEasingFunction = _c->CreateLinearEasingFunction();
        }

        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_00()
        {
            auto result = _c->CreatePathGeometry(CompositionPath_00());
            auto propertySet = result->Properties;
            propertySet->InsertScalar("TStart", 0);
            propertySet->InsertScalar("TEnd", 0);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Min(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimStart", _reusableExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Max(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimEnd", _reusableExpressionAnimation);
            result->StartAnimation("TStart", ScalarAnimation_0_to_1_00());
            auto controller = result->TryGetAnimationController("TStart");
            controller->Pause();
            controller->StartAnimation("Progress", ScalarExpressionAnimation());
            result->StartAnimation("TEnd", ScalarAnimation_0_to_1_01());
            controller = result->TryGetAnimationController("TEnd");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_01()
        {
            auto result = _c->CreatePathGeometry(CompositionPath_01());
            auto propertySet = result->Properties;
            propertySet->InsertScalar("TStart", 0);
            propertySet->InsertScalar("TEnd", 0);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Min(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimStart", _reusableExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Max(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimEnd", _reusableExpressionAnimation);
            result->StartAnimation("TStart", ScalarAnimation_0_to_1_02());
            auto controller = result->TryGetAnimationController("TStart");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            result->StartAnimation("TEnd", ScalarAnimation_0_to_1_03());
            controller = result->TryGetAnimationController("TEnd");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_02()
        {
            auto result = _c->CreatePathGeometry(CompositionPath_02());
            auto propertySet = result->Properties;
            propertySet->InsertScalar("TStart", 0);
            propertySet->InsertScalar("TEnd", 0);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Min(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimStart", _reusableExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Max(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimEnd", _reusableExpressionAnimation);
            result->StartAnimation("TStart", ScalarAnimation_0_to_1_04());
            auto controller = result->TryGetAnimationController("TStart");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            result->StartAnimation("TEnd", ScalarAnimation_0_to_1_05());
            controller = result->TryGetAnimationController("TEnd");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_03()
        {
            auto result = _c->CreatePathGeometry(CompositionPath_03());
            auto propertySet = result->Properties;
            propertySet->InsertScalar("TStart", 0);
            propertySet->InsertScalar("TEnd", 0);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Min(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimStart", _reusableExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Max(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimEnd", _reusableExpressionAnimation);
            result->StartAnimation("TStart", ScalarAnimation_0_to_1_06());
            auto controller = result->TryGetAnimationController("TStart");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            result->StartAnimation("TEnd", ScalarAnimation_0_to_1_07());
            controller = result->TryGetAnimationController("TEnd");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_04()
        {
            auto result = _c->CreatePathGeometry(CompositionPath_04());
            auto propertySet = result->Properties;
            propertySet->InsertScalar("TStart", 0);
            propertySet->InsertScalar("TEnd", 0);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Min(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimStart", _reusableExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Max(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimEnd", _reusableExpressionAnimation);
            result->StartAnimation("TStart", ScalarAnimation_0_to_1_08());
            auto controller = result->TryGetAnimationController("TStart");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            result->StartAnimation("TEnd", ScalarAnimation_0_to_1_09());
            controller = result->TryGetAnimationController("TEnd");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_05()
        {
            auto result = _c->CreatePathGeometry(CompositionPath_05());
            auto propertySet = result->Properties;
            propertySet->InsertScalar("TStart", 0);
            propertySet->InsertScalar("TEnd", 0);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Min(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimStart", _reusableExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Max(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimEnd", _reusableExpressionAnimation);
            result->StartAnimation("TStart", ScalarAnimation_0_to_1_10());
            auto controller = result->TryGetAnimationController("TStart");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            result->StartAnimation("TEnd", ScalarAnimation_0_to_1_11());
            controller = result->TryGetAnimationController("TEnd");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_06()
        {
            auto result = _c->CreatePathGeometry(CompositionPath_06());
            auto propertySet = result->Properties;
            propertySet->InsertScalar("TStart", 0);
            propertySet->InsertScalar("TEnd", 0);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Min(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimStart", _reusableExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Max(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimEnd", _reusableExpressionAnimation);
            result->StartAnimation("TStart", ScalarAnimation_0_to_1_12());
            auto controller = result->TryGetAnimationController("TStart");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            result->StartAnimation("TEnd", ScalarAnimation_0_to_1_13());
            controller = result->TryGetAnimationController("TEnd");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_07()
        {
            auto result = _c->CreatePathGeometry(_compositionPath_00);
            auto propertySet = result->Properties;
            propertySet->InsertScalar("TStart", 0);
            propertySet->InsertScalar("TEnd", 0);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Min(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimStart", _reusableExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Max(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimEnd", _reusableExpressionAnimation);
            result->StartAnimation("TStart", ScalarAnimation_0_to_1_14());
            auto controller = result->TryGetAnimationController("TStart");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            result->StartAnimation("TEnd", ScalarAnimation_0_to_1_15());
            controller = result->TryGetAnimationController("TEnd");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_08()
        {
            auto result = _c->CreatePathGeometry(_compositionPath_01);
            auto propertySet = result->Properties;
            propertySet->InsertScalar("TStart", 0);
            propertySet->InsertScalar("TEnd", 0);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Min(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimStart", _reusableExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Max(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimEnd", _reusableExpressionAnimation);
            result->StartAnimation("TStart", ScalarAnimation_0_to_1_16());
            auto controller = result->TryGetAnimationController("TStart");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            result->StartAnimation("TEnd", ScalarAnimation_0_to_1_17());
            controller = result->TryGetAnimationController("TEnd");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_09()
        {
            auto result = _c->CreatePathGeometry(CompositionPath_07());
            auto propertySet = result->Properties;
            propertySet->InsertScalar("TStart", 0);
            propertySet->InsertScalar("TEnd", 0);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Min(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimStart", _reusableExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Max(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimEnd", _reusableExpressionAnimation);
            result->StartAnimation("TStart", ScalarAnimation_0_to_1_18());
            auto controller = result->TryGetAnimationController("TStart");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            result->StartAnimation("TEnd", ScalarAnimation_0_to_1_19());
            controller = result->TryGetAnimationController("TEnd");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_10()
        {
            auto result = _c->CreatePathGeometry(CompositionPath_08());
            auto propertySet = result->Properties;
            propertySet->InsertScalar("TStart", 0);
            propertySet->InsertScalar("TEnd", 0);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Min(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimStart", _reusableExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Max(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimEnd", _reusableExpressionAnimation);
            result->StartAnimation("TStart", ScalarAnimation_0_to_1_20());
            auto controller = result->TryGetAnimationController("TStart");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            result->StartAnimation("TEnd", ScalarAnimation_0_to_1_21());
            controller = result->TryGetAnimationController("TEnd");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_11()
        {
            auto result = _c->CreatePathGeometry(CompositionPath_09());
            auto propertySet = result->Properties;
            propertySet->InsertScalar("TStart", 0);
            propertySet->InsertScalar("TEnd", 0);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Min(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimStart", _reusableExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Max(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimEnd", _reusableExpressionAnimation);
            result->StartAnimation("TStart", ScalarAnimation_0_to_1_22());
            auto controller = result->TryGetAnimationController("TStart");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            result->StartAnimation("TEnd", ScalarAnimation_0_to_1_23());
            controller = result->TryGetAnimationController("TEnd");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_12()
        {
            auto result = _c->CreatePathGeometry(_compositionPath_02);
            auto propertySet = result->Properties;
            propertySet->InsertScalar("TStart", 0);
            propertySet->InsertScalar("TEnd", 0);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Min(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimStart", _reusableExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Max(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimEnd", _reusableExpressionAnimation);
            result->StartAnimation("TStart", ScalarAnimation_0_to_1_24());
            auto controller = result->TryGetAnimationController("TStart");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            result->StartAnimation("TEnd", ScalarAnimation_0_to_1_25());
            controller = result->TryGetAnimationController("TEnd");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_13()
        {
            auto result = _c->CreatePathGeometry(_compositionPath_03);
            auto propertySet = result->Properties;
            propertySet->InsertScalar("TStart", 0);
            propertySet->InsertScalar("TEnd", 0);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Min(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimStart", _reusableExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Max(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimEnd", _reusableExpressionAnimation);
            result->StartAnimation("TStart", ScalarAnimation_0_to_1_26());
            auto controller = result->TryGetAnimationController("TStart");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            result->StartAnimation("TEnd", ScalarAnimation_0_to_1_27());
            controller = result->TryGetAnimationController("TEnd");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_14()
        {
            auto result = _c->CreatePathGeometry(CompositionPath_10());
            auto propertySet = result->Properties;
            propertySet->InsertScalar("TStart", 0);
            propertySet->InsertScalar("TEnd", 0);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Min(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimStart", _reusableExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Max(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimEnd", _reusableExpressionAnimation);
            result->StartAnimation("TStart", ScalarAnimation_0_to_1_28());
            auto controller = result->TryGetAnimationController("TStart");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            result->StartAnimation("TEnd", ScalarAnimation_0_to_1_29());
            controller = result->TryGetAnimationController("TEnd");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 2.PathGeometry
        CompositionPathGeometry^ PathGeometry_15()
        {
            auto result = _c->CreatePathGeometry(CompositionPath_11());
            auto propertySet = result->Properties;
            propertySet->InsertScalar("TStart", 0);
            propertySet->InsertScalar("TEnd", 0);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Min(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimStart", _reusableExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Max(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimEnd", _reusableExpressionAnimation);
            result->StartAnimation("TStart", ScalarAnimation_0_to_1_30());
            auto controller = result->TryGetAnimationController("TStart");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            result->StartAnimation("TEnd", ScalarAnimation_0_to_1_31());
            controller = result->TryGetAnimationController("TEnd");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_16()
        {
            auto result = _c->CreatePathGeometry(_compositionPath_11);
            auto propertySet = result->Properties;
            propertySet->InsertScalar("TStart", 0);
            propertySet->InsertScalar("TEnd", 0);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Min(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimStart", _reusableExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Max(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimEnd", _reusableExpressionAnimation);
            result->StartAnimation("TStart", _scalarAnimation_0_to_1_30);
            auto controller = result->TryGetAnimationController("TStart");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            result->StartAnimation("TEnd", _scalarAnimation_0_to_1_31);
            controller = result->TryGetAnimationController("TEnd");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_17()
        {
            auto result = _c->CreatePathGeometry(_compositionPath_04);
            auto propertySet = result->Properties;
            propertySet->InsertScalar("TStart", 0);
            propertySet->InsertScalar("TEnd", 0);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Min(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimStart", _reusableExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Max(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimEnd", _reusableExpressionAnimation);
            result->StartAnimation("TStart", ScalarAnimation_0_to_1_32());
            auto controller = result->TryGetAnimationController("TStart");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            result->StartAnimation("TEnd", ScalarAnimation_0_to_1_33());
            controller = result->TryGetAnimationController("TEnd");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_18()
        {
            auto result = _c->CreatePathGeometry(_compositionPath_05);
            auto propertySet = result->Properties;
            propertySet->InsertScalar("TStart", 0);
            propertySet->InsertScalar("TEnd", 0);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Min(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimStart", _reusableExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Max(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimEnd", _reusableExpressionAnimation);
            result->StartAnimation("TStart", ScalarAnimation_0_to_1_34());
            auto controller = result->TryGetAnimationController("TStart");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            result->StartAnimation("TEnd", ScalarAnimation_0_to_1_35());
            controller = result->TryGetAnimationController("TEnd");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Transforms for Null 130
        //   Transforms for Birthdaycake_v2_Fireworks_2
        //     Mask 1
        // Mask 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_19()
        {
            auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_12())));
            return result;
        }

        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_20()
        {
            auto result = _c->CreatePathGeometry(_compositionPath_06);
            auto propertySet = result->Properties;
            propertySet->InsertScalar("TStart", 0);
            propertySet->InsertScalar("TEnd", 0);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Min(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimStart", _reusableExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Max(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimEnd", _reusableExpressionAnimation);
            result->StartAnimation("TStart", ScalarAnimation_0_to_1_36());
            auto controller = result->TryGetAnimationController("TStart");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            result->StartAnimation("TEnd", ScalarAnimation_0_to_1_37());
            controller = result->TryGetAnimationController("TEnd");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_21()
        {
            auto result = _c->CreatePathGeometry(_compositionPath_00);
            auto propertySet = result->Properties;
            propertySet->InsertScalar("TStart", 0);
            propertySet->InsertScalar("TEnd", 0);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Min(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimStart", _reusableExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Max(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimEnd", _reusableExpressionAnimation);
            result->StartAnimation("TStart", ScalarAnimation_0_to_1_38());
            auto controller = result->TryGetAnimationController("TStart");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            result->StartAnimation("TEnd", ScalarAnimation_0_to_1_39());
            controller = result->TryGetAnimationController("TEnd");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_22()
        {
            auto result = _c->CreatePathGeometry(_compositionPath_01);
            auto propertySet = result->Properties;
            propertySet->InsertScalar("TStart", 0);
            propertySet->InsertScalar("TEnd", 0);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Min(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimStart", _reusableExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Max(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimEnd", _reusableExpressionAnimation);
            result->StartAnimation("TStart", ScalarAnimation_0_to_1_40());
            auto controller = result->TryGetAnimationController("TStart");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            result->StartAnimation("TEnd", ScalarAnimation_0_to_1_41());
            controller = result->TryGetAnimationController("TEnd");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_23()
        {
            auto result = _c->CreatePathGeometry(_compositionPath_07);
            auto propertySet = result->Properties;
            propertySet->InsertScalar("TStart", 0);
            propertySet->InsertScalar("TEnd", 0);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Min(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimStart", _reusableExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Max(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimEnd", _reusableExpressionAnimation);
            result->StartAnimation("TStart", ScalarAnimation_0_to_1_42());
            auto controller = result->TryGetAnimationController("TStart");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            result->StartAnimation("TEnd", ScalarAnimation_0_to_1_43());
            controller = result->TryGetAnimationController("TEnd");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_24()
        {
            auto result = _c->CreatePathGeometry(_compositionPath_08);
            auto propertySet = result->Properties;
            propertySet->InsertScalar("TStart", 0);
            propertySet->InsertScalar("TEnd", 0);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Min(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimStart", _reusableExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Max(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimEnd", _reusableExpressionAnimation);
            result->StartAnimation("TStart", ScalarAnimation_0_to_1_44());
            auto controller = result->TryGetAnimationController("TStart");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            result->StartAnimation("TEnd", ScalarAnimation_0_to_1_45());
            controller = result->TryGetAnimationController("TEnd");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_25()
        {
            auto result = _c->CreatePathGeometry(_compositionPath_09);
            auto propertySet = result->Properties;
            propertySet->InsertScalar("TStart", 0);
            propertySet->InsertScalar("TEnd", 0);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Min(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimStart", _reusableExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Max(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimEnd", _reusableExpressionAnimation);
            result->StartAnimation("TStart", ScalarAnimation_0_to_1_46());
            auto controller = result->TryGetAnimationController("TStart");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            result->StartAnimation("TEnd", ScalarAnimation_0_to_1_47());
            controller = result->TryGetAnimationController("TEnd");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_26()
        {
            auto result = _c->CreatePathGeometry(_compositionPath_02);
            auto propertySet = result->Properties;
            propertySet->InsertScalar("TStart", 0);
            propertySet->InsertScalar("TEnd", 0);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Min(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimStart", _reusableExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Max(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimEnd", _reusableExpressionAnimation);
            result->StartAnimation("TStart", ScalarAnimation_0_to_1_48());
            auto controller = result->TryGetAnimationController("TStart");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            result->StartAnimation("TEnd", ScalarAnimation_0_to_1_49());
            controller = result->TryGetAnimationController("TEnd");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_27()
        {
            auto result = _c->CreatePathGeometry(_compositionPath_03);
            auto propertySet = result->Properties;
            propertySet->InsertScalar("TStart", 0);
            propertySet->InsertScalar("TEnd", 0);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Min(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimStart", _reusableExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Max(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimEnd", _reusableExpressionAnimation);
            result->StartAnimation("TStart", ScalarAnimation_0_to_1_50());
            auto controller = result->TryGetAnimationController("TStart");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            result->StartAnimation("TEnd", ScalarAnimation_0_to_1_51());
            controller = result->TryGetAnimationController("TEnd");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_28()
        {
            auto result = _c->CreatePathGeometry(_compositionPath_10);
            auto propertySet = result->Properties;
            propertySet->InsertScalar("TStart", 0);
            propertySet->InsertScalar("TEnd", 0);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Min(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimStart", _reusableExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Max(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimEnd", _reusableExpressionAnimation);
            result->StartAnimation("TStart", ScalarAnimation_0_to_1_52());
            auto controller = result->TryGetAnimationController("TStart");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            result->StartAnimation("TEnd", ScalarAnimation_0_to_1_53());
            controller = result->TryGetAnimationController("TEnd");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 2.PathGeometry
        CompositionPathGeometry^ PathGeometry_29()
        {
            auto result = _c->CreatePathGeometry(_compositionPath_11);
            auto propertySet = result->Properties;
            propertySet->InsertScalar("TStart", 0);
            propertySet->InsertScalar("TEnd", 0);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Min(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimStart", _reusableExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Max(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimEnd", _reusableExpressionAnimation);
            result->StartAnimation("TStart", ScalarAnimation_0_to_1_54());
            auto controller = result->TryGetAnimationController("TStart");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            result->StartAnimation("TEnd", ScalarAnimation_0_to_1_55());
            controller = result->TryGetAnimationController("TEnd");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_30()
        {
            auto result = _c->CreatePathGeometry(_compositionPath_11);
            auto propertySet = result->Properties;
            propertySet->InsertScalar("TStart", 0);
            propertySet->InsertScalar("TEnd", 0);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Min(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimStart", _reusableExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Max(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimEnd", _reusableExpressionAnimation);
            result->StartAnimation("TStart", _scalarAnimation_0_to_1_54);
            auto controller = result->TryGetAnimationController("TStart");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            result->StartAnimation("TEnd", _scalarAnimation_0_to_1_55);
            controller = result->TryGetAnimationController("TEnd");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_31()
        {
            auto result = _c->CreatePathGeometry(_compositionPath_04);
            auto propertySet = result->Properties;
            propertySet->InsertScalar("TStart", 0);
            propertySet->InsertScalar("TEnd", 0);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Min(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimStart", _reusableExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Max(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimEnd", _reusableExpressionAnimation);
            result->StartAnimation("TStart", ScalarAnimation_0_to_1_56());
            auto controller = result->TryGetAnimationController("TStart");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            result->StartAnimation("TEnd", ScalarAnimation_0_to_1_57());
            controller = result->TryGetAnimationController("TEnd");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_32()
        {
            auto result = _c->CreatePathGeometry(_compositionPath_05);
            auto propertySet = result->Properties;
            propertySet->InsertScalar("TStart", 0);
            propertySet->InsertScalar("TEnd", 0);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Min(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimStart", _reusableExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Max(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimEnd", _reusableExpressionAnimation);
            result->StartAnimation("TStart", ScalarAnimation_0_to_1_58());
            auto controller = result->TryGetAnimationController("TStart");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            result->StartAnimation("TEnd", ScalarAnimation_0_to_1_59());
            controller = result->TryGetAnimationController("TEnd");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_33()
        {
            auto result = _c->CreatePathGeometry(_compositionPath_06);
            auto propertySet = result->Properties;
            propertySet->InsertScalar("TStart", 0);
            propertySet->InsertScalar("TEnd", 0);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Min(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimStart", _reusableExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Max(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimEnd", _reusableExpressionAnimation);
            result->StartAnimation("TStart", ScalarAnimation_0_to_1_60());
            auto controller = result->TryGetAnimationController("TStart");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            result->StartAnimation("TEnd", ScalarAnimation_0_to_1_61());
            controller = result->TryGetAnimationController("TEnd");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_34()
        {
            auto result = _c->CreatePathGeometry(_compositionPath_00);
            auto propertySet = result->Properties;
            propertySet->InsertScalar("TStart", 0);
            propertySet->InsertScalar("TEnd", 0);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Min(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimStart", _reusableExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Max(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimEnd", _reusableExpressionAnimation);
            result->StartAnimation("TStart", ScalarAnimation_0_to_1_62());
            auto controller = result->TryGetAnimationController("TStart");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            result->StartAnimation("TEnd", ScalarAnimation_0_to_1_63());
            controller = result->TryGetAnimationController("TEnd");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_35()
        {
            auto result = _c->CreatePathGeometry(_compositionPath_01);
            auto propertySet = result->Properties;
            propertySet->InsertScalar("TStart", 0);
            propertySet->InsertScalar("TEnd", 0);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Min(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimStart", _reusableExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Max(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimEnd", _reusableExpressionAnimation);
            result->StartAnimation("TStart", ScalarAnimation_0_to_1_64());
            auto controller = result->TryGetAnimationController("TStart");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            result->StartAnimation("TEnd", ScalarAnimation_0_to_1_65());
            controller = result->TryGetAnimationController("TEnd");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_36()
        {
            auto result = _c->CreatePathGeometry(_compositionPath_07);
            auto propertySet = result->Properties;
            propertySet->InsertScalar("TStart", 0);
            propertySet->InsertScalar("TEnd", 0);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Min(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimStart", _reusableExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Max(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimEnd", _reusableExpressionAnimation);
            result->StartAnimation("TStart", ScalarAnimation_0_to_1_66());
            auto controller = result->TryGetAnimationController("TStart");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            result->StartAnimation("TEnd", ScalarAnimation_0_to_1_67());
            controller = result->TryGetAnimationController("TEnd");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_37()
        {
            auto result = _c->CreatePathGeometry(_compositionPath_08);
            auto propertySet = result->Properties;
            propertySet->InsertScalar("TStart", 0);
            propertySet->InsertScalar("TEnd", 0);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Min(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimStart", _reusableExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Max(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimEnd", _reusableExpressionAnimation);
            result->StartAnimation("TStart", ScalarAnimation_0_to_1_68());
            auto controller = result->TryGetAnimationController("TStart");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            result->StartAnimation("TEnd", ScalarAnimation_0_to_1_69());
            controller = result->TryGetAnimationController("TEnd");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_38()
        {
            auto result = _c->CreatePathGeometry(_compositionPath_09);
            auto propertySet = result->Properties;
            propertySet->InsertScalar("TStart", 0);
            propertySet->InsertScalar("TEnd", 0);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Min(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimStart", _reusableExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Max(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimEnd", _reusableExpressionAnimation);
            result->StartAnimation("TStart", ScalarAnimation_0_to_1_70());
            auto controller = result->TryGetAnimationController("TStart");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            result->StartAnimation("TEnd", ScalarAnimation_0_to_1_71());
            controller = result->TryGetAnimationController("TEnd");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_39()
        {
            auto result = _c->CreatePathGeometry(_compositionPath_02);
            auto propertySet = result->Properties;
            propertySet->InsertScalar("TStart", 0);
            propertySet->InsertScalar("TEnd", 0);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Min(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimStart", _reusableExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Max(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimEnd", _reusableExpressionAnimation);
            result->StartAnimation("TStart", ScalarAnimation_0_to_1_72());
            auto controller = result->TryGetAnimationController("TStart");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            result->StartAnimation("TEnd", ScalarAnimation_0_to_1_73());
            controller = result->TryGetAnimationController("TEnd");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_40()
        {
            auto result = _c->CreatePathGeometry(_compositionPath_03);
            auto propertySet = result->Properties;
            propertySet->InsertScalar("TStart", 0);
            propertySet->InsertScalar("TEnd", 0);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Min(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimStart", _reusableExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Max(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimEnd", _reusableExpressionAnimation);
            result->StartAnimation("TStart", ScalarAnimation_0_to_1_74());
            auto controller = result->TryGetAnimationController("TStart");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            result->StartAnimation("TEnd", ScalarAnimation_0_to_1_75());
            controller = result->TryGetAnimationController("TEnd");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_41()
        {
            auto result = _c->CreatePathGeometry(_compositionPath_10);
            auto propertySet = result->Properties;
            propertySet->InsertScalar("TStart", 0);
            propertySet->InsertScalar("TEnd", 0);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Min(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimStart", _reusableExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Max(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimEnd", _reusableExpressionAnimation);
            result->StartAnimation("TStart", ScalarAnimation_0_to_1_76());
            auto controller = result->TryGetAnimationController("TStart");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            result->StartAnimation("TEnd", ScalarAnimation_0_to_1_77());
            controller = result->TryGetAnimationController("TEnd");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 2.PathGeometry
        CompositionPathGeometry^ PathGeometry_42()
        {
            auto result = _c->CreatePathGeometry(_compositionPath_11);
            auto propertySet = result->Properties;
            propertySet->InsertScalar("TStart", 0);
            propertySet->InsertScalar("TEnd", 0);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Min(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimStart", _reusableExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Max(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimEnd", _reusableExpressionAnimation);
            result->StartAnimation("TStart", ScalarAnimation_0_to_1_78());
            auto controller = result->TryGetAnimationController("TStart");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            result->StartAnimation("TEnd", ScalarAnimation_0_to_1_79());
            controller = result->TryGetAnimationController("TEnd");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_43()
        {
            auto result = _c->CreatePathGeometry(_compositionPath_11);
            auto propertySet = result->Properties;
            propertySet->InsertScalar("TStart", 0);
            propertySet->InsertScalar("TEnd", 0);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Min(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimStart", _reusableExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Max(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimEnd", _reusableExpressionAnimation);
            result->StartAnimation("TStart", _scalarAnimation_0_to_1_78);
            auto controller = result->TryGetAnimationController("TStart");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            result->StartAnimation("TEnd", _scalarAnimation_0_to_1_79);
            controller = result->TryGetAnimationController("TEnd");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_44()
        {
            auto result = _c->CreatePathGeometry(_compositionPath_04);
            auto propertySet = result->Properties;
            propertySet->InsertScalar("TStart", 0);
            propertySet->InsertScalar("TEnd", 0);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Min(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimStart", _reusableExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Max(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimEnd", _reusableExpressionAnimation);
            result->StartAnimation("TStart", ScalarAnimation_0_to_1_80());
            auto controller = result->TryGetAnimationController("TStart");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            result->StartAnimation("TEnd", ScalarAnimation_0_to_1_81());
            controller = result->TryGetAnimationController("TEnd");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_45()
        {
            auto result = _c->CreatePathGeometry(_compositionPath_05);
            auto propertySet = result->Properties;
            propertySet->InsertScalar("TStart", 0);
            propertySet->InsertScalar("TEnd", 0);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Min(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimStart", _reusableExpressionAnimation);
            _reusableExpressionAnimation->ClearAllParameters();
            _reusableExpressionAnimation->Expression = "Max(my.TStart, my.TEnd)";
            _reusableExpressionAnimation->SetReferenceParameter("my", result);
            result->StartAnimation("TrimEnd", _reusableExpressionAnimation);
            result->StartAnimation("TStart", ScalarAnimation_0_to_1_82());
            auto controller = result->TryGetAnimationController("TStart");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            result->StartAnimation("TEnd", ScalarAnimation_0_to_1_83());
            controller = result->TryGetAnimationController("TEnd");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_46()
        {
            auto result = _pathGeometry_46 = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_13())));
            return result;
        }

        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_47()
        {
            auto result = _pathGeometry_47 = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_14())));
            return result;
        }

        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_48()
        {
            auto result = _pathGeometry_48 = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_15())));
            return result;
        }

        // Layer (Shape): Cake 2
        //   Path 1
        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_49()
        {
            auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_16())));
            result->StartAnimation("Path", PathKeyFrameAnimation_0());
            auto controller = result->TryGetAnimationController("Path");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Layer (Shape): Cake 2
        //   Path 1
        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_50()
        {
            auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_20())));
            return result;
        }

        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_51()
        {
            auto result = _pathGeometry_51 = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_21())));
            return result;
        }

        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_52()
        {
            auto result = _pathGeometry_52 = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_22())));
            return result;
        }

        // Layer (Shape): Cake 2
        //   Path 1
        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_53()
        {
            auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_23())));
            return result;
        }

        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_54()
        {
            auto result = _pathGeometry_54 = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_24())));
            return result;
        }

        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_55()
        {
            auto result = _pathGeometry_55 = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_25())));
            return result;
        }

        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_56()
        {
            auto result = _pathGeometry_56 = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_26())));
            return result;
        }

        // Transforms: Sprinkles 2
        //   Path 1
        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_57()
        {
            auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_27())));
            return result;
        }

        // Transforms: Sprinkles 5
        //   Path 1
        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_58()
        {
            auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_28())));
            return result;
        }

        // Layer (Shape): Candle
        //   Path 1
        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_59()
        {
            auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_29())));
            return result;
        }

        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_60()
        {
            auto result = _pathGeometry_60 = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_30())));
            return result;
        }

        // Layer (Shape): Flame
        //   Path 1
        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_61()
        {
            auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_31())));
            result->StartAnimation("Path", PathKeyFrameAnimation_1());
            auto controller = result->TryGetAnimationController("Path");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Layer (Shape): Flame
        //   Path 1
        // Path 1.PathGeometry
        CompositionPathGeometry^ PathGeometry_62()
        {
            auto result = _c->CreatePathGeometry(CompositionPath_45());
            result->StartAnimation("Path", PathKeyFrameAnimation_2());
            auto controller = result->TryGetAnimationController("Path");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Layer (Shape): Cake 2
        //   Path 1
        //     Path 1.PathGeometry
        // Path
        PathKeyFrameAnimation^ PathKeyFrameAnimation_0()
        {
            auto result = _c->CreatePathKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, CompositionPath_17(), _linearEasingFunction);
            result->InsertKeyFrame(0.583333313F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_18())), CubicBezierEasingFunction_08());
            result->InsertKeyFrame(0.75F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_19())), CubicBezierEasingFunction_09());
            result->InsertKeyFrame(0.983333349F, _compositionPath_17, _cubicBezierEasingFunction_07);
            return result;
        }

        // Layer (Shape): Flame
        //   Path 1
        //     Path 1.PathGeometry
        // Path
        PathKeyFrameAnimation^ PathKeyFrameAnimation_1()
        {
            auto result = _c->CreatePathKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_32())), _linearEasingFunction);
            result->InsertKeyFrame(0.0833333358F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_33())), _cubicBezierEasingFunction_00);
            result->InsertKeyFrame(0.166666672F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_34())), _cubicBezierEasingFunction_00);
            result->InsertKeyFrame(0.25F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_35())), _cubicBezierEasingFunction_00);
            result->InsertKeyFrame(0.333333343F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_36())), _cubicBezierEasingFunction_00);
            result->InsertKeyFrame(0.416666657F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_37())), _cubicBezierEasingFunction_00);
            result->InsertKeyFrame(0.5F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_38())), _cubicBezierEasingFunction_00);
            result->InsertKeyFrame(0.583333313F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_39())), _cubicBezierEasingFunction_00);
            result->InsertKeyFrame(0.666666687F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_40())), _cubicBezierEasingFunction_00);
            result->InsertKeyFrame(0.75F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_41())), _cubicBezierEasingFunction_00);
            result->InsertKeyFrame(0.833333313F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_42())), _cubicBezierEasingFunction_00);
            result->InsertKeyFrame(0.916666687F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_43())), _cubicBezierEasingFunction_00);
            result->InsertKeyFrame(0.983333349F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_44())), _cubicBezierEasingFunction_00);
            return result;
        }

        // Layer (Shape): Flame
        //   Path 1
        //     Path 1.PathGeometry
        // Path
        PathKeyFrameAnimation^ PathKeyFrameAnimation_2()
        {
            auto result = _c->CreatePathKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, _compositionPath_45, _linearEasingFunction);
            result->InsertKeyFrame(0.0833333358F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_46())), _cubicBezierEasingFunction_00);
            result->InsertKeyFrame(0.166666672F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_47())), _cubicBezierEasingFunction_00);
            result->InsertKeyFrame(0.25F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_48())), _cubicBezierEasingFunction_00);
            result->InsertKeyFrame(0.333333343F, _compositionPath_45, _cubicBezierEasingFunction_00);
            result->InsertKeyFrame(0.416666657F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_49())), _cubicBezierEasingFunction_00);
            result->InsertKeyFrame(0.5F, _compositionPath_45, _cubicBezierEasingFunction_00);
            result->InsertKeyFrame(0.583333313F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_50())), _cubicBezierEasingFunction_00);
            result->InsertKeyFrame(0.666666687F, _compositionPath_45, _cubicBezierEasingFunction_00);
            result->InsertKeyFrame(0.75F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_51())), _cubicBezierEasingFunction_00);
            result->InsertKeyFrame(0.833333313F, _compositionPath_45, _cubicBezierEasingFunction_00);
            result->InsertKeyFrame(0.916666687F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_52())), _cubicBezierEasingFunction_00);
            result->InsertKeyFrame(0.983333349F, _compositionPath_45, _cubicBezierEasingFunction_00);
            return result;
        }

        // The root of the composition.
        ContainerVisual^ Root()
        {
            auto result = _root = _c->CreateContainerVisual();
            auto propertySet = result->Properties;
            propertySet->InsertScalar("Progress", 0);
            propertySet->InsertScalar("t0", 0);
            propertySet->InsertScalar("t1", 0);
            propertySet->InsertScalar("t2", 0);
            propertySet->InsertScalar("t3", 0);
            propertySet->InsertScalar("t4", 0);
            propertySet->InsertScalar("t5", 0);
            propertySet->InsertScalar("t6", 0);
            auto children = result->Children;
            children->InsertAtTop(ContainerVisual_01());
            result->StartAnimation("t0", ScalarAnimation_0_to_1_84());
            auto controller = result->TryGetAnimationController("t0");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            result->StartAnimation("t1", ScalarAnimation_0_to_1_85());
            controller = result->TryGetAnimationController("t1");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            result->StartAnimation("t2", ScalarAnimation_0_to_1_86());
            controller = result->TryGetAnimationController("t2");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            result->StartAnimation("t3", ScalarAnimation_0_to_1_87());
            controller = result->TryGetAnimationController("t3");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            result->StartAnimation("t4", ScalarAnimation_0_to_1_88());
            controller = result->TryGetAnimationController("t4");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            result->StartAnimation("t5", ScalarAnimation_0_to_1_89());
            controller = result->TryGetAnimationController("t5");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            result->StartAnimation("t6", _scalarAnimation_0_to_1_84);
            controller = result->TryGetAnimationController("t6");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // TStart
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_00()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, StepThenHoldEasingFunction());
            result->InsertKeyFrame(0.583333313F, 0, LinearEasingFunction());
            result->InsertKeyFrame(0.649999976F, 1, CubicBezierEasingFunction_00());
            return result;
        }

        // TEnd
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_01()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.566666663F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.649999976F, 1, CubicBezierEasingFunction_01());
            return result;
        }

        // TStart
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_02()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.466666669F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.600000024F, 1, _cubicBezierEasingFunction_00);
            return result;
        }

        // TEnd
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_03()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.449999988F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.600000024F, 1, _cubicBezierEasingFunction_01);
            return result;
        }

        // TStart
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_04()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.533333361F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.566666663F, 1, _cubicBezierEasingFunction_00);
            return result;
        }

        // TEnd
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_05()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.516666651F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.566666663F, 1, _cubicBezierEasingFunction_01);
            return result;
        }

        // TStart
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_06()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.550000012F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.583333313F, 1, _cubicBezierEasingFunction_00);
            return result;
        }

        // TEnd
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_07()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.533333361F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.583333313F, 1, _cubicBezierEasingFunction_01);
            return result;
        }

        // TStart
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_08()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.5F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.566666663F, 1, _cubicBezierEasingFunction_00);
            return result;
        }

        // TEnd
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_09()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.483333319F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.566666663F, 1, _cubicBezierEasingFunction_01);
            return result;
        }

        // TStart
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_10()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.483333319F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.533333361F, 1, _cubicBezierEasingFunction_00);
            return result;
        }

        // TEnd
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_11()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.449999988F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.533333361F, 1, _cubicBezierEasingFunction_01);
            return result;
        }

        // TStart
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_12()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.516666651F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.666666687F, 1, _cubicBezierEasingFunction_00);
            return result;
        }

        // TEnd
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_13()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.483333319F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.666666687F, 1, _cubicBezierEasingFunction_01);
            return result;
        }

        // TStart
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_14()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.566666663F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.666666687F, 1, _cubicBezierEasingFunction_00);
            return result;
        }

        // TEnd
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_15()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.533333361F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.666666687F, 1, _cubicBezierEasingFunction_01);
            return result;
        }

        // TStart
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_16()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.449999988F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.616666675F, 1, _cubicBezierEasingFunction_00);
            return result;
        }

        // TEnd
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_17()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.416666657F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.616666675F, 1, _cubicBezierEasingFunction_01);
            return result;
        }

        // TStart
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_18()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.433333337F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.483333319F, 1, _cubicBezierEasingFunction_00);
            return result;
        }

        // TEnd
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_19()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.400000006F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.483333319F, 1, _cubicBezierEasingFunction_01);
            return result;
        }

        // TStart
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_20()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.466666669F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.533333361F, 1, _cubicBezierEasingFunction_00);
            return result;
        }

        // TEnd
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_21()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.433333337F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.533333361F, 1, _cubicBezierEasingFunction_01);
            return result;
        }

        // TStart
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_22()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.449999988F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.533333361F, 1, _cubicBezierEasingFunction_00);
            return result;
        }

        // TEnd
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_23()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.416666657F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.533333361F, 1, _cubicBezierEasingFunction_01);
            return result;
        }

        // TStart
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_24()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.5F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.583333313F, 1, _cubicBezierEasingFunction_00);
            return result;
        }

        // TEnd
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_25()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.483333319F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.583333313F, 1, _cubicBezierEasingFunction_01);
            return result;
        }

        // TStart
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_26()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.566666663F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.649999976F, 1, _cubicBezierEasingFunction_00);
            return result;
        }

        // TEnd
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_27()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.550000012F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.649999976F, 1, _cubicBezierEasingFunction_01);
            return result;
        }

        // TStart
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_28()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.533333361F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.616666675F, 1, _cubicBezierEasingFunction_00);
            return result;
        }

        // TEnd
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_29()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.516666651F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.616666675F, 1, _cubicBezierEasingFunction_01);
            return result;
        }

        // TStart
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_30()
        {
            auto result = _scalarAnimation_0_to_1_30 = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.516666651F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.600000024F, 1, _cubicBezierEasingFunction_00);
            return result;
        }

        // TEnd
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_31()
        {
            auto result = _scalarAnimation_0_to_1_31 = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.483333319F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.600000024F, 1, _cubicBezierEasingFunction_01);
            return result;
        }

        // TStart
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_32()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.449999988F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.550000012F, 1, _cubicBezierEasingFunction_00);
            return result;
        }

        // TEnd
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_33()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.449999988F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.550000012F, 1, _cubicBezierEasingFunction_01);
            return result;
        }

        // TStart
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_34()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.433333337F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.516666651F, 1, _cubicBezierEasingFunction_00);
            return result;
        }

        // TEnd
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_35()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.416666657F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.516666651F, 1, _cubicBezierEasingFunction_01);
            return result;
        }

        // TStart
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_36()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.349999994F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.516666651F, 1, CubicBezierEasingFunction_03());
            return result;
        }

        // TEnd
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_37()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.300000012F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.516666651F, 1, _cubicBezierEasingFunction_01);
            return result;
        }

        // TStart
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_38()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.400000006F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.516666651F, 1, CubicBezierEasingFunction_04());
            return result;
        }

        // TEnd
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_39()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.349999994F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.516666651F, 1, _cubicBezierEasingFunction_01);
            return result;
        }

        // TStart
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_40()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.283333331F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.466666669F, 1, _cubicBezierEasingFunction_03);
            return result;
        }

        // TEnd
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_41()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.233333334F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.466666669F, 1, _cubicBezierEasingFunction_01);
            return result;
        }

        // TStart
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_42()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.266666681F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.333333343F, 1, _cubicBezierEasingFunction_03);
            return result;
        }

        // TEnd
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_43()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.216666669F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.333333343F, 1, _cubicBezierEasingFunction_01);
            return result;
        }

        // TStart
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_44()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.300000012F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.383333325F, 1, _cubicBezierEasingFunction_03);
            return result;
        }

        // TEnd
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_45()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.25F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.383333325F, 1, _cubicBezierEasingFunction_01);
            return result;
        }

        // TStart
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_46()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.283333331F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.349999994F, 1, _cubicBezierEasingFunction_02);
            return result;
        }

        // TEnd
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_47()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.233333334F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.349999994F, 1, _cubicBezierEasingFunction_01);
            return result;
        }

        // TStart
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_48()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.333333343F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.400000006F, 1, _cubicBezierEasingFunction_03);
            return result;
        }

        // TEnd
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_49()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.300000012F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.400000006F, 1, _cubicBezierEasingFunction_01);
            return result;
        }

        // TStart
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_50()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.400000006F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.466666669F, 1, _cubicBezierEasingFunction_04);
            return result;
        }

        // TEnd
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_51()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.366666675F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.466666669F, 1, _cubicBezierEasingFunction_01);
            return result;
        }

        // TStart
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_52()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.366666675F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.433333337F, 1, _cubicBezierEasingFunction_04);
            return result;
        }

        // TEnd
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_53()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.333333343F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.433333337F, 1, _cubicBezierEasingFunction_01);
            return result;
        }

        // TStart
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_54()
        {
            auto result = _scalarAnimation_0_to_1_54 = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.349999994F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.416666657F, 1, _cubicBezierEasingFunction_03);
            return result;
        }

        // TEnd
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_55()
        {
            auto result = _scalarAnimation_0_to_1_55 = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.300000012F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.416666657F, 1, _cubicBezierEasingFunction_01);
            return result;
        }

        // TStart
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_56()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.316666663F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.433333337F, 1, _cubicBezierEasingFunction_03);
            return result;
        }

        // TEnd
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_57()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.266666681F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.433333337F, 1, _cubicBezierEasingFunction_01);
            return result;
        }

        // TStart
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_58()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.300000012F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.400000006F, 1, _cubicBezierEasingFunction_03);
            return result;
        }

        // TEnd
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_59()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.233333334F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.400000006F, 1, _cubicBezierEasingFunction_01);
            return result;
        }

        // TStart
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_60()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.200000003F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.383333325F, 1, _cubicBezierEasingFunction_03);
            return result;
        }

        // TEnd
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_61()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.150000006F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.383333325F, 1, _cubicBezierEasingFunction_01);
            return result;
        }

        // TStart
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_62()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.25F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.383333325F, 1, _cubicBezierEasingFunction_04);
            return result;
        }

        // TEnd
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_63()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.200000003F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.383333325F, 1, _cubicBezierEasingFunction_01);
            return result;
        }

        // TStart
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_64()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.13333334F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.333333343F, 1, _cubicBezierEasingFunction_03);
            return result;
        }

        // TEnd
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_65()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.0833333358F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.333333343F, 1, _cubicBezierEasingFunction_01);
            return result;
        }

        // TStart
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_66()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.116666667F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.200000003F, 1, _cubicBezierEasingFunction_03);
            return result;
        }

        // TEnd
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_67()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.0666666701F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.200000003F, 1, _cubicBezierEasingFunction_01);
            return result;
        }

        // TStart
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_68()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.150000006F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.25F, 1, _cubicBezierEasingFunction_03);
            return result;
        }

        // TEnd
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_69()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.100000001F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.25F, 1, _cubicBezierEasingFunction_01);
            return result;
        }

        // TStart
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_70()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.13333334F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.200000003F, 1, _cubicBezierEasingFunction_02);
            return result;
        }

        // TEnd
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_71()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.0833333358F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.200000003F, 1, _cubicBezierEasingFunction_01);
            return result;
        }

        // TStart
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_72()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.183333337F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.25F, 1, _cubicBezierEasingFunction_03);
            return result;
        }

        // TEnd
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_73()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.150000006F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.25F, 1, _cubicBezierEasingFunction_01);
            return result;
        }

        // TStart
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_74()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.25F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.316666663F, 1, _cubicBezierEasingFunction_04);
            return result;
        }

        // TEnd
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_75()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.216666669F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.316666663F, 1, _cubicBezierEasingFunction_01);
            return result;
        }

        // TStart
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_76()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.216666669F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.283333331F, 1, _cubicBezierEasingFunction_04);
            return result;
        }

        // TEnd
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_77()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.183333337F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.283333331F, 1, _cubicBezierEasingFunction_01);
            return result;
        }

        // TStart
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_78()
        {
            auto result = _scalarAnimation_0_to_1_78 = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.200000003F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.266666681F, 1, _cubicBezierEasingFunction_03);
            return result;
        }

        // TEnd
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_79()
        {
            auto result = _scalarAnimation_0_to_1_79 = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.150000006F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.266666681F, 1, _cubicBezierEasingFunction_01);
            return result;
        }

        // TStart
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_80()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.166666672F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.300000012F, 1, _cubicBezierEasingFunction_03);
            return result;
        }

        // TEnd
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_81()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.116666667F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.300000012F, 1, _cubicBezierEasingFunction_01);
            return result;
        }

        // TStart
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_82()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.150000006F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.266666681F, 1, _cubicBezierEasingFunction_03);
            return result;
        }

        // TEnd
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_83()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.0833333358F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.266666681F, 1, _cubicBezierEasingFunction_01);
            return result;
        }

        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_84()
        {
            auto result = _scalarAnimation_0_to_1_84 = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0.583333433F, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.749999881F, 1, CubicBezierEasingFunction_10());
            result->InsertKeyFrame(0.816666782F, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.899999917F, 1, _cubicBezierEasingFunction_05);
            return result;
        }

        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_85()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0.600000143F, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.766666591F, 1, _cubicBezierEasingFunction_10);
            result->InsertKeyFrame(0.833333433F, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.916666567F, 1, _cubicBezierEasingFunction_05);
            return result;
        }

        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_86()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0.616666794F, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.783333242F, 1, _cubicBezierEasingFunction_10);
            result->InsertKeyFrame(0.850000143F, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.899999917F, 1, _cubicBezierEasingFunction_05);
            return result;
        }

        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_87()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0.583333433F, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.749999881F, 1, _cubicBezierEasingFunction_10);
            result->InsertKeyFrame(0.816666782F, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.916666567F, 1, _cubicBezierEasingFunction_05);
            return result;
        }

        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_88()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0.600000143F, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.766666591F, 1, _cubicBezierEasingFunction_10);
            result->InsertKeyFrame(0.833333433F, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.899999917F, 1, _cubicBezierEasingFunction_05);
            return result;
        }

        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_89()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0.616666794F, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.783333242F, 1, _cubicBezierEasingFunction_10);
            result->InsertKeyFrame(0.850000143F, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.916666567F, 1, _cubicBezierEasingFunction_05);
            return result;
        }

        // Path 1
        // StrokeThickness
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_2_00()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.449999988F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.600000024F, 2, _cubicBezierEasingFunction_02);
            return result;
        }

        // Path 1
        // StrokeThickness
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_2_01()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.516666651F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.566666663F, 2, _cubicBezierEasingFunction_02);
            return result;
        }

        // Path 1
        // StrokeThickness
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_2_02()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.483333319F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.666666687F, 2, _cubicBezierEasingFunction_02);
            return result;
        }

        // Path 1
        // StrokeThickness
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_2_03()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.533333361F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.666666687F, 2, _cubicBezierEasingFunction_02);
            return result;
        }

        // Path 1
        // StrokeThickness
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_2_04()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.483333319F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.583333313F, 2, _cubicBezierEasingFunction_02);
            return result;
        }

        // Path 1
        // StrokeThickness
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_2_05()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.550000012F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.649999976F, 2, _cubicBezierEasingFunction_02);
            return result;
        }

        // Path 1
        // StrokeThickness
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_2_06()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.516666651F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.616666675F, 2, _cubicBezierEasingFunction_02);
            return result;
        }

        // StrokeThickness
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_2_07()
        {
            auto result = _scalarAnimation_0_to_2_07 = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.483333319F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.600000024F, 2, _cubicBezierEasingFunction_02);
            return result;
        }

        // Path 1
        // StrokeThickness
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_2_08()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.449999988F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.550000012F, 2, _cubicBezierEasingFunction_02);
            return result;
        }

        // Path 1
        // StrokeThickness
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_2_09()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.416666657F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.516666651F, 2, _cubicBezierEasingFunction_02);
            return result;
        }

        // Path 1
        // StrokeThickness
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_2_10()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.300000012F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.400000006F, 2, _cubicBezierEasingFunction_02);
            return result;
        }

        // Path 1
        // StrokeThickness
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_2_11()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.150000006F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.25F, 2, _cubicBezierEasingFunction_02);
            return result;
        }

        // Path 1
        // StrokeThickness
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_3_00()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.566666663F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.649999976F, 3, CubicBezierEasingFunction_02());
            return result;
        }

        // Path 1
        // StrokeThickness
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_3_01()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.533333361F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.583333313F, 3, _cubicBezierEasingFunction_02);
            return result;
        }

        // Path 1
        // StrokeThickness
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_3_02()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.483333319F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.566666663F, 3, _cubicBezierEasingFunction_02);
            return result;
        }

        // Path 1
        // StrokeThickness
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_3_03()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.449999988F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.533333361F, 3, _cubicBezierEasingFunction_02);
            return result;
        }

        // Path 1
        // StrokeThickness
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_3_04()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.416666657F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.616666675F, 3, _cubicBezierEasingFunction_02);
            return result;
        }

        // Path 1
        // StrokeThickness
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_3_05()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.400000006F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.483333319F, 3, _cubicBezierEasingFunction_02);
            return result;
        }

        // Path 1
        // StrokeThickness
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_3_06()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.433333337F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.533333361F, 3, _cubicBezierEasingFunction_02);
            return result;
        }

        // Path 1
        // StrokeThickness
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_3_07()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.416666657F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.533333361F, 3, _cubicBezierEasingFunction_02);
            return result;
        }

        // Path 1
        // StrokeThickness
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_3_08()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.300000012F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.516666651F, 3, _cubicBezierEasingFunction_02);
            return result;
        }

        // Path 1
        // StrokeThickness
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_3_09()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.349999994F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.516666651F, 3, _cubicBezierEasingFunction_02);
            return result;
        }

        // Path 1
        // StrokeThickness
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_3_10()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.25F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.383333325F, 3, _cubicBezierEasingFunction_02);
            return result;
        }

        // Path 1
        // StrokeThickness
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_3_11()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.233333334F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.349999994F, 3, _cubicBezierEasingFunction_02);
            return result;
        }

        // Path 1
        // StrokeThickness
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_3_12()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.366666675F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.466666669F, 3, _cubicBezierEasingFunction_02);
            return result;
        }

        // Path 1
        // StrokeThickness
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_3_13()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.333333343F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.433333337F, 3, _cubicBezierEasingFunction_02);
            return result;
        }

        // StrokeThickness
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_3_14()
        {
            auto result = _scalarAnimation_0_to_3_14 = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.300000012F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.416666657F, 3, _cubicBezierEasingFunction_02);
            return result;
        }

        // Path 1
        // StrokeThickness
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_3_15()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.266666681F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.433333337F, 3, _cubicBezierEasingFunction_02);
            return result;
        }

        // Path 1
        // StrokeThickness
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_3_16()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.233333334F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.400000006F, 3, _cubicBezierEasingFunction_02);
            return result;
        }

        // Path 1
        // StrokeThickness
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_3_17()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.150000006F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.383333325F, 3, _cubicBezierEasingFunction_02);
            return result;
        }

        // Path 1
        // StrokeThickness
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_3_18()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.200000003F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.383333325F, 3, _cubicBezierEasingFunction_02);
            return result;
        }

        // Path 1
        // StrokeThickness
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_3_19()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.100000001F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.25F, 3, _cubicBezierEasingFunction_02);
            return result;
        }

        // Path 1
        // StrokeThickness
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_3_20()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.0833333358F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.200000003F, 3, _cubicBezierEasingFunction_02);
            return result;
        }

        // Path 1
        // StrokeThickness
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_3_21()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.216666669F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.316666663F, 3, _cubicBezierEasingFunction_02);
            return result;
        }

        // Path 1
        // StrokeThickness
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_3_22()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.183333337F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.283333331F, 3, _cubicBezierEasingFunction_02);
            return result;
        }

        // StrokeThickness
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_3_23()
        {
            auto result = _scalarAnimation_0_to_3_23 = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.150000006F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.266666681F, 3, _cubicBezierEasingFunction_02);
            return result;
        }

        // Path 1
        // StrokeThickness
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_3_24()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.116666667F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.300000012F, 3, _cubicBezierEasingFunction_02);
            return result;
        }

        // Path 1
        // StrokeThickness
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_3_25()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.0833333358F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.266666681F, 3, _cubicBezierEasingFunction_02);
            return result;
        }

        // Path 1
        // StrokeThickness
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_5_0()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.233333334F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.466666669F, 5, _cubicBezierEasingFunction_02);
            return result;
        }

        // Path 1
        // StrokeThickness
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_5_1()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.216666669F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.333333343F, 5, _cubicBezierEasingFunction_02);
            return result;
        }

        // Path 1
        // StrokeThickness
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_5_2()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.0833333358F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.333333343F, 5, _cubicBezierEasingFunction_02);
            return result;
        }

        // Path 1
        // StrokeThickness
        ScalarKeyFrameAnimation^ ScalarAnimation_0_to_5_3()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.0666666701F, 0, _linearEasingFunction);
            result->InsertKeyFrame(0.200000003F, 5, _cubicBezierEasingFunction_02);
            return result;
        }

        // Layer (Shape): Shape Layer 8
        ScalarKeyFrameAnimation^ ScalarAnimation_1_to_0_00()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0.566666663F, 1, HoldThenStepEasingFunction());
            result->InsertKeyFrame(0.649999976F, 0, _holdThenStepEasingFunction);
            return result;
        }

        // Layer (Shape): Shape Layer 7
        ScalarKeyFrameAnimation^ ScalarAnimation_1_to_0_01()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0.449999988F, 1, _holdThenStepEasingFunction);
            result->InsertKeyFrame(0.600000024F, 0, _holdThenStepEasingFunction);
            return result;
        }

        // Layer (Shape): Shape Layer 12
        ScalarKeyFrameAnimation^ ScalarAnimation_1_to_0_02()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0.516666651F, 1, _holdThenStepEasingFunction);
            result->InsertKeyFrame(0.583333313F, 0, _holdThenStepEasingFunction);
            return result;
        }

        // Layer (Shape): Shape Layer 11
        ScalarKeyFrameAnimation^ ScalarAnimation_1_to_0_03()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0.533333361F, 1, _holdThenStepEasingFunction);
            result->InsertKeyFrame(0.600000024F, 0, _holdThenStepEasingFunction);
            return result;
        }

        // Layer (Shape): Shape Layer 2
        ScalarKeyFrameAnimation^ ScalarAnimation_1_to_0_04()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0.483333319F, 1, _holdThenStepEasingFunction);
            result->InsertKeyFrame(0.566666663F, 0, _holdThenStepEasingFunction);
            return result;
        }

        // Layer (Shape): Shape Layer 1
        ScalarKeyFrameAnimation^ ScalarAnimation_1_to_0_05()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0.449999988F, 1, _holdThenStepEasingFunction);
            result->InsertKeyFrame(0.533333361F, 0, _holdThenStepEasingFunction);
            return result;
        }

        ScalarKeyFrameAnimation^ ScalarAnimation_1_to_0_06()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0.433333337F, 1, _holdThenStepEasingFunction);
            result->InsertKeyFrame(0.933333337F, 0, _holdThenStepEasingFunction);
            return result;
        }

        // Layer (Shape): Shape Layer 9
        ScalarKeyFrameAnimation^ ScalarAnimation_1_to_0_07()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0.483333319F, 1, _holdThenStepEasingFunction);
            result->InsertKeyFrame(0.666666687F, 0, _holdThenStepEasingFunction);
            return result;
        }

        // Layer (Shape): Shape Layer 8
        ScalarKeyFrameAnimation^ ScalarAnimation_1_to_0_08()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0.533333361F, 1, _holdThenStepEasingFunction);
            result->InsertKeyFrame(0.683333337F, 0, _holdThenStepEasingFunction);
            return result;
        }

        // Layer (Shape): Shape Layer 7
        ScalarKeyFrameAnimation^ ScalarAnimation_1_to_0_09()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0.416666657F, 1, _holdThenStepEasingFunction);
            result->InsertKeyFrame(0.633333325F, 0, _holdThenStepEasingFunction);
            return result;
        }

        // Layer (Shape): Shape Layer 6
        ScalarKeyFrameAnimation^ ScalarAnimation_1_to_0_10()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0.400000006F, 1, _holdThenStepEasingFunction);
            result->InsertKeyFrame(0.5F, 0, _holdThenStepEasingFunction);
            return result;
        }

        // Layer (Shape): Shape Layer 5
        ScalarKeyFrameAnimation^ ScalarAnimation_1_to_0_11()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0.433333337F, 1, _holdThenStepEasingFunction);
            result->InsertKeyFrame(0.550000012F, 0, _holdThenStepEasingFunction);
            return result;
        }

        // Layer (Shape): Shape Layer 4
        ScalarKeyFrameAnimation^ ScalarAnimation_1_to_0_12()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0.416666657F, 1, _holdThenStepEasingFunction);
            result->InsertKeyFrame(0.550000012F, 0, _holdThenStepEasingFunction);
            return result;
        }

        // Layer (Shape): Shape Layer 12
        ScalarKeyFrameAnimation^ ScalarAnimation_1_to_0_13()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0.483333319F, 1, _holdThenStepEasingFunction);
            result->InsertKeyFrame(0.600000024F, 0, _holdThenStepEasingFunction);
            return result;
        }

        // Layer (Shape): Shape Layer 11
        ScalarKeyFrameAnimation^ ScalarAnimation_1_to_0_14()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0.550000012F, 1, _holdThenStepEasingFunction);
            result->InsertKeyFrame(0.666666687F, 0, _holdThenStepEasingFunction);
            return result;
        }

        // Layer (Shape): Shape Layer 10
        ScalarKeyFrameAnimation^ ScalarAnimation_1_to_0_15()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0.516666651F, 1, _holdThenStepEasingFunction);
            result->InsertKeyFrame(0.633333325F, 0, _holdThenStepEasingFunction);
            return result;
        }

        // Layer (Shape): Shape Layer 3
        ScalarKeyFrameAnimation^ ScalarAnimation_1_to_0_16()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0.483333319F, 1, _holdThenStepEasingFunction);
            result->InsertKeyFrame(0.616666675F, 0, _holdThenStepEasingFunction);
            return result;
        }

        // Layer (Shape): Shape Layer 2
        ScalarKeyFrameAnimation^ ScalarAnimation_1_to_0_17()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0.449999988F, 1, _holdThenStepEasingFunction);
            result->InsertKeyFrame(0.550000012F, 0, _holdThenStepEasingFunction);
            return result;
        }

        // Layer (Shape): Shape Layer 1
        ScalarKeyFrameAnimation^ ScalarAnimation_1_to_0_18()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0.416666657F, 1, _holdThenStepEasingFunction);
            result->InsertKeyFrame(0.516666651F, 0, _holdThenStepEasingFunction);
            return result;
        }

        ScalarKeyFrameAnimation^ ScalarAnimation_1_to_0_19()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0.400000006F, 1, _holdThenStepEasingFunction);
            result->InsertKeyFrame(0.899999976F, 0, _holdThenStepEasingFunction);
            return result;
        }

        // Layer (Shape): Shape Layer 9
        ScalarKeyFrameAnimation^ ScalarAnimation_1_to_0_20()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0.300000012F, 1, _holdThenStepEasingFunction);
            result->InsertKeyFrame(0.516666651F, 0, _holdThenStepEasingFunction);
            return result;
        }

        // Layer (Shape): Shape Layer 8
        ScalarKeyFrameAnimation^ ScalarAnimation_1_to_0_21()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0.349999994F, 1, _holdThenStepEasingFunction);
            result->InsertKeyFrame(0.533333361F, 0, _holdThenStepEasingFunction);
            return result;
        }

        // Layer (Shape): Shape Layer 7
        ScalarKeyFrameAnimation^ ScalarAnimation_1_to_0_22()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0.233333334F, 1, _holdThenStepEasingFunction);
            result->InsertKeyFrame(0.483333319F, 0, _holdThenStepEasingFunction);
            return result;
        }

        // Layer (Shape): Shape Layer 6
        ScalarKeyFrameAnimation^ ScalarAnimation_1_to_0_23()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0.216666669F, 1, _holdThenStepEasingFunction);
            result->InsertKeyFrame(0.349999994F, 0, _holdThenStepEasingFunction);
            return result;
        }

        // Layer (Shape): Shape Layer 5
        ScalarKeyFrameAnimation^ ScalarAnimation_1_to_0_24()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0.25F, 1, _holdThenStepEasingFunction);
            result->InsertKeyFrame(0.400000006F, 0, _holdThenStepEasingFunction);
            return result;
        }

        // Layer (Shape): Shape Layer 4
        ScalarKeyFrameAnimation^ ScalarAnimation_1_to_0_25()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0.233333334F, 1, _holdThenStepEasingFunction);
            result->InsertKeyFrame(0.366666675F, 0, _holdThenStepEasingFunction);
            return result;
        }

        // Layer (Shape): Shape Layer 12
        ScalarKeyFrameAnimation^ ScalarAnimation_1_to_0_26()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0.300000012F, 1, _holdThenStepEasingFunction);
            result->InsertKeyFrame(0.416666657F, 0, _holdThenStepEasingFunction);
            return result;
        }

        // Layer (Shape): Shape Layer 11
        ScalarKeyFrameAnimation^ ScalarAnimation_1_to_0_27()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0.366666675F, 1, _holdThenStepEasingFunction);
            result->InsertKeyFrame(0.483333319F, 0, _holdThenStepEasingFunction);
            return result;
        }

        // Layer (Shape): Shape Layer 10
        ScalarKeyFrameAnimation^ ScalarAnimation_1_to_0_28()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0.333333343F, 1, _holdThenStepEasingFunction);
            result->InsertKeyFrame(0.449999988F, 0, _holdThenStepEasingFunction);
            return result;
        }

        // Layer (Shape): Shape Layer 3
        ScalarKeyFrameAnimation^ ScalarAnimation_1_to_0_29()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0.300000012F, 1, _holdThenStepEasingFunction);
            result->InsertKeyFrame(0.433333337F, 0, _holdThenStepEasingFunction);
            return result;
        }

        // Layer (Shape): Shape Layer 2
        ScalarKeyFrameAnimation^ ScalarAnimation_1_to_0_30()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0.266666681F, 1, _holdThenStepEasingFunction);
            result->InsertKeyFrame(0.433333337F, 0, _holdThenStepEasingFunction);
            return result;
        }

        // Layer (Shape): Shape Layer 1
        ScalarKeyFrameAnimation^ ScalarAnimation_1_to_0_31()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0.233333334F, 1, _holdThenStepEasingFunction);
            result->InsertKeyFrame(0.400000006F, 0, _holdThenStepEasingFunction);
            return result;
        }

        ScalarKeyFrameAnimation^ ScalarAnimation_1_to_0_32()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0.216666669F, 1, _holdThenStepEasingFunction);
            result->InsertKeyFrame(0.716666639F, 0, _holdThenStepEasingFunction);
            return result;
        }

        // Layer (Shape): Shape Layer 9
        ScalarKeyFrameAnimation^ ScalarAnimation_1_to_0_33()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0.150000006F, 1, _holdThenStepEasingFunction);
            result->InsertKeyFrame(0.383333325F, 0, _holdThenStepEasingFunction);
            return result;
        }

        // Layer (Shape): Shape Layer 8
        ScalarKeyFrameAnimation^ ScalarAnimation_1_to_0_34()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0.200000003F, 1, _holdThenStepEasingFunction);
            result->InsertKeyFrame(0.400000006F, 0, _holdThenStepEasingFunction);
            return result;
        }

        // Layer (Shape): Shape Layer 7
        ScalarKeyFrameAnimation^ ScalarAnimation_1_to_0_35()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0.0833333358F, 1, _holdThenStepEasingFunction);
            result->InsertKeyFrame(0.349999994F, 0, _holdThenStepEasingFunction);
            return result;
        }

        // Layer (Shape): Shape Layer 6
        ScalarKeyFrameAnimation^ ScalarAnimation_1_to_0_36()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0.0666666701F, 1, _holdThenStepEasingFunction);
            result->InsertKeyFrame(0.216666669F, 0, _holdThenStepEasingFunction);
            return result;
        }

        // Layer (Shape): Shape Layer 5
        ScalarKeyFrameAnimation^ ScalarAnimation_1_to_0_37()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0.100000001F, 1, _holdThenStepEasingFunction);
            result->InsertKeyFrame(0.266666681F, 0, _holdThenStepEasingFunction);
            return result;
        }

        // Layer (Shape): Shape Layer 4
        ScalarKeyFrameAnimation^ ScalarAnimation_1_to_0_38()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0.0833333358F, 1, _holdThenStepEasingFunction);
            result->InsertKeyFrame(0.216666669F, 0, _holdThenStepEasingFunction);
            return result;
        }

        // Layer (Shape): Shape Layer 12
        ScalarKeyFrameAnimation^ ScalarAnimation_1_to_0_39()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0.150000006F, 1, _holdThenStepEasingFunction);
            result->InsertKeyFrame(0.266666681F, 0, _holdThenStepEasingFunction);
            return result;
        }

        // Layer (Shape): Shape Layer 11
        ScalarKeyFrameAnimation^ ScalarAnimation_1_to_0_40()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0.216666669F, 1, _holdThenStepEasingFunction);
            result->InsertKeyFrame(0.333333343F, 0, _holdThenStepEasingFunction);
            return result;
        }

        // Layer (Shape): Shape Layer 10
        ScalarKeyFrameAnimation^ ScalarAnimation_1_to_0_41()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0.183333337F, 1, _holdThenStepEasingFunction);
            result->InsertKeyFrame(0.300000012F, 0, _holdThenStepEasingFunction);
            return result;
        }

        // Layer (Shape): Shape Layer 3
        ScalarKeyFrameAnimation^ ScalarAnimation_1_to_0_42()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0.150000006F, 1, _holdThenStepEasingFunction);
            result->InsertKeyFrame(0.283333331F, 0, _holdThenStepEasingFunction);
            return result;
        }

        // Layer (Shape): Shape Layer 2
        ScalarKeyFrameAnimation^ ScalarAnimation_1_to_0_43()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0.116666667F, 1, _holdThenStepEasingFunction);
            result->InsertKeyFrame(0.300000012F, 0, _holdThenStepEasingFunction);
            return result;
        }

        // Layer (Shape): Shape Layer 1
        ScalarKeyFrameAnimation^ ScalarAnimation_1_to_0_44()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0.0833333358F, 1, _holdThenStepEasingFunction);
            result->InsertKeyFrame(0.266666681F, 0, _holdThenStepEasingFunction);
            return result;
        }

        ScalarKeyFrameAnimation^ ScalarAnimation_1_to_0_45()
        {
            auto result = _c->CreateScalarKeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0.0666666701F, 1, _holdThenStepEasingFunction);
            result->InsertKeyFrame(0.566666663F, 0, _holdThenStepEasingFunction);
            return result;
        }

        ExpressionAnimation^ ScalarExpressionAnimation()
        {
            auto result = _scalarExpressionAnimation = _c->CreateExpressionAnimation();
            result->SetReferenceParameter("_", _root);
            result->Expression = "_.Progress";
            return result;
        }

        // Transforms for Null 130
        //   Transforms for Birthdaycake_v2_Fireworks_4
        ShapeVisual^ ShapeVisual_0()
        {
            auto result = _c->CreateShapeVisual();
            result->Size = { 96, 96 };
            auto shapes = result->Shapes;
            // Layer (Shape): Shape Layer 8
            shapes->Append(ContainerShape_000());
            // Layer (Shape): Shape Layer 7
            shapes->Append(ContainerShape_002());
            // Layer (Shape): Shape Layer 12
            shapes->Append(ContainerShape_004());
            // Layer (Shape): Shape Layer 11
            shapes->Append(ContainerShape_006());
            // Layer (Shape): Shape Layer 2
            shapes->Append(ContainerShape_008());
            // Layer (Shape): Shape Layer 1
            shapes->Append(ContainerShape_010());
            return result;
        }

        // Transforms for Null 130
        //   Transforms for Birthdaycake_v2_Fireworks_3
        ShapeVisual^ ShapeVisual_1()
        {
            auto result = _c->CreateShapeVisual();
            result->Size = { 96, 96 };
            auto shapes = result->Shapes;
            // Layer (Shape): Shape Layer 9
            shapes->Append(ContainerShape_012());
            // Layer (Shape): Shape Layer 8
            shapes->Append(ContainerShape_014());
            // Layer (Shape): Shape Layer 7
            shapes->Append(ContainerShape_016());
            // Layer (Shape): Shape Layer 6
            shapes->Append(ContainerShape_018());
            // Layer (Shape): Shape Layer 5
            shapes->Append(ContainerShape_020());
            // Layer (Shape): Shape Layer 4
            shapes->Append(ContainerShape_022());
            // Layer (Shape): Shape Layer 12
            shapes->Append(ContainerShape_024());
            // Layer (Shape): Shape Layer 11
            shapes->Append(ContainerShape_026());
            // Layer (Shape): Shape Layer 10
            shapes->Append(ContainerShape_028());
            // Layer (Shape): Shape Layer 3
            shapes->Append(ContainerShape_030());
            // Layer (Shape): Shape Layer 2
            shapes->Append(ContainerShape_032());
            // Layer (Shape): Shape Layer 1
            shapes->Append(ContainerShape_034());
            return result;
        }

        // Transforms for Null 130
        //   Transforms for Birthdaycake_v2_Fireworks_2
        ShapeVisual^ ShapeVisual_2()
        {
            auto result = _c->CreateShapeVisual();
            result->Size = { 96, 96 };
            auto shapes = result->Shapes;
            // Layer (Shape): Shape Layer 9
            shapes->Append(ContainerShape_036());
            // Layer (Shape): Shape Layer 8
            shapes->Append(ContainerShape_038());
            // Layer (Shape): Shape Layer 7
            shapes->Append(ContainerShape_040());
            // Layer (Shape): Shape Layer 6
            shapes->Append(ContainerShape_042());
            // Layer (Shape): Shape Layer 5
            shapes->Append(ContainerShape_044());
            // Layer (Shape): Shape Layer 4
            shapes->Append(ContainerShape_046());
            // Layer (Shape): Shape Layer 12
            shapes->Append(ContainerShape_048());
            // Layer (Shape): Shape Layer 11
            shapes->Append(ContainerShape_050());
            // Layer (Shape): Shape Layer 10
            shapes->Append(ContainerShape_052());
            // Layer (Shape): Shape Layer 3
            shapes->Append(ContainerShape_054());
            // Layer (Shape): Shape Layer 2
            shapes->Append(ContainerShape_056());
            // Layer (Shape): Shape Layer 1
            shapes->Append(ContainerShape_058());
            return result;
        }

        // Transforms for Null 130
        //   Transforms for Birthdaycake_v2_Fireworks_1
        ShapeVisual^ ShapeVisual_3()
        {
            auto result = _c->CreateShapeVisual();
            result->Size = { 96, 96 };
            auto shapes = result->Shapes;
            // Layer (Shape): Shape Layer 9
            shapes->Append(ContainerShape_060());
            // Layer (Shape): Shape Layer 8
            shapes->Append(ContainerShape_062());
            // Layer (Shape): Shape Layer 7
            shapes->Append(ContainerShape_064());
            // Layer (Shape): Shape Layer 6
            shapes->Append(ContainerShape_066());
            // Layer (Shape): Shape Layer 5
            shapes->Append(ContainerShape_068());
            // Layer (Shape): Shape Layer 4
            shapes->Append(ContainerShape_070());
            // Layer (Shape): Shape Layer 12
            shapes->Append(ContainerShape_072());
            // Layer (Shape): Shape Layer 11
            shapes->Append(ContainerShape_074());
            // Layer (Shape): Shape Layer 10
            shapes->Append(ContainerShape_076());
            // Layer (Shape): Shape Layer 3
            shapes->Append(ContainerShape_078());
            // Layer (Shape): Shape Layer 2
            shapes->Append(ContainerShape_080());
            // Layer (Shape): Shape Layer 1
            shapes->Append(ContainerShape_082());
            return result;
        }

        // Layer (PreComp): 01_BirthdayCake_96x96
        //   Transforms for 01_BirthdayCake_96x96
        ShapeVisual^ ShapeVisual_4()
        {
            auto result = _c->CreateShapeVisual();
            result->Size = { 96, 96 };
            auto shapes = result->Shapes;
            // Layer (Shape): Cake
            shapes->Append(ContainerShape_084());
            // Layer (Shape): Cake 2
            shapes->Append(ContainerShape_085());
            // Layer (Shape): Sprinkles 2
            shapes->Append(ContainerShape_086());
            // Layer (Shape): Sprinkles 3
            shapes->Append(ContainerShape_088());
            // Layer (Shape): Sprinkles 4
            shapes->Append(ContainerShape_090());
            // Layer (Shape): Sprinkles 5
            shapes->Append(ContainerShape_092());
            // Layer (Shape): Sprinkles 6
            shapes->Append(ContainerShape_094());
            // Layer (Shape): Sprinkles 7
            shapes->Append(ContainerShape_096());
            // Layer (Shape): Sprinkles 8
            shapes->Append(ContainerShape_098());
            // Layer (Shape): Candle
            shapes->Append(ContainerShape_100());
            // Layer (Shape): Flame
            shapes->Append(ContainerShape_101());
            return result;
        }

        // Path 1
        CompositionSpriteShape^ SpriteShape_00()
        {
            auto result = _c->CreateSpriteShape();
            result->Geometry = PathGeometry_00();
            result->StrokeBrush = ColorBrush_AlmostOrange_FFFFB901();
            result->StrokeDashCap = CompositionStrokeCap::Round;
            result->StrokeEndCap = CompositionStrokeCap::Round;
            result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
            result->StrokeStartCap = CompositionStrokeCap::Round;
            result->StrokeMiterLimit = 4;
            result->StrokeThickness = 0;
            result->StartAnimation("StrokeThickness", ScalarAnimation_0_to_3_00());
            auto controller = result->TryGetAnimationController("StrokeThickness");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1
        CompositionSpriteShape^ SpriteShape_01()
        {
            auto result = _c->CreateSpriteShape();
            result->Geometry = PathGeometry_01();
            result->StrokeBrush = ColorBrush_AlmostDodgerBlue_FF0177D9();
            result->StrokeDashCap = CompositionStrokeCap::Round;
            result->StrokeEndCap = CompositionStrokeCap::Round;
            result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
            result->StrokeStartCap = CompositionStrokeCap::Round;
            result->StrokeMiterLimit = 4;
            result->StrokeThickness = 0;
            result->StartAnimation("StrokeThickness", ScalarAnimation_0_to_2_00());
            auto controller = result->TryGetAnimationController("StrokeThickness");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1
        CompositionSpriteShape^ SpriteShape_02()
        {
            auto result = _c->CreateSpriteShape();
            result->Geometry = PathGeometry_02();
            result->StrokeBrush = ColorBrush_AlmostSpringGreen_FF01CC68();
            result->StrokeDashCap = CompositionStrokeCap::Round;
            result->StrokeEndCap = CompositionStrokeCap::Round;
            result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
            result->StrokeStartCap = CompositionStrokeCap::Round;
            result->StrokeMiterLimit = 4;
            result->StrokeThickness = 0;
            result->StartAnimation("StrokeThickness", ScalarAnimation_0_to_2_01());
            auto controller = result->TryGetAnimationController("StrokeThickness");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1
        CompositionSpriteShape^ SpriteShape_03()
        {
            auto result = _c->CreateSpriteShape();
            result->Geometry = PathGeometry_03();
            result->StrokeBrush = ColorBrush_AlmostTomato_FFFD4341();
            result->StrokeDashCap = CompositionStrokeCap::Round;
            result->StrokeEndCap = CompositionStrokeCap::Round;
            result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
            result->StrokeStartCap = CompositionStrokeCap::Round;
            result->StrokeMiterLimit = 4;
            result->StrokeThickness = 0;
            result->StartAnimation("StrokeThickness", ScalarAnimation_0_to_3_01());
            auto controller = result->TryGetAnimationController("StrokeThickness");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1
        CompositionSpriteShape^ SpriteShape_04()
        {
            auto result = _c->CreateSpriteShape();
            result->Geometry = PathGeometry_04();
            result->StrokeBrush = _colorBrush_AlmostOrange_FFFFB901;
            result->StrokeDashCap = CompositionStrokeCap::Round;
            result->StrokeEndCap = CompositionStrokeCap::Round;
            result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
            result->StrokeStartCap = CompositionStrokeCap::Round;
            result->StrokeMiterLimit = 4;
            result->StrokeThickness = 0;
            result->StartAnimation("StrokeThickness", ScalarAnimation_0_to_3_02());
            auto controller = result->TryGetAnimationController("StrokeThickness");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1
        CompositionSpriteShape^ SpriteShape_05()
        {
            auto result = _c->CreateSpriteShape();
            result->Geometry = PathGeometry_05();
            result->StrokeBrush = _colorBrush_AlmostDodgerBlue_FF0177D9;
            result->StrokeDashCap = CompositionStrokeCap::Round;
            result->StrokeEndCap = CompositionStrokeCap::Round;
            result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
            result->StrokeStartCap = CompositionStrokeCap::Round;
            result->StrokeMiterLimit = 4;
            result->StrokeThickness = 0;
            result->StartAnimation("StrokeThickness", ScalarAnimation_0_to_3_03());
            auto controller = result->TryGetAnimationController("StrokeThickness");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1
        CompositionSpriteShape^ SpriteShape_06()
        {
            auto result = _c->CreateSpriteShape();
            result->Geometry = PathGeometry_06();
            result->StrokeBrush = _colorBrush_AlmostDodgerBlue_FF0177D9;
            result->StrokeDashCap = CompositionStrokeCap::Round;
            result->StrokeEndCap = CompositionStrokeCap::Round;
            result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
            result->StrokeStartCap = CompositionStrokeCap::Round;
            result->StrokeMiterLimit = 4;
            result->StrokeThickness = 0;
            result->StartAnimation("StrokeThickness", ScalarAnimation_0_to_2_02());
            auto controller = result->TryGetAnimationController("StrokeThickness");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1
        CompositionSpriteShape^ SpriteShape_07()
        {
            auto result = _c->CreateSpriteShape();
            result->Geometry = PathGeometry_07();
            result->StrokeBrush = _colorBrush_AlmostTomato_FFFD4341;
            result->StrokeDashCap = CompositionStrokeCap::Round;
            result->StrokeEndCap = CompositionStrokeCap::Round;
            result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
            result->StrokeStartCap = CompositionStrokeCap::Round;
            result->StrokeMiterLimit = 4;
            result->StrokeThickness = 0;
            result->StartAnimation("StrokeThickness", ScalarAnimation_0_to_2_03());
            auto controller = result->TryGetAnimationController("StrokeThickness");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1
        CompositionSpriteShape^ SpriteShape_08()
        {
            auto result = _c->CreateSpriteShape();
            result->Geometry = PathGeometry_08();
            result->StrokeBrush = _colorBrush_AlmostOrange_FFFFB901;
            result->StrokeDashCap = CompositionStrokeCap::Round;
            result->StrokeEndCap = CompositionStrokeCap::Round;
            result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
            result->StrokeStartCap = CompositionStrokeCap::Round;
            result->StrokeMiterLimit = 4;
            result->StrokeThickness = 0;
            result->StartAnimation("StrokeThickness", ScalarAnimation_0_to_3_04());
            auto controller = result->TryGetAnimationController("StrokeThickness");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1
        CompositionSpriteShape^ SpriteShape_09()
        {
            auto result = _c->CreateSpriteShape();
            result->Geometry = PathGeometry_09();
            result->StrokeBrush = ColorBrush_AlmostOlive_FF7EBA00();
            result->StrokeDashCap = CompositionStrokeCap::Round;
            result->StrokeEndCap = CompositionStrokeCap::Round;
            result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
            result->StrokeStartCap = CompositionStrokeCap::Round;
            result->StrokeMiterLimit = 4;
            result->StrokeThickness = 0;
            result->StartAnimation("StrokeThickness", ScalarAnimation_0_to_3_05());
            auto controller = result->TryGetAnimationController("StrokeThickness");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1
        CompositionSpriteShape^ SpriteShape_10()
        {
            auto result = _c->CreateSpriteShape();
            result->Geometry = PathGeometry_10();
            result->StrokeBrush = _colorBrush_AlmostDodgerBlue_FF0177D9;
            result->StrokeDashCap = CompositionStrokeCap::Round;
            result->StrokeEndCap = CompositionStrokeCap::Round;
            result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
            result->StrokeStartCap = CompositionStrokeCap::Round;
            result->StrokeMiterLimit = 4;
            result->StrokeThickness = 0;
            result->StartAnimation("StrokeThickness", ScalarAnimation_0_to_3_06());
            auto controller = result->TryGetAnimationController("StrokeThickness");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1
        CompositionSpriteShape^ SpriteShape_11()
        {
            auto result = _c->CreateSpriteShape();
            result->Geometry = PathGeometry_11();
            result->StrokeBrush = _colorBrush_AlmostTomato_FFFD4341;
            result->StrokeDashCap = CompositionStrokeCap::Round;
            result->StrokeEndCap = CompositionStrokeCap::Round;
            result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
            result->StrokeStartCap = CompositionStrokeCap::Round;
            result->StrokeMiterLimit = 4;
            result->StrokeThickness = 0;
            result->StartAnimation("StrokeThickness", ScalarAnimation_0_to_3_07());
            auto controller = result->TryGetAnimationController("StrokeThickness");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1
        CompositionSpriteShape^ SpriteShape_12()
        {
            auto result = _c->CreateSpriteShape();
            result->Geometry = PathGeometry_12();
            result->StrokeBrush = _colorBrush_AlmostOrange_FFFFB901;
            result->StrokeDashCap = CompositionStrokeCap::Round;
            result->StrokeEndCap = CompositionStrokeCap::Round;
            result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
            result->StrokeStartCap = CompositionStrokeCap::Round;
            result->StrokeMiterLimit = 4;
            result->StrokeThickness = 0;
            result->StartAnimation("StrokeThickness", ScalarAnimation_0_to_2_04());
            auto controller = result->TryGetAnimationController("StrokeThickness");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1
        CompositionSpriteShape^ SpriteShape_13()
        {
            auto result = _c->CreateSpriteShape();
            result->Geometry = PathGeometry_13();
            result->StrokeBrush = _colorBrush_AlmostSpringGreen_FF01CC68;
            result->StrokeDashCap = CompositionStrokeCap::Round;
            result->StrokeEndCap = CompositionStrokeCap::Round;
            result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
            result->StrokeStartCap = CompositionStrokeCap::Round;
            result->StrokeMiterLimit = 4;
            result->StrokeThickness = 0;
            result->StartAnimation("StrokeThickness", ScalarAnimation_0_to_2_05());
            auto controller = result->TryGetAnimationController("StrokeThickness");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1
        CompositionSpriteShape^ SpriteShape_14()
        {
            auto result = _c->CreateSpriteShape();
            result->Geometry = PathGeometry_14();
            result->StrokeBrush = _colorBrush_AlmostDodgerBlue_FF0177D9;
            result->StrokeDashCap = CompositionStrokeCap::Round;
            result->StrokeEndCap = CompositionStrokeCap::Round;
            result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
            result->StrokeStartCap = CompositionStrokeCap::Round;
            result->StrokeMiterLimit = 4;
            result->StrokeThickness = 0;
            result->StartAnimation("StrokeThickness", ScalarAnimation_0_to_2_06());
            auto controller = result->TryGetAnimationController("StrokeThickness");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 2
        CompositionSpriteShape^ SpriteShape_15()
        {
            auto result = _c->CreateSpriteShape();
            result->Geometry = PathGeometry_15();
            result->StrokeBrush = _colorBrush_AlmostTomato_FFFD4341;
            result->StrokeDashCap = CompositionStrokeCap::Round;
            result->StrokeEndCap = CompositionStrokeCap::Round;
            result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
            result->StrokeStartCap = CompositionStrokeCap::Round;
            result->StrokeMiterLimit = 4;
            result->StrokeThickness = 0;
            result->StartAnimation("StrokeThickness", ScalarAnimation_0_to_2_07());
            auto controller = result->TryGetAnimationController("StrokeThickness");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1
        CompositionSpriteShape^ SpriteShape_16()
        {
            auto result = _c->CreateSpriteShape();
            result->Geometry = PathGeometry_16();
            result->StrokeBrush = _colorBrush_AlmostTomato_FFFD4341;
            result->StrokeDashCap = CompositionStrokeCap::Round;
            result->StrokeEndCap = CompositionStrokeCap::Round;
            result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
            result->StrokeStartCap = CompositionStrokeCap::Round;
            result->StrokeMiterLimit = 4;
            result->StrokeThickness = 0;
            result->StartAnimation("StrokeThickness", _scalarAnimation_0_to_2_07);
            auto controller = result->TryGetAnimationController("StrokeThickness");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1
        CompositionSpriteShape^ SpriteShape_17()
        {
            auto result = _c->CreateSpriteShape();
            result->Geometry = PathGeometry_17();
            result->StrokeBrush = _colorBrush_AlmostOrange_FFFFB901;
            result->StrokeDashCap = CompositionStrokeCap::Round;
            result->StrokeEndCap = CompositionStrokeCap::Round;
            result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
            result->StrokeStartCap = CompositionStrokeCap::Round;
            result->StrokeMiterLimit = 4;
            result->StrokeThickness = 0;
            result->StartAnimation("StrokeThickness", ScalarAnimation_0_to_2_08());
            auto controller = result->TryGetAnimationController("StrokeThickness");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1
        CompositionSpriteShape^ SpriteShape_18()
        {
            auto result = _c->CreateSpriteShape();
            result->Geometry = PathGeometry_18();
            result->StrokeBrush = _colorBrush_AlmostSpringGreen_FF01CC68;
            result->StrokeDashCap = CompositionStrokeCap::Round;
            result->StrokeEndCap = CompositionStrokeCap::Round;
            result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
            result->StrokeStartCap = CompositionStrokeCap::Round;
            result->StrokeMiterLimit = 4;
            result->StrokeThickness = 0;
            result->StartAnimation("StrokeThickness", ScalarAnimation_0_to_2_09());
            auto controller = result->TryGetAnimationController("StrokeThickness");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1
        CompositionSpriteShape^ SpriteShape_19()
        {
            auto result = _c->CreateSpriteShape();
            result->Geometry = PathGeometry_20();
            result->StrokeBrush = _colorBrush_AlmostDodgerBlue_FF0177D9;
            result->StrokeDashCap = CompositionStrokeCap::Round;
            result->StrokeEndCap = CompositionStrokeCap::Round;
            result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
            result->StrokeStartCap = CompositionStrokeCap::Round;
            result->StrokeMiterLimit = 4;
            result->StrokeThickness = 0;
            result->StartAnimation("StrokeThickness", ScalarAnimation_0_to_3_08());
            auto controller = result->TryGetAnimationController("StrokeThickness");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1
        CompositionSpriteShape^ SpriteShape_20()
        {
            auto result = _c->CreateSpriteShape();
            result->Geometry = PathGeometry_21();
            result->StrokeBrush = _colorBrush_AlmostTomato_FFFD4341;
            result->StrokeDashCap = CompositionStrokeCap::Round;
            result->StrokeEndCap = CompositionStrokeCap::Round;
            result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
            result->StrokeStartCap = CompositionStrokeCap::Round;
            result->StrokeMiterLimit = 4;
            result->StrokeThickness = 0;
            result->StartAnimation("StrokeThickness", ScalarAnimation_0_to_3_09());
            auto controller = result->TryGetAnimationController("StrokeThickness");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1
        CompositionSpriteShape^ SpriteShape_21()
        {
            auto result = _c->CreateSpriteShape();
            result->Geometry = PathGeometry_22();
            result->StrokeBrush = _colorBrush_AlmostSpringGreen_FF01CC68;
            result->StrokeDashCap = CompositionStrokeCap::Round;
            result->StrokeEndCap = CompositionStrokeCap::Round;
            result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
            result->StrokeStartCap = CompositionStrokeCap::Round;
            result->StrokeMiterLimit = 4;
            result->StrokeThickness = 0;
            result->StartAnimation("StrokeThickness", ScalarAnimation_0_to_5_0());
            auto controller = result->TryGetAnimationController("StrokeThickness");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1
        CompositionSpriteShape^ SpriteShape_22()
        {
            auto result = _c->CreateSpriteShape();
            result->Geometry = PathGeometry_23();
            result->StrokeBrush = _colorBrush_AlmostOrange_FFFFB901;
            result->StrokeDashCap = CompositionStrokeCap::Round;
            result->StrokeEndCap = CompositionStrokeCap::Round;
            result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
            result->StrokeStartCap = CompositionStrokeCap::Round;
            result->StrokeMiterLimit = 4;
            result->StrokeThickness = 0;
            result->StartAnimation("StrokeThickness", ScalarAnimation_0_to_5_1());
            auto controller = result->TryGetAnimationController("StrokeThickness");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1
        CompositionSpriteShape^ SpriteShape_23()
        {
            auto result = _c->CreateSpriteShape();
            result->Geometry = PathGeometry_24();
            result->StrokeBrush = _colorBrush_AlmostDodgerBlue_FF0177D9;
            result->StrokeDashCap = CompositionStrokeCap::Round;
            result->StrokeEndCap = CompositionStrokeCap::Round;
            result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
            result->StrokeStartCap = CompositionStrokeCap::Round;
            result->StrokeMiterLimit = 4;
            result->StrokeThickness = 0;
            result->StartAnimation("StrokeThickness", ScalarAnimation_0_to_3_10());
            auto controller = result->TryGetAnimationController("StrokeThickness");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1
        CompositionSpriteShape^ SpriteShape_24()
        {
            auto result = _c->CreateSpriteShape();
            result->Geometry = PathGeometry_25();
            result->StrokeBrush = _colorBrush_AlmostTomato_FFFD4341;
            result->StrokeDashCap = CompositionStrokeCap::Round;
            result->StrokeEndCap = CompositionStrokeCap::Round;
            result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
            result->StrokeStartCap = CompositionStrokeCap::Round;
            result->StrokeMiterLimit = 4;
            result->StrokeThickness = 0;
            result->StartAnimation("StrokeThickness", ScalarAnimation_0_to_3_11());
            auto controller = result->TryGetAnimationController("StrokeThickness");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1
        CompositionSpriteShape^ SpriteShape_25()
        {
            auto result = _c->CreateSpriteShape();
            result->Geometry = PathGeometry_26();
            result->StrokeBrush = _colorBrush_AlmostSpringGreen_FF01CC68;
            result->StrokeDashCap = CompositionStrokeCap::Round;
            result->StrokeEndCap = CompositionStrokeCap::Round;
            result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
            result->StrokeStartCap = CompositionStrokeCap::Round;
            result->StrokeMiterLimit = 4;
            result->StrokeThickness = 0;
            result->StartAnimation("StrokeThickness", ScalarAnimation_0_to_2_10());
            auto controller = result->TryGetAnimationController("StrokeThickness");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1
        CompositionSpriteShape^ SpriteShape_26()
        {
            auto result = _c->CreateSpriteShape();
            result->Geometry = PathGeometry_27();
            result->StrokeBrush = _colorBrush_AlmostOrange_FFFFB901;
            result->StrokeDashCap = CompositionStrokeCap::Round;
            result->StrokeEndCap = CompositionStrokeCap::Round;
            result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
            result->StrokeStartCap = CompositionStrokeCap::Round;
            result->StrokeMiterLimit = 4;
            result->StrokeThickness = 0;
            result->StartAnimation("StrokeThickness", ScalarAnimation_0_to_3_12());
            auto controller = result->TryGetAnimationController("StrokeThickness");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1
        CompositionSpriteShape^ SpriteShape_27()
        {
            auto result = _c->CreateSpriteShape();
            result->Geometry = PathGeometry_28();
            result->StrokeBrush = _colorBrush_AlmostDodgerBlue_FF0177D9;
            result->StrokeDashCap = CompositionStrokeCap::Round;
            result->StrokeEndCap = CompositionStrokeCap::Round;
            result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
            result->StrokeStartCap = CompositionStrokeCap::Round;
            result->StrokeMiterLimit = 4;
            result->StrokeThickness = 0;
            result->StartAnimation("StrokeThickness", ScalarAnimation_0_to_3_13());
            auto controller = result->TryGetAnimationController("StrokeThickness");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 2
        CompositionSpriteShape^ SpriteShape_28()
        {
            auto result = _c->CreateSpriteShape();
            result->Geometry = PathGeometry_29();
            result->StrokeBrush = _colorBrush_AlmostTomato_FFFD4341;
            result->StrokeDashCap = CompositionStrokeCap::Round;
            result->StrokeEndCap = CompositionStrokeCap::Round;
            result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
            result->StrokeStartCap = CompositionStrokeCap::Round;
            result->StrokeMiterLimit = 4;
            result->StrokeThickness = 0;
            result->StartAnimation("StrokeThickness", ScalarAnimation_0_to_3_14());
            auto controller = result->TryGetAnimationController("StrokeThickness");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1
        CompositionSpriteShape^ SpriteShape_29()
        {
            auto result = _c->CreateSpriteShape();
            result->Geometry = PathGeometry_30();
            result->StrokeBrush = _colorBrush_AlmostTomato_FFFD4341;
            result->StrokeDashCap = CompositionStrokeCap::Round;
            result->StrokeEndCap = CompositionStrokeCap::Round;
            result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
            result->StrokeStartCap = CompositionStrokeCap::Round;
            result->StrokeMiterLimit = 4;
            result->StrokeThickness = 0;
            result->StartAnimation("StrokeThickness", _scalarAnimation_0_to_3_14);
            auto controller = result->TryGetAnimationController("StrokeThickness");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1
        CompositionSpriteShape^ SpriteShape_30()
        {
            auto result = _c->CreateSpriteShape();
            result->Geometry = PathGeometry_31();
            result->StrokeBrush = _colorBrush_AlmostSpringGreen_FF01CC68;
            result->StrokeDashCap = CompositionStrokeCap::Round;
            result->StrokeEndCap = CompositionStrokeCap::Round;
            result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
            result->StrokeStartCap = CompositionStrokeCap::Round;
            result->StrokeMiterLimit = 4;
            result->StrokeThickness = 0;
            result->StartAnimation("StrokeThickness", ScalarAnimation_0_to_3_15());
            auto controller = result->TryGetAnimationController("StrokeThickness");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1
        CompositionSpriteShape^ SpriteShape_31()
        {
            auto result = _c->CreateSpriteShape();
            result->Geometry = PathGeometry_32();
            result->StrokeBrush = _colorBrush_AlmostOrange_FFFFB901;
            result->StrokeDashCap = CompositionStrokeCap::Round;
            result->StrokeEndCap = CompositionStrokeCap::Round;
            result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
            result->StrokeStartCap = CompositionStrokeCap::Round;
            result->StrokeMiterLimit = 4;
            result->StrokeThickness = 0;
            result->StartAnimation("StrokeThickness", ScalarAnimation_0_to_3_16());
            auto controller = result->TryGetAnimationController("StrokeThickness");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1
        CompositionSpriteShape^ SpriteShape_32()
        {
            auto result = _c->CreateSpriteShape();
            result->Geometry = PathGeometry_33();
            result->StrokeBrush = _colorBrush_AlmostTomato_FFFD4341;
            result->StrokeDashCap = CompositionStrokeCap::Round;
            result->StrokeEndCap = CompositionStrokeCap::Round;
            result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
            result->StrokeStartCap = CompositionStrokeCap::Round;
            result->StrokeMiterLimit = 4;
            result->StrokeThickness = 0;
            result->StartAnimation("StrokeThickness", ScalarAnimation_0_to_3_17());
            auto controller = result->TryGetAnimationController("StrokeThickness");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1
        CompositionSpriteShape^ SpriteShape_33()
        {
            auto result = _c->CreateSpriteShape();
            result->Geometry = PathGeometry_34();
            result->StrokeBrush = _colorBrush_AlmostDodgerBlue_FF0177D9;
            result->StrokeDashCap = CompositionStrokeCap::Round;
            result->StrokeEndCap = CompositionStrokeCap::Round;
            result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
            result->StrokeStartCap = CompositionStrokeCap::Round;
            result->StrokeMiterLimit = 4;
            result->StrokeThickness = 0;
            result->StartAnimation("StrokeThickness", ScalarAnimation_0_to_3_18());
            auto controller = result->TryGetAnimationController("StrokeThickness");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1
        CompositionSpriteShape^ SpriteShape_34()
        {
            auto result = _c->CreateSpriteShape();
            result->Geometry = PathGeometry_35();
            result->StrokeBrush = _colorBrush_AlmostSpringGreen_FF01CC68;
            result->StrokeDashCap = CompositionStrokeCap::Round;
            result->StrokeEndCap = CompositionStrokeCap::Round;
            result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
            result->StrokeStartCap = CompositionStrokeCap::Round;
            result->StrokeMiterLimit = 4;
            result->StrokeThickness = 0;
            result->StartAnimation("StrokeThickness", ScalarAnimation_0_to_5_2());
            auto controller = result->TryGetAnimationController("StrokeThickness");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1
        CompositionSpriteShape^ SpriteShape_35()
        {
            auto result = _c->CreateSpriteShape();
            result->Geometry = PathGeometry_36();
            result->StrokeBrush = _colorBrush_AlmostOrange_FFFFB901;
            result->StrokeDashCap = CompositionStrokeCap::Round;
            result->StrokeEndCap = CompositionStrokeCap::Round;
            result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
            result->StrokeStartCap = CompositionStrokeCap::Round;
            result->StrokeMiterLimit = 4;
            result->StrokeThickness = 0;
            result->StartAnimation("StrokeThickness", ScalarAnimation_0_to_5_3());
            auto controller = result->TryGetAnimationController("StrokeThickness");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1
        CompositionSpriteShape^ SpriteShape_36()
        {
            auto result = _c->CreateSpriteShape();
            result->Geometry = PathGeometry_37();
            result->StrokeBrush = _colorBrush_AlmostTomato_FFFD4341;
            result->StrokeDashCap = CompositionStrokeCap::Round;
            result->StrokeEndCap = CompositionStrokeCap::Round;
            result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
            result->StrokeStartCap = CompositionStrokeCap::Round;
            result->StrokeMiterLimit = 4;
            result->StrokeThickness = 0;
            result->StartAnimation("StrokeThickness", ScalarAnimation_0_to_3_19());
            auto controller = result->TryGetAnimationController("StrokeThickness");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1
        CompositionSpriteShape^ SpriteShape_37()
        {
            auto result = _c->CreateSpriteShape();
            result->Geometry = PathGeometry_38();
            result->StrokeBrush = _colorBrush_AlmostDodgerBlue_FF0177D9;
            result->StrokeDashCap = CompositionStrokeCap::Round;
            result->StrokeEndCap = CompositionStrokeCap::Round;
            result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
            result->StrokeStartCap = CompositionStrokeCap::Round;
            result->StrokeMiterLimit = 4;
            result->StrokeThickness = 0;
            result->StartAnimation("StrokeThickness", ScalarAnimation_0_to_3_20());
            auto controller = result->TryGetAnimationController("StrokeThickness");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1
        CompositionSpriteShape^ SpriteShape_38()
        {
            auto result = _c->CreateSpriteShape();
            result->Geometry = PathGeometry_39();
            result->StrokeBrush = _colorBrush_AlmostSpringGreen_FF01CC68;
            result->StrokeDashCap = CompositionStrokeCap::Round;
            result->StrokeEndCap = CompositionStrokeCap::Round;
            result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
            result->StrokeStartCap = CompositionStrokeCap::Round;
            result->StrokeMiterLimit = 4;
            result->StrokeThickness = 0;
            result->StartAnimation("StrokeThickness", ScalarAnimation_0_to_2_11());
            auto controller = result->TryGetAnimationController("StrokeThickness");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1
        CompositionSpriteShape^ SpriteShape_39()
        {
            auto result = _c->CreateSpriteShape();
            result->Geometry = PathGeometry_40();
            result->StrokeBrush = _colorBrush_AlmostOrange_FFFFB901;
            result->StrokeDashCap = CompositionStrokeCap::Round;
            result->StrokeEndCap = CompositionStrokeCap::Round;
            result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
            result->StrokeStartCap = CompositionStrokeCap::Round;
            result->StrokeMiterLimit = 4;
            result->StrokeThickness = 0;
            result->StartAnimation("StrokeThickness", ScalarAnimation_0_to_3_21());
            auto controller = result->TryGetAnimationController("StrokeThickness");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1
        CompositionSpriteShape^ SpriteShape_40()
        {
            auto result = _c->CreateSpriteShape();
            result->Geometry = PathGeometry_41();
            result->StrokeBrush = _colorBrush_AlmostTomato_FFFD4341;
            result->StrokeDashCap = CompositionStrokeCap::Round;
            result->StrokeEndCap = CompositionStrokeCap::Round;
            result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
            result->StrokeStartCap = CompositionStrokeCap::Round;
            result->StrokeMiterLimit = 4;
            result->StrokeThickness = 0;
            result->StartAnimation("StrokeThickness", ScalarAnimation_0_to_3_22());
            auto controller = result->TryGetAnimationController("StrokeThickness");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 2
        CompositionSpriteShape^ SpriteShape_41()
        {
            auto result = _c->CreateSpriteShape();
            result->Geometry = PathGeometry_42();
            result->StrokeBrush = _colorBrush_AlmostDodgerBlue_FF0177D9;
            result->StrokeDashCap = CompositionStrokeCap::Round;
            result->StrokeEndCap = CompositionStrokeCap::Round;
            result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
            result->StrokeStartCap = CompositionStrokeCap::Round;
            result->StrokeMiterLimit = 4;
            result->StrokeThickness = 0;
            result->StartAnimation("StrokeThickness", ScalarAnimation_0_to_3_23());
            auto controller = result->TryGetAnimationController("StrokeThickness");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1
        CompositionSpriteShape^ SpriteShape_42()
        {
            auto result = _c->CreateSpriteShape();
            result->Geometry = PathGeometry_43();
            result->StrokeBrush = _colorBrush_AlmostDodgerBlue_FF0177D9;
            result->StrokeDashCap = CompositionStrokeCap::Round;
            result->StrokeEndCap = CompositionStrokeCap::Round;
            result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
            result->StrokeStartCap = CompositionStrokeCap::Round;
            result->StrokeMiterLimit = 4;
            result->StrokeThickness = 0;
            result->StartAnimation("StrokeThickness", _scalarAnimation_0_to_3_23);
            auto controller = result->TryGetAnimationController("StrokeThickness");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1
        CompositionSpriteShape^ SpriteShape_43()
        {
            auto result = _c->CreateSpriteShape();
            result->Geometry = PathGeometry_44();
            result->StrokeBrush = _colorBrush_AlmostSpringGreen_FF01CC68;
            result->StrokeDashCap = CompositionStrokeCap::Round;
            result->StrokeEndCap = CompositionStrokeCap::Round;
            result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
            result->StrokeStartCap = CompositionStrokeCap::Round;
            result->StrokeMiterLimit = 4;
            result->StrokeThickness = 0;
            result->StartAnimation("StrokeThickness", ScalarAnimation_0_to_3_24());
            auto controller = result->TryGetAnimationController("StrokeThickness");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Path 1
        CompositionSpriteShape^ SpriteShape_44()
        {
            auto result = _c->CreateSpriteShape();
            result->Geometry = PathGeometry_45();
            result->StrokeBrush = _colorBrush_AlmostTomato_FFFD4341;
            result->StrokeDashCap = CompositionStrokeCap::Round;
            result->StrokeEndCap = CompositionStrokeCap::Round;
            result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
            result->StrokeStartCap = CompositionStrokeCap::Round;
            result->StrokeMiterLimit = 4;
            result->StrokeThickness = 0;
            result->StartAnimation("StrokeThickness", ScalarAnimation_0_to_3_25());
            auto controller = result->TryGetAnimationController("StrokeThickness");
            controller->Pause();
            controller->StartAnimation("Progress", _scalarExpressionAnimation);
            return result;
        }

        // Layer (Shape): Cake
        // Path 1
        CompositionSpriteShape^ SpriteShape_45()
        {
            auto result = _c->CreateSpriteShape();
            result->TransformMatrix = { 1, 0, 0, 1, -0.479000092F, -8.83399963F };
            result->FillBrush = ColorBrush_AlmostLightGray_FFCCCCCC();
            result->Geometry = PathGeometry_46();
            return result;
        }

        // Layer (Shape): Cake
        // Path 1
        CompositionSpriteShape^ SpriteShape_46()
        {
            auto result = _c->CreateSpriteShape();
            result->TransformMatrix = { 1, 0, 0, 1, -0.479000092F, -22.6780014F };
            result->FillBrush = ColorBrush_AlmostWhiteSmoke_FFF1F1F1();
            result->Geometry = PathGeometry_47();
            return result;
        }

        // Layer (Shape): Cake
        // Path 1
        CompositionSpriteShape^ SpriteShape_47()
        {
            auto result = _c->CreateSpriteShape();
            result->TransformMatrix = { 1, 0, 0, 1, -0.479999542F, -27.1220016F };
            result->FillBrush = ColorBrush_AlmostDarkKhaki_FFB88F66();
            result->Geometry = PathGeometry_48();
            return result;
        }

        // Layer (Shape): Cake 2
        // Path 1
        CompositionSpriteShape^ SpriteShape_48()
        {
            auto result = _c->CreateSpriteShape();
            result->TransformMatrix = { 1, 0, 0, 1, -0.479000092F, -8.83399963F };
            result->FillBrush = _colorBrush_AlmostLightGray_FFCCCCCC;
            result->Geometry = _pathGeometry_46;
            return result;
        }

        // Layer (Shape): Cake 2
        // Path 1
        CompositionSpriteShape^ SpriteShape_49()
        {
            auto result = _c->CreateSpriteShape();
            result->TransformMatrix = { 1, 0, 0, 1, -0.479000092F, -22.6780014F };
            result->FillBrush = _colorBrush_AlmostWhiteSmoke_FFF1F1F1;
            result->Geometry = _pathGeometry_47;
            return result;
        }

        // Layer (Shape): Cake 2
        // Path 1
        CompositionSpriteShape^ SpriteShape_50()
        {
            auto result = _c->CreateSpriteShape();
            result->TransformMatrix = { 1, 0, 0, 1, -0.479999542F, -27.1220016F };
            result->FillBrush = ColorBrush_AlmostOrange_FFFFBA01();
            result->Geometry = _pathGeometry_48;
            return result;
        }

        // Layer (Shape): Cake 2
        // Path 1
        CompositionSpriteShape^ SpriteShape_51()
        {
            auto result = _c->CreateSpriteShape();
            result->TransformMatrix = { 1, 0, 0, 1, -0.479000092F, -28.5209999F };
            result->FillBrush = ColorBrush_AlmostOrangeRed_FFDA4100();
            result->Geometry = PathGeometry_49();
            return result;
        }

        // Layer (Shape): Cake 2
        // Path 1
        CompositionSpriteShape^ SpriteShape_52()
        {
            auto result = _c->CreateSpriteShape();
            result->TransformMatrix = { 1, 0, 0, 1, -0.479000092F, -52.0660019F };
            result->FillBrush = ColorBrush_AlmostOrangeRed_FFF7630B();
            result->Geometry = _pathGeometry_47;
            return result;
        }

        // Layer (Shape): Cake 2
        // Path 1
        CompositionSpriteShape^ SpriteShape_53()
        {
            auto result = _c->CreateSpriteShape();
            result->TransformMatrix = { 0.873979986F, 0, 0, 0.873979986F, -0.479000092F, -36.487999F };
            result->FillBrush = ColorBrush_AlmostDarkOliveGreen_FF613D30();
            result->Geometry = PathGeometry_50();
            return result;
        }

        // Layer (Shape): Cake 2
        // Path 1
        CompositionSpriteShape^ SpriteShape_54()
        {
            auto result = _c->CreateSpriteShape();
            result->TransformMatrix = { 0.867699981F, 0, 0, 0.867699981F, 16.2710037F, -42.368F };
            result->FillBrush = _colorBrush_AlmostDarkOliveGreen_FF613D30;
            result->Geometry = PathGeometry_51();
            return result;
        }

        // Layer (Shape): Cake 2
        // Path 1
        CompositionSpriteShape^ SpriteShape_55()
        {
            auto result = _c->CreateSpriteShape();
            result->TransformMatrix = { 0.880330026F, 0, 0, 0.880330026F, 28.9079971F, -57.0610008F };
            result->FillBrush = _colorBrush_AlmostDarkOliveGreen_FF613D30;
            result->Geometry = PathGeometry_52();
            return result;
        }

        // Layer (Shape): Cake 2
        // Path 1
        CompositionSpriteShape^ SpriteShape_56()
        {
            auto result = _c->CreateSpriteShape();
            result->TransformMatrix = { 0.85777998F, 0, 0, 0.85777998F, 13.3320007F, -66.9179993F };
            result->FillBrush = _colorBrush_AlmostDarkOliveGreen_FF613D30;
            result->Geometry = PathGeometry_53();
            return result;
        }

        // Layer (Shape): Cake 2
        // Path 1
        CompositionSpriteShape^ SpriteShape_57()
        {
            auto result = _c->CreateSpriteShape();
            result->TransformMatrix = { 0.827109993F, 0, 0, 0.827109993F, -20.4640007F, -42.8569984F };
            result->FillBrush = _colorBrush_AlmostDarkOliveGreen_FF613D30;
            result->Geometry = PathGeometry_54();
            return result;
        }

        // Layer (Shape): Cake 2
        // Path 1
        CompositionSpriteShape^ SpriteShape_58()
        {
            auto result = _c->CreateSpriteShape();
            result->TransformMatrix = { 0.850629985F, 0, 0, 0.850629985F, -34.276001F, -56.5719986F };
            result->FillBrush = _colorBrush_AlmostDarkOliveGreen_FF613D30;
            result->Geometry = PathGeometry_55();
            return result;
        }

        // Layer (Shape): Cake 2
        // Path 1
        CompositionSpriteShape^ SpriteShape_59()
        {
            auto result = _c->CreateSpriteShape();
            result->TransformMatrix = { 0.865750015F, 0, 0, 0.865750015F, -13.6069984F, -67.3470001F };
            result->FillBrush = _colorBrush_AlmostDarkOliveGreen_FF613D30;
            result->Geometry = PathGeometry_56();
            return result;
        }

        // Transforms: Sprinkles 2
        // Path 1
        CompositionSpriteShape^ SpriteShape_60()
        {
            auto result = _c->CreateSpriteShape();
            result->TransformMatrix = { 1, 0, 0, 1, 61.8320007F, 24.3320007F };
            result->FillBrush = _colorBrush_AlmostLightGray_FFCCCCCC;
            result->Geometry = PathGeometry_57();
            return result;
        }

        // Transforms: Sprinkles 3
        // Path 1
        CompositionSpriteShape^ SpriteShape_61()
        {
            auto result = _c->CreateSpriteShape();
            result->TransformMatrix = { 1, 0, 0, 1, 77.4079971F, 34.1889992F };
            result->FillBrush = _colorBrush_AlmostWhiteSmoke_FFF1F1F1;
            result->Geometry = _pathGeometry_52;
            return result;
        }

        // Transforms: Sprinkles 4
        // Path 1
        CompositionSpriteShape^ SpriteShape_62()
        {
            auto result = _c->CreateSpriteShape();
            result->TransformMatrix = { 1, 0, 0, 1, 64.7710037F, 48.882F };
            result->FillBrush = _colorBrush_AlmostLightGray_FFCCCCCC;
            result->Geometry = _pathGeometry_51;
            return result;
        }

        // Transforms: Sprinkles 5
        // Path 1
        CompositionSpriteShape^ SpriteShape_63()
        {
            auto result = _c->CreateSpriteShape();
            result->TransformMatrix = { 1, 0, 0, 1, 48.0209999F, 54.762001F };
            result->FillBrush = _colorBrush_AlmostWhiteSmoke_FFF1F1F1;
            result->Geometry = PathGeometry_58();
            return result;
        }

        // Transforms: Sprinkles 6
        // Path 1
        CompositionSpriteShape^ SpriteShape_64()
        {
            auto result = _c->CreateSpriteShape();
            result->TransformMatrix = { 1, 0, 0, 1, 28.0359993F, 48.3930016F };
            result->FillBrush = _colorBrush_AlmostLightGray_FFCCCCCC;
            result->Geometry = _pathGeometry_54;
            return result;
        }

        // Transforms: Sprinkles 7
        // Path 1
        CompositionSpriteShape^ SpriteShape_65()
        {
            auto result = _c->CreateSpriteShape();
            result->TransformMatrix = { 1, 0, 0, 1, 14.224F, 34.6780014F };
            result->FillBrush = _colorBrush_AlmostWhiteSmoke_FFF1F1F1;
            result->Geometry = _pathGeometry_55;
            return result;
        }

        // Transforms: Sprinkles 8
        // Path 1
        CompositionSpriteShape^ SpriteShape_66()
        {
            auto result = _c->CreateSpriteShape();
            result->TransformMatrix = { 1, 0, 0, 1, 34.8930016F, 23.9029999F };
            result->FillBrush = _colorBrush_AlmostWhiteSmoke_FFF1F1F1;
            result->Geometry = _pathGeometry_56;
            return result;
        }

        // Layer (Shape): Candle
        // Path 1
        CompositionSpriteShape^ SpriteShape_67()
        {
            auto result = _c->CreateSpriteShape();
            result->TransformMatrix = { 1, 0, 0, 1, -0.479999542F, -61.8269997F };
            result->FillBrush = ColorBrush_AlmostDarkCyan_FF0063B0();
            result->Geometry = PathGeometry_59();
            return result;
        }

        // Layer (Shape): Candle
        // Path 1
        CompositionSpriteShape^ SpriteShape_68()
        {
            auto result = _c->CreateSpriteShape();
            result->TransformMatrix = { 1, 0, 0, 1, -0.479000092F, -52.0660019F };
            result->FillBrush = _colorBrush_AlmostDarkCyan_FF0063B0;
            result->Geometry = PathGeometry_60();
            return result;
        }

        // Layer (Shape): Candle
        // Path 1
        CompositionSpriteShape^ SpriteShape_69()
        {
            auto result = _c->CreateSpriteShape();
            result->TransformMatrix = { 1, 0, 0, 1, -0.479000092F, -71.6580048F };
            result->FillBrush = _colorBrush_AlmostDodgerBlue_FF0177D9;
            result->Geometry = _pathGeometry_60;
            return result;
        }

        // Layer (Shape): Flame
        // Path 1
        CompositionSpriteShape^ SpriteShape_70()
        {
            auto result = _c->CreateSpriteShape();
            result->TransformMatrix = { 1, 0, 0, 1, -0.473999023F, -81.9290009F };
            result->FillBrush = _colorBrush_AlmostTomato_FFFD4341;
            result->Geometry = PathGeometry_61();
            return result;
        }

        // Layer (Shape): Flame
        // Path 1
        CompositionSpriteShape^ SpriteShape_71()
        {
            auto result = _c->CreateSpriteShape();
            result->TransformMatrix = { 1, 0, 0, 1, -0.479000092F, -79.5899963F };
            result->FillBrush = ColorBrush_AlmostKhaki_FFFFD579();
            result->Geometry = PathGeometry_62();
            return result;
        }

        StepEasingFunction^ StepThenHoldEasingFunction()
        {
            auto result = _stepThenHoldEasingFunction = _c->CreateStepEasingFunction();
            result->IsInitialStepSingleFrame = true;
            return result;
        }

        // Scale
        Vector2KeyFrameAnimation^ Vector2Animation_0()
        {
            auto result = _vector2Animation_0 = _c->CreateVector2KeyFrameAnimation();
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, { 0.949999988F, 0.949999988F }, _holdThenStepEasingFunction);
            result->InsertKeyFrame(0.416666657F, { 0.75F, 0.75F }, CubicBezierEasingFunction_05());
            result->InsertKeyFrame(0.583333313F, { 0.75F, 0.75F }, _holdThenStepEasingFunction);
            result->InsertKeyFrame(0.75F, { 1, 1 }, CubicBezierEasingFunction_06());
            result->InsertKeyFrame(0.983333349F, { 0.949999988F, 0.949999988F }, CubicBezierEasingFunction_07());
            return result;
        }

        // Transforms: Sprinkles 2
        // Position
        Vector2KeyFrameAnimation^ Vector2Animation_1()
        {
            auto result = _c->CreateVector2KeyFrameAnimation();
            result->SetReferenceParameter("_", _root);
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, { 13.2340002F, -66.8209991F }, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.583333313F, { 13.2340002F, -66.8209991F }, _holdThenStepEasingFunction);
            result->InsertExpressionKeyFrame(0.749999881F, "(Pow(1 - _.t0, 3) * Vector2(13.234,(-66.821))) + (3 * Square(1 - _.t0) * _.t0 * Vector2(13.234,(-67.65434))) + (3 * (1 - _.t0) * Square(_.t0) * Vector2(13.234,(-72.00237))) + (Pow(_.t0, 3) * Vector2(13.234,(-71.821)))", _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.75F, { 13.2340002F, -71.8209991F }, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.816666663F, { 13.2340002F, -65.7330017F }, _cubicBezierEasingFunction_09);
            result->InsertExpressionKeyFrame(0.899999917F, "(Pow(1 - _.t0, 3) * Vector2(13.234,(-65.733))) + (3 * Square(1 - _.t0) * _.t0 * Vector2(13.234,(-64.89967))) + (3 * (1 - _.t0) * Square(_.t0) * Vector2(13.234,(-66.63963))) + (Pow(_.t0, 3) * Vector2(13.234,(-66.821)))", _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.900000036F, { 13.2340002F, -66.8209991F }, _stepThenHoldEasingFunction);
            return result;
        }

        // Transforms: Sprinkles 3
        // Position
        Vector2KeyFrameAnimation^ Vector2Animation_2()
        {
            auto result = _c->CreateVector2KeyFrameAnimation();
            result->SetReferenceParameter("_", _root);
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, { 28.9080009F, -56.9640007F }, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.600000024F, { 28.9080009F, -56.9640007F }, _holdThenStepEasingFunction);
            result->InsertExpressionKeyFrame(0.766666591F, "(Pow(1 - _.t1, 3) * Vector2(28.908,(-56.964))) + (3 * Square(1 - _.t1) * _.t1 * Vector2(28.908,(-57.79733))) + (3 * (1 - _.t1) * Square(_.t1) * Vector2(28.908,(-62.04015))) + (Pow(_.t1, 3) * Vector2(28.908,(-61.964)))", _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.76666671F, { 28.9080009F, -61.9640007F }, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.833333313F, { 28.9080009F, -56.507F }, _cubicBezierEasingFunction_09);
            result->InsertExpressionKeyFrame(0.916666567F, "(Pow(1 - _.t1, 3) * Vector2(28.908,(-56.507))) + (3 * Square(1 - _.t1) * _.t1 * Vector2(28.908,(-55.67367))) + (3 * (1 - _.t1) * Square(_.t1) * Vector2(28.908,(-56.88785))) + (Pow(_.t1, 3) * Vector2(28.908,(-56.964)))", _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.916666687F, { 28.9080009F, -56.9640007F }, _stepThenHoldEasingFunction);
            return result;
        }

        // Transforms: Sprinkles 4
        // Position
        Vector2KeyFrameAnimation^ Vector2Animation_3()
        {
            auto result = _c->CreateVector2KeyFrameAnimation();
            result->SetReferenceParameter("_", _root);
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, { 16.1739998F, -42.2700005F }, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.616666675F, { 16.1739998F, -42.2700005F }, _holdThenStepEasingFunction);
            result->InsertExpressionKeyFrame(0.783333242F, "(Pow(1 - _.t2, 3) * Vector2(16.174,(-42.27))) + (3 * Square(1 - _.t2) * _.t2 * Vector2(16.174,(-43.10333))) + (3 * (1 - _.t2) * Square(_.t2) * Vector2(16.174,(-47.36807))) + (Pow(_.t2, 3) * Vector2(16.174,(-47.27)))", _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.783333361F, { 16.1739998F, -47.2700005F }, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.850000024F, { 16.1739998F, -41.6809998F }, _cubicBezierEasingFunction_09);
            result->InsertExpressionKeyFrame(0.899999917F, "(Pow(1 - _.t2, 3) * Vector2(16.174,(-41.681))) + (3 * Square(1 - _.t2) * _.t2 * Vector2(16.174,(-40.84767))) + (3 * (1 - _.t2) * Square(_.t2) * Vector2(16.174,(-42.17193))) + (Pow(_.t2, 3) * Vector2(16.174,(-42.27)))", _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.900000036F, { 16.1739998F, -42.2700005F }, _stepThenHoldEasingFunction);
            return result;
        }

        // Transforms: Sprinkles 5
        // Position
        Vector2KeyFrameAnimation^ Vector2Animation_4()
        {
            auto result = _c->CreateVector2KeyFrameAnimation();
            result->SetReferenceParameter("_", _root);
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, { -0.477999985F, -36.3909988F }, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.583333313F, { -0.477999985F, -36.3909988F }, _holdThenStepEasingFunction);
            result->InsertExpressionKeyFrame(0.749999881F, "(Pow(1 - _.t3, 3) * Vector2((-0.478),(-36.391))) + (3 * Square(1 - _.t3) * _.t3 * Vector2((-0.478),(-37.22433))) + (3 * (1 - _.t3) * Square(_.t3) * Vector2((-0.478),(-41.4878))) + (Pow(_.t3, 3) * Vector2((-0.478),(-41.391)))", _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.75F, { -0.477999985F, -41.3909988F }, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.816666663F, { -0.477999985F, -35.8110008F }, _cubicBezierEasingFunction_09);
            result->InsertExpressionKeyFrame(0.916666567F, "(Pow(1 - _.t3, 3) * Vector2((-0.478),(-35.811))) + (3 * Square(1 - _.t3) * _.t3 * Vector2((-0.478),(-34.97767))) + (3 * (1 - _.t3) * Square(_.t3) * Vector2((-0.478),(-36.29419))) + (Pow(_.t3, 3) * Vector2((-0.478),(-36.391)))", _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.916666687F, { -0.477999985F, -36.3909988F }, _stepThenHoldEasingFunction);
            return result;
        }

        // Transforms: Sprinkles 6
        // Position
        Vector2KeyFrameAnimation^ Vector2Animation_5()
        {
            auto result = _c->CreateVector2KeyFrameAnimation();
            result->SetReferenceParameter("_", _root);
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, { -20.5620003F, -42.7589989F }, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.600000024F, { -20.5620003F, -42.7589989F }, _holdThenStepEasingFunction);
            result->InsertExpressionKeyFrame(0.766666591F, "(Pow(1 - _.t4, 3) * Vector2((-20.562),(-42.759))) + (3 * Square(1 - _.t4) * _.t4 * Vector2((-20.562),(-43.59233))) + (3 * (1 - _.t4) * Square(_.t4) * Vector2((-20.562),(-47.85645))) + (Pow(_.t4, 3) * Vector2((-20.562),(-47.759)))", _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.76666671F, { -20.5620003F, -47.7589989F }, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.833333313F, { -20.5620003F, -42.1739998F }, _cubicBezierEasingFunction_09);
            result->InsertExpressionKeyFrame(0.899999917F, "(Pow(1 - _.t4, 3) * Vector2((-20.562),(-42.174))) + (3 * Square(1 - _.t4) * _.t4 * Vector2((-20.562),(-41.34067))) + (3 * (1 - _.t4) * Square(_.t4) * Vector2((-20.562),(-42.66155))) + (Pow(_.t4, 3) * Vector2((-20.562),(-42.759)))", _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.900000036F, { -20.5620003F, -42.7589989F }, _stepThenHoldEasingFunction);
            return result;
        }

        // Transforms: Sprinkles 7
        // Position
        Vector2KeyFrameAnimation^ Vector2Animation_6()
        {
            auto result = _c->CreateVector2KeyFrameAnimation();
            result->SetReferenceParameter("_", _root);
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, { -34.276001F, -56.473999F }, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.616666675F, { -34.276001F, -56.473999F }, _holdThenStepEasingFunction);
            result->InsertExpressionKeyFrame(0.783333242F, "(Pow(1 - _.t5, 3) * Vector2((-34.276),(-56.474))) + (3 * Square(1 - _.t5) * _.t5 * Vector2((-34.276),(-57.30733))) + (3 * (1 - _.t5) * Square(_.t5) * Vector2((-34.276),(-61.59352))) + (Pow(_.t5, 3) * Vector2((-34.276),(-61.474)))", _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.783333361F, { -34.276001F, -61.473999F }, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.850000024F, { -34.276001F, -55.757F }, _cubicBezierEasingFunction_09);
            result->InsertExpressionKeyFrame(0.916666567F, "(Pow(1 - _.t5, 3) * Vector2((-34.276),(-55.757))) + (3 * Square(1 - _.t5) * _.t5 * Vector2((-34.276),(-54.92367))) + (3 * (1 - _.t5) * Square(_.t5) * Vector2((-34.276),(-56.35448))) + (Pow(_.t5, 3) * Vector2((-34.276),(-56.474)))", _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.916666687F, { -34.276001F, -56.473999F }, _stepThenHoldEasingFunction);
            return result;
        }

        // Transforms: Sprinkles 8
        // Position
        Vector2KeyFrameAnimation^ Vector2Animation_7()
        {
            auto result = _c->CreateVector2KeyFrameAnimation();
            result->SetReferenceParameter("_", _root);
            result->Duration = { c_durationTicks };
            result->InsertKeyFrame(0, { -13.7040005F, -67.25F }, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.583333313F, { -13.7040005F, -67.25F }, _holdThenStepEasingFunction);
            result->InsertExpressionKeyFrame(0.749999881F, "(Pow(1 - _.t6, 3) * Vector2((-13.704),(-67.25))) + (3 * Square(1 - _.t6) * _.t6 * Vector2((-13.704),(-68.08334))) + (3 * (1 - _.t6) * Square(_.t6) * Vector2((-13.704),(-72.36794))) + (Pow(_.t6, 3) * Vector2((-13.704),(-72.25)))", _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.75F, { -13.7040005F, -72.25F }, _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.816666663F, { -13.7040005F, -66.5419998F }, _cubicBezierEasingFunction_09);
            result->InsertExpressionKeyFrame(0.899999917F, "(Pow(1 - _.t6, 3) * Vector2((-13.704),(-66.542))) + (3 * Square(1 - _.t6) * _.t6 * Vector2((-13.704),(-65.70866))) + (3 * (1 - _.t6) * Square(_.t6) * Vector2((-13.704),(-67.13206))) + (Pow(_.t6, 3) * Vector2((-13.704),(-67.25)))", _stepThenHoldEasingFunction);
            result->InsertKeyFrame(0.900000036F, { -13.7040005F, -67.25F }, _stepThenHoldEasingFunction);
            return result;
        }

        static IGeometrySource2D^ CanvasGeometryToIGeometrySource2D(CanvasGeometry geo)
        {
            ComPtr<ABI::Windows::Graphics::IGeometrySource2D> interop = geo.Detach();
            return reinterpret_cast<IGeometrySource2D^>(interop.Get());
        }

        static void FFHR(HRESULT hr)
        {
            if (hr != S_OK)
            {
                RoFailFastWithErrorContext(hr);
            }
        }

    public:
        AnimatedVisual(Compositor^ compositor)
            : _c(compositor)
            , _reusableExpressionAnimation(compositor->CreateExpressionAnimation())
        {
            FFHR(D2D1CreateFactory(D2D1_FACTORY_TYPE_SINGLE_THREADED, _d2dFactory.GetAddressOf()));
            Root();
        }
        virtual ~AnimatedVisual() { }

        property Windows::Foundation::TimeSpan Duration
        {
            virtual Windows::Foundation::TimeSpan get() { return { c_durationTicks }; }
        }

        property Windows::UI::Composition::Visual^ RootVisual
        {
            virtual Windows::UI::Composition::Visual^ get() { return _root; }
        }

        property Windows::Foundation::Numerics::float2 Size
        {
            virtual Windows::Foundation::Numerics::float2 get() { return { 300, 300 }; }
        }

    };
} // end namespace

Microsoft::UI::Xaml::Controls::IAnimatedVisual^ AnimatedVisuals::BirthdayCake::TryCreateAnimatedVisual(
    Compositor^ compositor,
    Object^* diagnostics)
{
    diagnostics = nullptr;
    if (!IsRuntimeCompatible())
    {
        return nullptr;
    }
    return ref new AnimatedVisual(compositor);
}
