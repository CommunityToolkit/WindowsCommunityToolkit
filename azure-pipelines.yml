trigger:
- master
- rel/*

pr:
- master
- rel/*

pool:
  vmImage: windows-2019

variables: 
  BuildConfiguration: Release
  isPR: $[eq(variables['build.reason'], 'PullRequest')]

jobs:
- job: ToolkitBuild
  timeoutInMinutes: 120
  
  steps:
  - task: BatchScript@1
    inputs:
      filename: "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\Common7\\Tools\\VsDevCmd.bat"
      arguments: -no_logo
      modifyEnvironment: true
    displayName: Setup Environment Variables

  - task: NuGetToolInstaller@0
    displayName: Use NuGet 5.6.0
    inputs:
      versionSpec: 5.6.0

  - task: DotNetCoreCLI@2  
    inputs:
      command: custom
      custom: tool
      arguments: install --tool-path . nbgv
    displayName: Install NBGV tool

  # if we're a PR, get the version from version.json, replace the 'build' string with the string 'PullRequest####', and set it back again
  - powershell: |
      $jsonFile = (Get-Content .\version.json) -replace '^\s*//*.*' | ConvertFrom-Json <# Get Version.Json, remove comments, and convert to JSON obj #>
      $nbgvVersion = $jsonFile.Version -replace "build", ("PullRequest{0}" -f "$(System.PullRequest.PullRequestNumber)") <# Update Build With PullRequest and ID #>
      .\nbgv.exe set-version $nbgvVersion <# Set version back to Nerdbank GitVersioning #>
      "Updating Version to: {0}" -f $nbgvVersion | Out-String
    condition: eq(variables.isPR, true)
    displayName: Update Version.json for PRs

  # get build height
  - script: nbgv cloud
    displayName: Set Version Height

  #- powershell: .\build\Install-WindowsSdkISO.ps1 19041
  #  displayName: Insider SDK

  - powershell: .\build\build.ps1 -target=Build
    displayName: Build

  - powershell: .\build\build.ps1 -target=Test
    displayName: Test
    timeoutInMinutes: 15

  - powershell: .\build\build.ps1 -target=Package
    displayName: Package

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'VSTest'
      testResultsFiles: '**/VsTestResults*.trx'
    displayName: Publish Test Results
    condition: always()

  - task: PublishPipelineArtifact@1
    displayName: Publish UI Test Results
    inputs:
      targetPath: .\build\UITestResults.wtl
      artifactName: WexLogFileOutput
    condition: always()

  - task: PublishPipelineArtifact@1
    displayName: Publish Test WexLogFileOutput
    inputs:
      targetPath: .\build\WexLogFileOutput
      artifactName: WexErrorLogFileOutput
    condition: failed()

  - task: PowerShell@2
    displayName: Authenticode Sign Packages
    inputs:
      filePath: build/Sign-Package.ps1
    env:
      SignClientUser: $(SignClientUser)
      SignClientSecret: $(SignClientSecret)
      ArtifactDirectory: bin\nupkg
    condition: and(succeeded(), not(variables.isPR), not(eq(variables.SignClientSecret, '')), not(eq(variables.SignClientUser, '')))

  - task: PublishBuildArtifacts@1
    displayName: Publish Package Artifacts
    inputs:
      pathToPublish: .\bin\nupkg
      artifactType: container
      artifactName: Packages
