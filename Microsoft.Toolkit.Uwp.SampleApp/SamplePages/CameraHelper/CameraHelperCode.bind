// Creates a Camera Helper and subscribes to frames from an available frame source.
// Make sure you have the capability webcam enabled for your app to access the device's camera.

using Microsoft.Toolkit.Uwp.Helpers;

CameraHelper cameraHelper = new CameraHelper();
var result = await _cameraHelper.InitializeAndStartCaptureAsync();

if(result == CameraHelperResult.Success)
{
  // Subscribe to get frames as they arrive
  cameraHelper.FrameArrived += CameraHelper_FrameArrived;
}
else
{
  // Get error information
  var errorMessage = result.ToString();
}

private void CameraHelper_FrameArrived(object sender, FrameEventArgs e)
{
  // Gets the current video frame
  VideoFrame currentVideoFrame  = e.VideoFrame;

  // Gets the software bitmap image
  SoftwareBitmap softwareBitmap = currentVideoFrame.SoftwareBitmap;
}

private async void Application_Suspending(object sender, SuspendingEventArgs e)
{
    if (Frame.CurrentSourcePageType == typeof(CameraHelperPage))
    {
        var deferral = e.SuspendingOperation.GetDeferral();
        await CleanUpAsync();
        deferral.Complete();
    }
}

private async Task CleanUpAsync()
{
    // You may want to unsubscribe from any events and call CameraHelper CleanUpAsync() method
	// to free up camera helper resources on App suspending, Page OnNavigatedFrom events when appropriate.
	// Note: You would need to re-initialize the CameraHelper and rehook events on App resuming, OnNavigatedTo events.
    if (_cameraHelper != null)
    {
        _cameraHelper.FrameArrived -= CameraHelper_FrameArrived;
        await _cameraHelper.CleanUpAsync();
        _cameraHelper = null;
    }
}