<Project Sdk="MSBuild.Sdk.Extras">

  <PropertyGroup>
    <TargetFrameworks>netstandard1.4;uap10.0;native;net461;netcoreapp3.1</TargetFrameworks>
    <DefineConstants>$(DefineConstants);NETFX_CORE</DefineConstants>
    <Title>Windows Community Toolkit Notifications</Title>
    <Description>
      Generate tile, toast, and badge notifications for Windows 10 via code, with the help of IntelliSense.
      Adds Support for adaptive tiles and adaptive/interactive toasts for Windows 10. It is part of the Windows Community Toolkit.
      Supports C# and C++ UWP project types.
      Also works with C# portable class libraries and non-UWP C# projects like server projects.
      This project contains outputs for netstandard1.4, uap10.0 and native for WinRT.
    </Description>
    <PackageTags>notifications win10 windows 10 tile tiles toast toasts badge xml uwp c# csharp c++</PackageTags>
    <ExtrasImplicitPlatformPackageIsPrivate Condition=" '$(TargetFramework)' == 'native' ">true</ExtrasImplicitPlatformPackageIsPrivate>
  </PropertyGroup>

  <Choose>

    <!--Desktop Win32 apps-->
    <When Condition="'$(TargetFramework)'=='net461' or '$(TargetFramework)'=='netcoreapp3.1'">
      <ItemGroup>
        <!--Reference Windows SDK NuGet of correct target platform version-->
        <PackageReference Include="Microsoft.Windows.SDK.Contracts" Version="10.0.19041.1" />
      </ItemGroup>
      <PropertyGroup>
        <!--Define the WINDOWS_UWP conditional symbol, since the Windows.Data.Xml and the Windows.UI.Notification namespaces are available-->
        <DefineConstants>$(DefineConstants);WINDOWS_UWP;WIN32</DefineConstants>
      </PropertyGroup>
    </When>

  </Choose>

  <!--NET Core desktop apps also need the Registry NuGet package and System.Reflection.Emit for generating COM class dynamically-->
  <ItemGroup Condition="'$(TargetFramework)'=='netcoreapp3.1'">
    <PackageReference Include="Microsoft.Win32.Registry" Version="4.7.0" />
    <PackageReference Include="System.Reflection.Emit" Version="4.7.0" />
    <PackageReference Include="System.Drawing.Common" Version="4.7.0" />
  </ItemGroup>
  
  <ItemGroup Condition=" '$(TargetFramework)' == 'native' ">
    <PackageReference Include="Microsoft.NETCore.UniversalWindowsPlatform" Version="$(ExtrasUwpMetaPackageVersion)" PrivateAssets="all" IsImplicitlyDefined="true" />
  </ItemGroup>

  <ItemGroup>
    <None Include="Microsoft.Toolkit.Uwp.Notifications.targets" Pack="true" PackagePath="build\native" />
  </ItemGroup>

  <!--Native (C++) doesn't need System.ValueTuple (plus it's incompatible with this package)-->
  <ItemGroup Condition=" '$(TargetFramework)' != 'native' ">
    <PackageReference Include="System.ValueTuple" Version="4.5.0" />
  </ItemGroup>
  
  <PropertyGroup Condition="'$(TargetFramework)' == 'native'">
    <OutputType>winmdobj</OutputType>
    <DebugType>Full</DebugType>
    <TargetPlatformIdentifier>UAP</TargetPlatformIdentifier>
    <!-- Workaround for issue NuGet/Home#8388; change behavior during NuGet restore time vs. final build to avoid NuGet conflict in VS 2019 -->
    <NugetTargetMoniker Condition="'$(DesignTimeBuild)' == 'true'">native</NugetTargetMoniker>
    <NugetTargetMoniker Condition="'$(DesignTimeBuild)' != 'true'">UAP,Version=v10.0</NugetTargetMoniker>
    <PackageTargetFallback>uap10.0</PackageTargetFallback>
    <TargetPlatformVersion Condition="'$(TargetPlatformVersion)' == '' ">10.0.19041.0</TargetPlatformVersion>
    <TargetPlatformMinVersion Condition="'$(TargetPlatformMinVersion)' == '' ">10.0.10240.0</TargetPlatformMinVersion>
    <DefineConstants Condition="'$(DisableImplicitFrameworkDefines)' != 'true'">$(DefineConstants);NETFX_CORE;WINDOWS_UWP;WINRT</DefineConstants>
    <CopyLocalLockFileAssemblies Condition="'$(CopyLocalLockFileAssemblies)' == ''">false</CopyLocalLockFileAssemblies>
    <TargetFrameworkIdentifier>.NETCore</TargetFrameworkIdentifier>
    <TargetFrameworkVersion>v5.0</TargetFrameworkVersion>
    <LanguageTargets>$(MSBuildExtensionsPath)\Microsoft\WindowsXaml\v16.0\Microsoft.Windows.UI.Xaml.CSharp.targets</LanguageTargets>

    <!-- Need to override the built-in implicit defines for UAP or it'll be NETCORE5_0 -->
    <!-- this makes it UAP10_0_10240_0 to match the rest -->
    <ImplicitFrameworkDefine Condition="'$(DisableImplicitFrameworkDefines)' != 'true'">UAP$(TargetPlatformMinVersion.Replace('.', '_'))</ImplicitFrameworkDefine>
    <DisableImplicitFrameworkDefines Condition="'$(DisableImplicitFrameworkDefines)' != 'true'">true</DisableImplicitFrameworkDefines>
  </PropertyGroup>

</Project>
