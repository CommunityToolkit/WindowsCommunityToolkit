// OneDriveService works for OneDrive, OneDrive for Business, SharePoint document libraries, and Office Groups, to allow your 
// app the flexibility to read and store content in any of these locations with the same code

// Getting Started

// To use the OneDrive API, you need to have an access token that authenticates your app to a particular set of permissions 
// for a user. In this section, you'll learn how to:

// 1. Register your application to get a client ID and a client secret.
// 2. Sign your user in to OneDrive with the specified scopes using the token flow or code flow.
// 3. Sign the user out (optional).

// Register Your App

// To connect with Microsoft Graph, you'll need a work/school account or a Microsoft account.

// 1. Go to https://apps.dev.microsoft.com/
// 2. When prompted, sign in with your account credentials.
// 3. Find My applications and click Add an app.
// 4. Enter your app's name and click Create application.

// After you've completed these steps, an application ID is created for your app and displayed on your new app's properties page.

// First step is to Initialize the service using the new converged authentication of the Microsoft Graph. We can simply
// call the Initialize method on the OneDriveService singleton when initializing
// in UWP applications

Microsoft.Toolkit.Services.OneDrive.OneDriveService.Instance.Initialize( appClientId, scopes, null, null);

// If the user hasn't selected a scope then set it to FilesReadAll
// More information on scopes can be found here: https://docs.microsoft.com/en-us/onedrive/developer/rest-api/getting-started/msa-oauth#authentication-scopes
if (scopes == null)
{
    scopes = new string[] { MicrosoftGraphScope.FilesReadAll };
}

// After initialization the user will need to log in and give permission for the access scopes
if (!await OneDriveService.Instance.LoginAsync())
{
    throw new Exception("Unable to sign in");
}

// Retrieving the root of your OneDrive
var folder = await OneDriveService.Instance.RootFolderForMeAsync();

// Retrieving files
// Once you have a reference to the Root Folder you can get a list of all items
// List the Items from the current folder
var OneDriveItems = await folder.GetItemsAsync();
do
{
	//Get the next page of items
    OneDriveItems = await folder.NextItemsAsync();   
}
while (OneDriveItems != null);

// Creating folders
// Then from there you can play with folders and files
// Create Folder
string newFolderName = await OneDriveSampleHelpers.InputTextDialogAsync("New Folder Name");
if (!string.IsNullOrEmpty(newFolderName))
{
    await folder.StorageFolderPlatformService.CreateFolderAsync(newFolderName, CreationCollisionOption.GenerateUniqueName);
}

// Navigating subfolders
var currentFolder = await _graphCurrentFolder.GetFolderAsync(item.Name);
OneDriveItemsList.ItemsSource = await currentFolder.GetItemsAsync(20);
_graphCurrentFolder = currentFolder;

// Moving, copying and renaming items
// OneDrive API treats all items the same whether file, folder, etc.
// Move item
await _onedriveStorageItem.MoveAsync(targetonedriveStorageFolder);

// Copy Folder
await _onedriveStorageItem.CopyAsync(targetonedriveStorageFolder);

// Rename Folder
await _onedriveStorageItem.RenameAsync("NewLevel3");

// Creating or uploading files less than 4MB
// Open the local file or create a local file if brand new
var selectedFile = await OpenLocalFileAsync();
if (selectedFile != null)
{
    using (var localStream = await selectedFile.OpenReadAsync())
    {
        var fileCreated = await folder.StorageFolderPlatformService.CreateFileAsync(selectedFile.Name, CreationCollisionOption.GenerateUniqueName, localStream);
    }
}

// Creating or uploading files - that exceed 4MB
var selectedFile = await OpenLocalFileAsync();
if (selectedFile != null)
    {
        using (var localStream = await selectedFile.OpenReadAsync())
        {
            Shell.Current.DisplayWaitRing = true;

            // If the file exceed the Maximum size (ie 4MB)
            var largeFileCreated = await folder.StorageFolderPlatformService.UploadFileAsync(selectedFile.Name, localStream, CreationCollisionOption.GenerateUniqueName, 320 * 1024);
        }
    }
}

// Downloading files
// Download a file and save the content in a local file
// Convert the storage item to a storage file
var oneDriveFile = (Toolkit.Services.OneDrive.OneDriveStorageFile)item;
using (var remoteStream = (await oneDriveFile.StorageFilePlatformService.OpenAsync()) as IRandomAccessStream)
{
    // Use a helper method to open local filestream and write to it 
    await SaveToLocalFolder(remoteStream, oneDriveFile.Name);
}

// Retrieving file thumbnails
var file = (Toolkit.Services.OneDrive.OneDriveStorageItem)((AppBarButton)e.OriginalSource).DataContext;
using (var stream = (await file.StorageItemPlatformService.GetThumbnailAsync(Toolkit.Services.MicrosoftGraph.MicrosoftGraphEnums.ThumbnailSize.Large)) as IRandomAccessStream)
{
    // Use a helper method to display the images on the xaml view
    await OneDriveSampleHelpers.DisplayThumbnail(stream, "thumbnail");
}

// Manifest entries for AAD Authentication
<Capability Name="privateNetworkClientServer" />